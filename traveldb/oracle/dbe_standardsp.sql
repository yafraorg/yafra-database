------------------------------------------------------------------------------------------------------
--Stored procedures were auto-generated by LatticeSoft Stored Procedures Generator SPGen.NET v1.0
--Generated time: Sonntag, 28. MÃ¤rz 2004, 15:12:26
--Web: http://www.latticesoft.com
--Email: mailto:support@latticesoft.com
------------------------------------------------------------------------------------------------------


--======================================================
--[Types Package Generated for Schema: ROOT]

CREATE OR REPLACE PACKAGE Types AS
	TYPE cursor_type IS REF CURSOR;
END Types;

--[END Types Package for Schema: ROOT]

--======================================================

--===============================================================
--[Stored Procedure generated for table: AKTIONEN]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKTIONEN
(
	p_AKT_ID	IN	AKTIONEN.AKT_ID%TYPE,
	p_BEZ_ID	IN	AKTIONEN.BEZ_ID%TYPE,
	p_TEXTID	IN	AKTIONEN.TEXTID%TYPE,
	p_A_FLAG	IN	AKTIONEN.A_FLAG%TYPE,
	p_B_FLAG	IN	AKTIONEN.B_FLAG%TYPE,
	p_M_FLAG	IN	AKTIONEN.M_FLAG%TYPE,
	p_A_TYP_ID	IN	AKTIONEN.A_TYP_ID%TYPE,
	p_B2_FLAG	IN	AKTIONEN.B2_FLAG%TYPE,
	p_FILE_ID	IN	AKTIONEN.FILE_ID%TYPE
)
AS
BEGIN
	insert into AKTIONEN
	(
		AKT_ID,
		BEZ_ID,
		TEXTID,
		A_FLAG,
		B_FLAG,
		M_FLAG,
		A_TYP_ID,
		B2_FLAG,
		FILE_ID
	)
	values
	(
		p_AKT_ID,
		p_BEZ_ID,
		p_TEXTID,
		p_A_FLAG,
		p_B_FLAG,
		p_M_FLAG,
		p_A_TYP_ID,
		p_B2_FLAG,
		p_FILE_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKTIONEN
(
	p_AKT_ID	IN	AKTIONEN.AKT_ID%TYPE,
	p_BEZ_ID	IN	AKTIONEN.BEZ_ID%TYPE,
	p_TEXTID	IN	AKTIONEN.TEXTID%TYPE,
	p_A_FLAG	IN	AKTIONEN.A_FLAG%TYPE,
	p_B_FLAG	IN	AKTIONEN.B_FLAG%TYPE,
	p_M_FLAG	IN	AKTIONEN.M_FLAG%TYPE,
	p_A_TYP_ID	IN	AKTIONEN.A_TYP_ID%TYPE,
	p_B2_FLAG	IN	AKTIONEN.B2_FLAG%TYPE,
	p_FILE_ID	IN	AKTIONEN.FILE_ID%TYPE
)
AS
BEGIN
	update	AKTIONEN
		set	BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID,
			A_FLAG = p_A_FLAG,
			B_FLAG = p_B_FLAG,
			M_FLAG = p_M_FLAG,
			A_TYP_ID = p_A_TYP_ID,
			B2_FLAG = p_B2_FLAG,
			FILE_ID = p_FILE_ID
	where	AKT_ID = p_AKT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKTIONEN
(
	p_cur	OUT	Types.cursor_type,
	p_AKT_ID	IN	AKTIONEN.AKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	AKT_ID,
			BEZ_ID,
			TEXTID,
			A_FLAG,
			B_FLAG,
			M_FLAG,
			A_TYP_ID,
			B2_FLAG,
			FILE_ID
	from	AKTIONEN
	where	AKT_ID = p_AKT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKTIONEN
(
	p_AKT_ID	IN	AKTIONEN.AKT_ID%TYPE
)
AS
BEGIN
	delete from AKTIONEN
	where  AKT_ID = p_AKT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKTIONEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	AKT_ID,
			BEZ_ID,
			TEXTID,
			A_FLAG,
			B_FLAG,
			M_FLAG,
			A_TYP_ID,
			B2_FLAG,
			FILE_ID
	from	AKTIONEN;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_AKTIONEN_ByFK_A_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_A_TYP_ID	IN	AKTIONEN.A_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	AKT_ID,
			BEZ_ID,
			TEXTID,
			A_FLAG,
			B_FLAG,
			M_FLAG,
			A_TYP_ID,
			B2_FLAG,
			FILE_ID
	from	AKTIONEN
	where	A_TYP_ID = p_A_TYP_ID;
END;

create or replace PROCEDURE tdb_READALL_AKTIONEN_ByFK_FILE_ID
(
	p_cur	OUT	Types.cursor_type,
	p_FILE_ID	IN	AKTIONEN.FILE_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	AKT_ID,
			BEZ_ID,
			TEXTID,
			A_FLAG,
			B_FLAG,
			M_FLAG,
			A_TYP_ID,
			B2_FLAG,
			FILE_ID
	from	AKTIONEN
	where	FILE_ID = p_FILE_ID;
END;

--[End of Stored Procedure for table: AKTIONEN]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: AKTIONSGRP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKTIONSGRP
(
	p_PARENTAKT	IN	AKTIONSGRP.PARENTAKT%TYPE,
	p_CHILDAKT	IN	AKTIONSGRP.CHILDAKT%TYPE,
	p_ORD	IN	AKTIONSGRP.ORD%TYPE,
	p_H_AKT_ID	IN	AKTIONSGRP.H_AKT_ID%TYPE
)
AS
BEGIN
	insert into AKTIONSGRP
	(
		PARENTAKT,
		CHILDAKT,
		ORD,
		H_AKT_ID
	)
	values
	(
		p_PARENTAKT,
		p_CHILDAKT,
		p_ORD,
		p_H_AKT_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKTIONSGRP
(
	p_PARENTAKT	IN	AKTIONSGRP.PARENTAKT%TYPE,
	p_CHILDAKT	IN	AKTIONSGRP.CHILDAKT%TYPE,
	p_ORD	IN	AKTIONSGRP.ORD%TYPE,
	p_H_AKT_ID	IN	AKTIONSGRP.H_AKT_ID%TYPE
)
AS
BEGIN
	update	AKTIONSGRP
		set	H_AKT_ID = p_H_AKT_ID
	where	PARENTAKT = p_PARENTAKT AND CHILDAKT = p_CHILDAKT AND ORD = p_ORD;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKTIONSGRP
(
	p_cur	OUT	Types.cursor_type,
	p_PARENTAKT	IN	AKTIONSGRP.PARENTAKT%TYPE,
	p_CHILDAKT	IN	AKTIONSGRP.CHILDAKT%TYPE,
	p_ORD	IN	AKTIONSGRP.ORD%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARENTAKT,
			CHILDAKT,
			ORD,
			H_AKT_ID
	from	AKTIONSGRP
	where	PARENTAKT = p_PARENTAKT AND CHILDAKT = p_CHILDAKT AND ORD = p_ORD;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKTIONSGRP
(
	p_PARENTAKT	IN	AKTIONSGRP.PARENTAKT%TYPE,
	p_CHILDAKT	IN	AKTIONSGRP.CHILDAKT%TYPE,
	p_ORD	IN	AKTIONSGRP.ORD%TYPE
)
AS
BEGIN
	delete from AKTIONSGRP
	where  PARENTAKT = p_PARENTAKT AND CHILDAKT = p_CHILDAKT AND ORD = p_ORD;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKTIONSGRP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PARENTAKT,
			CHILDAKT,
			ORD,
			H_AKT_ID
	from	AKTIONSGRP;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_AKTIONSGRP_ByFK_PARENTAKT
(
	p_cur	OUT	Types.cursor_type,
	p_PARENTAKT	IN	AKTIONSGRP.PARENTAKT%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARENTAKT,
			CHILDAKT,
			ORD,
			H_AKT_ID
	from	AKTIONSGRP
	where	PARENTAKT = p_PARENTAKT;
END;

create or replace PROCEDURE tdb_READALL_AKTIONSGRP_ByFK_CHILDAKT
(
	p_cur	OUT	Types.cursor_type,
	p_CHILDAKT	IN	AKTIONSGRP.CHILDAKT%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARENTAKT,
			CHILDAKT,
			ORD,
			H_AKT_ID
	from	AKTIONSGRP
	where	CHILDAKT = p_CHILDAKT;
END;

create or replace PROCEDURE tdb_READALL_AKTIONSGRP_ByFK_H_AKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_H_AKT_ID	IN	AKTIONSGRP.H_AKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARENTAKT,
			CHILDAKT,
			ORD,
			H_AKT_ID
	from	AKTIONSGRP
	where	H_AKT_ID = p_H_AKT_ID;
END;

--[End of Stored Procedure for table: AKTIONSGRP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: AKTIONSPARA]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKTIONSPARA
(
	p_A_TYP_ID	IN	AKTIONSPARA.A_TYP_ID%TYPE,
	p_NR	IN	AKTIONSPARA.NR%TYPE,
	p_TYP	IN	AKTIONSPARA.TYP%TYPE,
	p_BEZ	IN	AKTIONSPARA.BEZ%TYPE,
	p_MUSS	IN	AKTIONSPARA.MUSS%TYPE,
	p_FLAG	IN	AKTIONSPARA.FLAG%TYPE,
	p_TEXTID	IN	AKTIONSPARA.TEXTID%TYPE
)
AS
BEGIN
	insert into AKTIONSPARA
	(
		A_TYP_ID,
		NR,
		TYP,
		BEZ,
		MUSS,
		FLAG,
		TEXTID
	)
	values
	(
		p_A_TYP_ID,
		p_NR,
		p_TYP,
		p_BEZ,
		p_MUSS,
		p_FLAG,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKTIONSPARA
(
	p_A_TYP_ID	IN	AKTIONSPARA.A_TYP_ID%TYPE,
	p_NR	IN	AKTIONSPARA.NR%TYPE,
	p_TYP	IN	AKTIONSPARA.TYP%TYPE,
	p_BEZ	IN	AKTIONSPARA.BEZ%TYPE,
	p_MUSS	IN	AKTIONSPARA.MUSS%TYPE,
	p_FLAG	IN	AKTIONSPARA.FLAG%TYPE,
	p_TEXTID	IN	AKTIONSPARA.TEXTID%TYPE
)
AS
BEGIN
	update	AKTIONSPARA
		set	TYP = p_TYP,
			BEZ = p_BEZ,
			MUSS = p_MUSS,
			FLAG = p_FLAG,
			TEXTID = p_TEXTID
	where	A_TYP_ID = p_A_TYP_ID AND NR = p_NR;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKTIONSPARA
(
	p_cur	OUT	Types.cursor_type,
	p_A_TYP_ID	IN	AKTIONSPARA.A_TYP_ID%TYPE,
	p_NR	IN	AKTIONSPARA.NR%TYPE
)
AS
BEGIN
	open p_cur for
	select	A_TYP_ID,
			NR,
			TYP,
			BEZ,
			MUSS,
			FLAG,
			TEXTID
	from	AKTIONSPARA
	where	A_TYP_ID = p_A_TYP_ID AND NR = p_NR;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKTIONSPARA
(
	p_A_TYP_ID	IN	AKTIONSPARA.A_TYP_ID%TYPE,
	p_NR	IN	AKTIONSPARA.NR%TYPE
)
AS
BEGIN
	delete from AKTIONSPARA
	where  A_TYP_ID = p_A_TYP_ID AND NR = p_NR;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKTIONSPARA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	A_TYP_ID,
			NR,
			TYP,
			BEZ,
			MUSS,
			FLAG,
			TEXTID
	from	AKTIONSPARA;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_AKTIONSPARA_ByFK_A_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_A_TYP_ID	IN	AKTIONSPARA.A_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	A_TYP_ID,
			NR,
			TYP,
			BEZ,
			MUSS,
			FLAG,
			TEXTID
	from	AKTIONSPARA
	where	A_TYP_ID = p_A_TYP_ID;
END;

--[End of Stored Procedure for table: AKTIONSPARA]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: AKTIONSTEXTE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKTIONSTEXTE
(
	p_TEXTID	IN	AKTIONSTEXTE.TEXTID%TYPE,
	p_S_ID	IN	AKTIONSTEXTE.S_ID%TYPE,
	p_TEXTNR	IN	AKTIONSTEXTE.TEXTNR%TYPE,
	p_TEXT	IN	AKTIONSTEXTE.TEXT%TYPE,
	p_TYP	IN	AKTIONSTEXTE.TYP%TYPE
)
AS
BEGIN
	insert into AKTIONSTEXTE
	(
		TEXTID,
		S_ID,
		TEXTNR,
		TEXT,
		TYP
	)
	values
	(
		p_TEXTID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKTIONSTEXTE
(
	p_TEXTID	IN	AKTIONSTEXTE.TEXTID%TYPE,
	p_S_ID	IN	AKTIONSTEXTE.S_ID%TYPE,
	p_TEXTNR	IN	AKTIONSTEXTE.TEXTNR%TYPE,
	p_TEXT	IN	AKTIONSTEXTE.TEXT%TYPE,
	p_TYP	IN	AKTIONSTEXTE.TYP%TYPE
)
AS
BEGIN
	update	AKTIONSTEXTE
		set	TEXT = p_TEXT
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKTIONSTEXTE
(
	p_cur	OUT	Types.cursor_type,
	p_TEXTID	IN	AKTIONSTEXTE.TEXTID%TYPE,
	p_S_ID	IN	AKTIONSTEXTE.S_ID%TYPE,
	p_TEXTNR	IN	AKTIONSTEXTE.TEXTNR%TYPE,
	p_TYP	IN	AKTIONSTEXTE.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	AKTIONSTEXTE
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKTIONSTEXTE
(
	p_TEXTID	IN	AKTIONSTEXTE.TEXTID%TYPE,
	p_S_ID	IN	AKTIONSTEXTE.S_ID%TYPE,
	p_TEXTNR	IN	AKTIONSTEXTE.TEXTNR%TYPE,
	p_TYP	IN	AKTIONSTEXTE.TYP%TYPE
)
AS
BEGIN
	delete from AKTIONSTEXTE
	where  TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKTIONSTEXTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	AKTIONSTEXTE;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_AKTIONSTEXTE_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	AKTIONSTEXTE.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	AKTIONSTEXTE
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: AKTIONSTEXTE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: AKTIONS_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKTIONS_TYP
(
	p_A_TYP_ID	IN	AKTIONS_TYP.A_TYP_ID%TYPE,
	p_BEZ_ID	IN	AKTIONS_TYP.BEZ_ID%TYPE,
	p_PROZ	IN	AKTIONS_TYP.PROZ%TYPE,
	p_TEXTID	IN	AKTIONS_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into AKTIONS_TYP
	(
		A_TYP_ID,
		BEZ_ID,
		PROZ,
		TEXTID
	)
	values
	(
		p_A_TYP_ID,
		p_BEZ_ID,
		p_PROZ,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKTIONS_TYP
(
	p_A_TYP_ID	IN	AKTIONS_TYP.A_TYP_ID%TYPE,
	p_BEZ_ID	IN	AKTIONS_TYP.BEZ_ID%TYPE,
	p_PROZ	IN	AKTIONS_TYP.PROZ%TYPE,
	p_TEXTID	IN	AKTIONS_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	AKTIONS_TYP
		set	BEZ_ID = p_BEZ_ID,
			PROZ = p_PROZ,
			TEXTID = p_TEXTID
	where	A_TYP_ID = p_A_TYP_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKTIONS_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_A_TYP_ID	IN	AKTIONS_TYP.A_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	A_TYP_ID,
			BEZ_ID,
			PROZ,
			TEXTID
	from	AKTIONS_TYP
	where	A_TYP_ID = p_A_TYP_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKTIONS_TYP
(
	p_A_TYP_ID	IN	AKTIONS_TYP.A_TYP_ID%TYPE
)
AS
BEGIN
	delete from AKTIONS_TYP
	where  A_TYP_ID = p_A_TYP_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKTIONS_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	A_TYP_ID,
			BEZ_ID,
			PROZ,
			TEXTID
	from	AKTIONS_TYP;
END;

--[End of Stored Procedure for table: AKTIONS_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: AKT_DETAIL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_AKT_DETAIL
(
	p_BID	IN	AKT_DETAIL.BID%TYPE,
	p_PERS_ID	IN	AKT_DETAIL.PERS_ID%TYPE,
	p_DLG_ID	IN	AKT_DETAIL.DLG_ID%TYPE,
	p_DL_ID	IN	AKT_DETAIL.DL_ID%TYPE,
	p_TEIL	IN	AKT_DETAIL.TEIL%TYPE,
	p_AKT_ID	IN	AKT_DETAIL.AKT_ID%TYPE,
	p_ORD	IN	AKT_DETAIL.ORD%TYPE,
	p_A_TYP_ID	IN	AKT_DETAIL.A_TYP_ID%TYPE,
	p_Z_FLAG	IN	AKT_DETAIL.Z_FLAG%TYPE,
	p_AKT_NR	IN	AKT_DETAIL.AKT_NR%TYPE,
	p_SAI_ID	IN	AKT_DETAIL.SAI_ID%TYPE,
	p_PARENTAKT	IN	AKT_DETAIL.PARENTAKT%TYPE,
	p_EXEC_DAT	IN	AKT_DETAIL.EXEC_DAT%TYPE,
	p_FILE_ID	IN	AKT_DETAIL.FILE_ID%TYPE
)
AS
BEGIN
	insert into AKT_DETAIL
	(
		BID,
		PERS_ID,
		DLG_ID,
		DL_ID,
		TEIL,
		AKT_ID,
		ORD,
		A_TYP_ID,
		Z_FLAG,
		AKT_NR,
		SAI_ID,
		PARENTAKT,
		EXEC_DAT,
		FILE_ID
	)
	values
	(
		p_BID,
		p_PERS_ID,
		p_DLG_ID,
		p_DL_ID,
		p_TEIL,
		p_AKT_ID,
		p_ORD,
		p_A_TYP_ID,
		p_Z_FLAG,
		p_AKT_NR,
		p_SAI_ID,
		p_PARENTAKT,
		p_EXEC_DAT,
		p_FILE_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_AKT_DETAIL
(
	p_BID	IN	AKT_DETAIL.BID%TYPE,
	p_PERS_ID	IN	AKT_DETAIL.PERS_ID%TYPE,
	p_DLG_ID	IN	AKT_DETAIL.DLG_ID%TYPE,
	p_DL_ID	IN	AKT_DETAIL.DL_ID%TYPE,
	p_TEIL	IN	AKT_DETAIL.TEIL%TYPE,
	p_AKT_ID	IN	AKT_DETAIL.AKT_ID%TYPE,
	p_ORD	IN	AKT_DETAIL.ORD%TYPE,
	p_A_TYP_ID	IN	AKT_DETAIL.A_TYP_ID%TYPE,
	p_Z_FLAG	IN	AKT_DETAIL.Z_FLAG%TYPE,
	p_AKT_NR	IN	AKT_DETAIL.AKT_NR%TYPE,
	p_SAI_ID	IN	AKT_DETAIL.SAI_ID%TYPE,
	p_PARENTAKT	IN	AKT_DETAIL.PARENTAKT%TYPE,
	p_EXEC_DAT	IN	AKT_DETAIL.EXEC_DAT%TYPE,
	p_FILE_ID	IN	AKT_DETAIL.FILE_ID%TYPE
)
AS
BEGIN
	update	AKT_DETAIL
		set	A_TYP_ID = p_A_TYP_ID,
			Z_FLAG = p_Z_FLAG,
			AKT_NR = p_AKT_NR,
			SAI_ID = p_SAI_ID,
			EXEC_DAT = p_EXEC_DAT,
			FILE_ID = p_FILE_ID
	where	BID = p_BID AND PERS_ID = p_PERS_ID AND DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND AKT_ID = p_AKT_ID AND ORD = p_ORD AND PARENTAKT = p_PARENTAKT;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_AKT_DETAIL
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	AKT_DETAIL.BID%TYPE,
	p_PERS_ID	IN	AKT_DETAIL.PERS_ID%TYPE,
	p_DLG_ID	IN	AKT_DETAIL.DLG_ID%TYPE,
	p_DL_ID	IN	AKT_DETAIL.DL_ID%TYPE,
	p_TEIL	IN	AKT_DETAIL.TEIL%TYPE,
	p_AKT_ID	IN	AKT_DETAIL.AKT_ID%TYPE,
	p_ORD	IN	AKT_DETAIL.ORD%TYPE,
	p_PARENTAKT	IN	AKT_DETAIL.PARENTAKT%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	BID = p_BID AND PERS_ID = p_PERS_ID AND DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND AKT_ID = p_AKT_ID AND ORD = p_ORD AND PARENTAKT = p_PARENTAKT;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_AKT_DETAIL
(
	p_BID	IN	AKT_DETAIL.BID%TYPE,
	p_PERS_ID	IN	AKT_DETAIL.PERS_ID%TYPE,
	p_DLG_ID	IN	AKT_DETAIL.DLG_ID%TYPE,
	p_DL_ID	IN	AKT_DETAIL.DL_ID%TYPE,
	p_TEIL	IN	AKT_DETAIL.TEIL%TYPE,
	p_AKT_ID	IN	AKT_DETAIL.AKT_ID%TYPE,
	p_ORD	IN	AKT_DETAIL.ORD%TYPE,
	p_PARENTAKT	IN	AKT_DETAIL.PARENTAKT%TYPE
)
AS
BEGIN
	delete from AKT_DETAIL
	where  BID = p_BID AND PERS_ID = p_PERS_ID AND DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND AKT_ID = p_AKT_ID AND ORD = p_ORD AND PARENTAKT = p_PARENTAKT;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_AKT_DETAIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	AKT_DETAIL.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	AKT_DETAIL.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_DLG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	AKT_DETAIL.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	DLG_ID = p_DLG_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	AKT_DETAIL.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_AKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_AKT_ID	IN	AKT_DETAIL.AKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	AKT_ID = p_AKT_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_A_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_A_TYP_ID	IN	AKT_DETAIL.A_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	A_TYP_ID = p_A_TYP_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	AKT_DETAIL.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	SAI_ID = p_SAI_ID;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_PARENTAKT
(
	p_cur	OUT	Types.cursor_type,
	p_PARENTAKT	IN	AKT_DETAIL.PARENTAKT%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	PARENTAKT = p_PARENTAKT;
END;

create or replace PROCEDURE tdb_READALL_AKT_DETAIL_ByFK_FILE_ID
(
	p_cur	OUT	Types.cursor_type,
	p_FILE_ID	IN	AKT_DETAIL.FILE_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			AKT_ID,
			ORD,
			A_TYP_ID,
			Z_FLAG,
			AKT_NR,
			SAI_ID,
			PARENTAKT,
			EXEC_DAT,
			FILE_ID
	from	AKT_DETAIL
	where	FILE_ID = p_FILE_ID;
END;

--[End of Stored Procedure for table: AKT_DETAIL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: ANGEBOTS_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_ANGEBOTS_TYP
(
	p_ART_ID	IN	ANGEBOTS_TYP.ART_ID%TYPE,
	p_BEZ_ID	IN	ANGEBOTS_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	ANGEBOTS_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into ANGEBOTS_TYP
	(
		ART_ID,
		BEZ_ID,
		TEXTID
	)
	values
	(
		p_ART_ID,
		p_BEZ_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_ANGEBOTS_TYP
(
	p_ART_ID	IN	ANGEBOTS_TYP.ART_ID%TYPE,
	p_BEZ_ID	IN	ANGEBOTS_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	ANGEBOTS_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	ANGEBOTS_TYP
		set	BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID
	where	ART_ID = p_ART_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_ANGEBOTS_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_ART_ID	IN	ANGEBOTS_TYP.ART_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ART_ID,
			BEZ_ID,
			TEXTID
	from	ANGEBOTS_TYP
	where	ART_ID = p_ART_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_ANGEBOTS_TYP
(
	p_ART_ID	IN	ANGEBOTS_TYP.ART_ID%TYPE
)
AS
BEGIN
	delete from ANGEBOTS_TYP
	where  ART_ID = p_ART_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_ANGEBOTS_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ART_ID,
			BEZ_ID,
			TEXTID
	from	ANGEBOTS_TYP;
END;

--[End of Stored Procedure for table: ANGEBOTS_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: ARRANGEMENT]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_ARRANGEMENT
(
	p_ARR_ID	IN	ARRANGEMENT.ARR_ID%TYPE,
	p_CODE	IN	ARRANGEMENT.CODE%TYPE,
	p_BEZ_ID	IN	ARRANGEMENT.BEZ_ID%TYPE,
	p_A_DAT	IN	ARRANGEMENT.A_DAT%TYPE,
	p_PRG_ID	IN	ARRANGEMENT.PRG_ID%TYPE,
	p_TEXTID	IN	ARRANGEMENT.TEXTID%TYPE,
	p_SAI_ID	IN	ARRANGEMENT.SAI_ID%TYPE
)
AS
BEGIN
	insert into ARRANGEMENT
	(
		ARR_ID,
		CODE,
		BEZ_ID,
		A_DAT,
		PRG_ID,
		TEXTID,
		SAI_ID
	)
	values
	(
		p_ARR_ID,
		p_CODE,
		p_BEZ_ID,
		p_A_DAT,
		p_PRG_ID,
		p_TEXTID,
		p_SAI_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_ARRANGEMENT
(
	p_ARR_ID	IN	ARRANGEMENT.ARR_ID%TYPE,
	p_CODE	IN	ARRANGEMENT.CODE%TYPE,
	p_BEZ_ID	IN	ARRANGEMENT.BEZ_ID%TYPE,
	p_A_DAT	IN	ARRANGEMENT.A_DAT%TYPE,
	p_PRG_ID	IN	ARRANGEMENT.PRG_ID%TYPE,
	p_TEXTID	IN	ARRANGEMENT.TEXTID%TYPE,
	p_SAI_ID	IN	ARRANGEMENT.SAI_ID%TYPE
)
AS
BEGIN
	update	ARRANGEMENT
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			A_DAT = p_A_DAT,
			PRG_ID = p_PRG_ID,
			TEXTID = p_TEXTID,
			SAI_ID = p_SAI_ID
	where	ARR_ID = p_ARR_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_ARRANGEMENT
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	ARRANGEMENT.ARR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			CODE,
			BEZ_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	ARRANGEMENT
	where	ARR_ID = p_ARR_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_ARRANGEMENT
(
	p_ARR_ID	IN	ARRANGEMENT.ARR_ID%TYPE
)
AS
BEGIN
	delete from ARRANGEMENT
	where  ARR_ID = p_ARR_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_ARRANGEMENT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			CODE,
			BEZ_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	ARRANGEMENT;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_ARRANGEMENT_ByFK_PRG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PRG_ID	IN	ARRANGEMENT.PRG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			CODE,
			BEZ_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	ARRANGEMENT
	where	PRG_ID = p_PRG_ID;
END;

create or replace PROCEDURE tdb_READALL_ARRANGEMENT_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	ARRANGEMENT.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			CODE,
			BEZ_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	ARRANGEMENT
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: ARRANGEMENT]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: ARR_DLG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_ARR_DLG
(
	p_ARR_ID	IN	ARR_DLG.ARR_ID%TYPE,
	p_TEIL	IN	ARR_DLG.TEIL%TYPE,
	p_PRIO	IN	ARR_DLG.PRIO%TYPE,
	p_DLG_ID	IN	ARR_DLG.DLG_ID%TYPE
)
AS
BEGIN
	insert into ARR_DLG
	(
		ARR_ID,
		TEIL,
		PRIO,
		DLG_ID
	)
	values
	(
		p_ARR_ID,
		p_TEIL,
		p_PRIO,
		p_DLG_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_ARR_DLG
(
	p_ARR_ID	IN	ARR_DLG.ARR_ID%TYPE,
	p_TEIL	IN	ARR_DLG.TEIL%TYPE,
	p_PRIO	IN	ARR_DLG.PRIO%TYPE,
	p_DLG_ID	IN	ARR_DLG.DLG_ID%TYPE
)
AS
BEGIN
	update	ARR_DLG
		set	PRIO = p_PRIO
	where	ARR_ID = p_ARR_ID AND TEIL = p_TEIL AND DLG_ID = p_DLG_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_ARR_DLG
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	ARR_DLG.ARR_ID%TYPE,
	p_TEIL	IN	ARR_DLG.TEIL%TYPE,
	p_DLG_ID	IN	ARR_DLG.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID
	from	ARR_DLG
	where	ARR_ID = p_ARR_ID AND TEIL = p_TEIL AND DLG_ID = p_DLG_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_ARR_DLG
(
	p_ARR_ID	IN	ARR_DLG.ARR_ID%TYPE,
	p_TEIL	IN	ARR_DLG.TEIL%TYPE,
	p_DLG_ID	IN	ARR_DLG.DLG_ID%TYPE
)
AS
BEGIN
	delete from ARR_DLG
	where  ARR_ID = p_ARR_ID AND TEIL = p_TEIL AND DLG_ID = p_DLG_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_ARR_DLG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID
	from	ARR_DLG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_ARR_DLG_ByFK_ARR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	ARR_DLG.ARR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID
	from	ARR_DLG
	where	ARR_ID = p_ARR_ID;
END;

create or replace PROCEDURE tdb_READALL_ARR_DLG_ByFK_DLG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	ARR_DLG.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID
	from	ARR_DLG
	where	DLG_ID = p_DLG_ID;
END;

--[End of Stored Procedure for table: ARR_DLG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: BCH_DLN]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_BCH_DLN
(
	p_BID	IN	BCH_DLN.BID%TYPE,
	p_DLN_ID	IN	BCH_DLN.DLN_ID%TYPE
)
AS
BEGIN
	insert into BCH_DLN
	(
		BID,
		DLN_ID
	)
	values
	(
		p_BID,
		p_DLN_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_BCH_DLN
(
	p_BID	IN	BCH_DLN.BID%TYPE,
	p_DLN_ID	IN	BCH_DLN.DLN_ID%TYPE
)
AS
BEGIN
	update	BCH_DLN
		set	where	BID = p_BID AND DLN_ID = p_DLN_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_BCH_DLN
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	BCH_DLN.BID%TYPE,
	p_DLN_ID	IN	BCH_DLN.DLN_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLN_ID
	from	BCH_DLN
	where	BID = p_BID AND DLN_ID = p_DLN_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_BCH_DLN
(
	p_BID	IN	BCH_DLN.BID%TYPE,
	p_DLN_ID	IN	BCH_DLN.DLN_ID%TYPE
)
AS
BEGIN
	delete from BCH_DLN
	where  BID = p_BID AND DLN_ID = p_DLN_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_BCH_DLN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLN_ID
	from	BCH_DLN;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_BCH_DLN_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	BCH_DLN.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLN_ID
	from	BCH_DLN
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_BCH_DLN_ByFK_DLN_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLN_ID	IN	BCH_DLN.DLN_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLN_ID
	from	BCH_DLN
	where	DLN_ID = p_DLN_ID;
END;

--[End of Stored Procedure for table: BCH_DLN]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: BEZEICHNUNG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_BEZEICHNUNG
(
	p_BEZ_ID	IN	BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	BEZEICHNUNG.S_ID%TYPE,
	p_BEZ	IN	BEZEICHNUNG.BEZ%TYPE,
	p_TYP	IN	BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	insert into BEZEICHNUNG
	(
		BEZ_ID,
		S_ID,
		BEZ,
		TYP
	)
	values
	(
		p_BEZ_ID,
		p_S_ID,
		p_BEZ,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_BEZEICHNUNG
(
	p_BEZ_ID	IN	BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	BEZEICHNUNG.S_ID%TYPE,
	p_BEZ	IN	BEZEICHNUNG.BEZ%TYPE,
	p_TYP	IN	BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	update	BEZEICHNUNG
		set	BEZ = p_BEZ
	where	BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_BEZEICHNUNG
(
	p_cur	OUT	Types.cursor_type,
	p_BEZ_ID	IN	BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	BEZEICHNUNG.S_ID%TYPE,
	p_TYP	IN	BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			S_ID,
			BEZ,
			TYP
	from	BEZEICHNUNG
	where	BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_BEZEICHNUNG
(
	p_BEZ_ID	IN	BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	BEZEICHNUNG.S_ID%TYPE,
	p_TYP	IN	BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	delete from BEZEICHNUNG
	where  BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_BEZEICHNUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			S_ID,
			BEZ,
			TYP
	from	BEZEICHNUNG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_BEZEICHNUNG_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	BEZEICHNUNG.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			S_ID,
			BEZ,
			TYP
	from	BEZEICHNUNG
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: BEZEICHNUNG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: BUCHUNG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_BUCHUNG
(
	p_D_BID	IN	BUCHUNG.D_BID%TYPE,
	p_BID	IN	BUCHUNG.BID%TYPE,
	p_REF	IN	BUCHUNG.REF%TYPE,
	p_ARR_ID	IN	BUCHUNG.ARR_ID%TYPE,
	p_KID	IN	BUCHUNG.KID%TYPE,
	p_SACH	IN	BUCHUNG.SACH%TYPE,
	p_ANW	IN	BUCHUNG.ANW%TYPE,
	p_B_DAT	IN	BUCHUNG.B_DAT%TYPE,
	p_M_DAT	IN	BUCHUNG.M_DAT%TYPE,
	p_OPT_BST	IN	BUCHUNG.OPT_BST%TYPE,
	p_OPT_KID	IN	BUCHUNG.OPT_KID%TYPE,
	p_STA	IN	BUCHUNG.STA%TYPE,
	p_AST	IN	BUCHUNG.AST%TYPE,
	p_SAI_ID	IN	BUCHUNG.SAI_ID%TYPE,
	p_K_ID	IN	BUCHUNG.K_ID%TYPE,
	p_MPID	IN	BUCHUNG.MPID%TYPE,
	p_HISTORY	IN	BUCHUNG.HISTORY%TYPE,
	p_TEXTID	IN	BUCHUNG.TEXTID%TYPE
)
AS
BEGIN
	insert into BUCHUNG
	(
		D_BID,
		BID,
		REF,
		ARR_ID,
		KID,
		SACH,
		ANW,
		B_DAT,
		M_DAT,
		OPT_BST,
		OPT_KID,
		STA,
		AST,
		SAI_ID,
		K_ID,
		MPID,
		HISTORY,
		TEXTID
	)
	values
	(
		p_D_BID,
		p_BID,
		p_REF,
		p_ARR_ID,
		p_KID,
		p_SACH,
		p_ANW,
		p_B_DAT,
		p_M_DAT,
		p_OPT_BST,
		p_OPT_KID,
		p_STA,
		p_AST,
		p_SAI_ID,
		p_K_ID,
		p_MPID,
		p_HISTORY,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_BUCHUNG
(
	p_D_BID	IN	BUCHUNG.D_BID%TYPE,
	p_BID	IN	BUCHUNG.BID%TYPE,
	p_REF	IN	BUCHUNG.REF%TYPE,
	p_ARR_ID	IN	BUCHUNG.ARR_ID%TYPE,
	p_KID	IN	BUCHUNG.KID%TYPE,
	p_SACH	IN	BUCHUNG.SACH%TYPE,
	p_ANW	IN	BUCHUNG.ANW%TYPE,
	p_B_DAT	IN	BUCHUNG.B_DAT%TYPE,
	p_M_DAT	IN	BUCHUNG.M_DAT%TYPE,
	p_OPT_BST	IN	BUCHUNG.OPT_BST%TYPE,
	p_OPT_KID	IN	BUCHUNG.OPT_KID%TYPE,
	p_STA	IN	BUCHUNG.STA%TYPE,
	p_AST	IN	BUCHUNG.AST%TYPE,
	p_SAI_ID	IN	BUCHUNG.SAI_ID%TYPE,
	p_K_ID	IN	BUCHUNG.K_ID%TYPE,
	p_MPID	IN	BUCHUNG.MPID%TYPE,
	p_HISTORY	IN	BUCHUNG.HISTORY%TYPE,
	p_TEXTID	IN	BUCHUNG.TEXTID%TYPE
)
AS
BEGIN
	update	BUCHUNG
		set	D_BID = p_D_BID,
			REF = p_REF,
			ARR_ID = p_ARR_ID,
			KID = p_KID,
			SACH = p_SACH,
			ANW = p_ANW,
			B_DAT = p_B_DAT,
			M_DAT = p_M_DAT,
			OPT_BST = p_OPT_BST,
			OPT_KID = p_OPT_KID,
			STA = p_STA,
			AST = p_AST,
			SAI_ID = p_SAI_ID,
			K_ID = p_K_ID,
			MPID = p_MPID,
			HISTORY = p_HISTORY,
			TEXTID = p_TEXTID
	where	BID = p_BID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_BUCHUNG
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	BUCHUNG.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	BID = p_BID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_BUCHUNG
(
	p_BID	IN	BUCHUNG.BID%TYPE
)
AS
BEGIN
	delete from BUCHUNG
	where  BID = p_BID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_BUCHUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_ARR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	BUCHUNG.ARR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	ARR_ID = p_ARR_ID;
END;

create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	BUCHUNG.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	KID = p_KID;
END;

create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_SACH
(
	p_cur	OUT	Types.cursor_type,
	p_SACH	IN	BUCHUNG.SACH%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	SACH = p_SACH;
END;

create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_ANW
(
	p_cur	OUT	Types.cursor_type,
	p_ANW	IN	BUCHUNG.ANW%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	ANW = p_ANW;
END;

create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	BUCHUNG.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	SAI_ID = p_SAI_ID;
END;

create or replace PROCEDURE tdb_READALL_BUCHUNG_ByFK_K_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	BUCHUNG.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			ANW,
			B_DAT,
			M_DAT,
			OPT_BST,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			MPID,
			HISTORY,
			TEXTID
	from	BUCHUNG
	where	K_ID = p_K_ID;
END;

--[End of Stored Procedure for table: BUCHUNG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: DIENSTLEISTUNG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_DIENSTLEISTUNG
(
	p_DLG_ID	IN	DIENSTLEISTUNG.DLG_ID%TYPE,
	p_CODE	IN	DIENSTLEISTUNG.CODE%TYPE,
	p_BEZ_ID	IN	DIENSTLEISTUNG.BEZ_ID%TYPE,
	p_TEXTID	IN	DIENSTLEISTUNG.TEXTID%TYPE,
	p_SAI_ID	IN	DIENSTLEISTUNG.SAI_ID%TYPE,
	p_A_ZEIT	IN	DIENSTLEISTUNG.A_ZEIT%TYPE,
	p_AKT_ID	IN	DIENSTLEISTUNG.AKT_ID%TYPE
)
AS
BEGIN
	insert into DIENSTLEISTUNG
	(
		DLG_ID,
		CODE,
		BEZ_ID,
		TEXTID,
		SAI_ID,
		A_ZEIT,
		AKT_ID
	)
	values
	(
		p_DLG_ID,
		p_CODE,
		p_BEZ_ID,
		p_TEXTID,
		p_SAI_ID,
		p_A_ZEIT,
		p_AKT_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_DIENSTLEISTUNG
(
	p_DLG_ID	IN	DIENSTLEISTUNG.DLG_ID%TYPE,
	p_CODE	IN	DIENSTLEISTUNG.CODE%TYPE,
	p_BEZ_ID	IN	DIENSTLEISTUNG.BEZ_ID%TYPE,
	p_TEXTID	IN	DIENSTLEISTUNG.TEXTID%TYPE,
	p_SAI_ID	IN	DIENSTLEISTUNG.SAI_ID%TYPE,
	p_A_ZEIT	IN	DIENSTLEISTUNG.A_ZEIT%TYPE,
	p_AKT_ID	IN	DIENSTLEISTUNG.AKT_ID%TYPE
)
AS
BEGIN
	update	DIENSTLEISTUNG
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID,
			SAI_ID = p_SAI_ID,
			A_ZEIT = p_A_ZEIT,
			AKT_ID = p_AKT_ID
	where	DLG_ID = p_DLG_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_DIENSTLEISTUNG
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	DIENSTLEISTUNG.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	DIENSTLEISTUNG
	where	DLG_ID = p_DLG_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_DIENSTLEISTUNG
(
	p_DLG_ID	IN	DIENSTLEISTUNG.DLG_ID%TYPE
)
AS
BEGIN
	delete from DIENSTLEISTUNG
	where  DLG_ID = p_DLG_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_DIENSTLEISTUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	DIENSTLEISTUNG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_DIENSTLEISTUNG_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	DIENSTLEISTUNG.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	DIENSTLEISTUNG
	where	SAI_ID = p_SAI_ID;
END;

create or replace PROCEDURE tdb_READALL_DIENSTLEISTUNG_ByFK_AKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_AKT_ID	IN	DIENSTLEISTUNG.AKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	DIENSTLEISTUNG
	where	AKT_ID = p_AKT_ID;
END;

--[End of Stored Procedure for table: DIENSTLEISTUNG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: DIENST_ANGEBOT]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_DIENST_ANGEBOT
(
	p_DLA_ID	IN	DIENST_ANGEBOT.DLA_ID%TYPE,
	p_CODE	IN	DIENST_ANGEBOT.CODE%TYPE,
	p_H_DLA_ID	IN	DIENST_ANGEBOT.H_DLA_ID%TYPE,
	p_ORD	IN	DIENST_ANGEBOT.ORD%TYPE,
	p_DLT_ID	IN	DIENST_ANGEBOT.DLT_ID%TYPE,
	p_BEZ_ID	IN	DIENST_ANGEBOT.BEZ_ID%TYPE,
	p_AKT_ID	IN	DIENST_ANGEBOT.AKT_ID%TYPE,
	p_ORT	IN	DIENST_ANGEBOT.ORT%TYPE,
	p_ART_ID	IN	DIENST_ANGEBOT.ART_ID%TYPE,
	p_DAU	IN	DIENST_ANGEBOT.DAU%TYPE,
	p_TEXTID	IN	DIENST_ANGEBOT.TEXTID%TYPE,
	p_VON	IN	DIENST_ANGEBOT.VON%TYPE,
	p_NACH	IN	DIENST_ANGEBOT.NACH%TYPE
)
AS
BEGIN
	insert into DIENST_ANGEBOT
	(
		DLA_ID,
		CODE,
		H_DLA_ID,
		ORD,
		DLT_ID,
		BEZ_ID,
		AKT_ID,
		ORT,
		ART_ID,
		DAU,
		TEXTID,
		VON,
		NACH
	)
	values
	(
		p_DLA_ID,
		p_CODE,
		p_H_DLA_ID,
		p_ORD,
		p_DLT_ID,
		p_BEZ_ID,
		p_AKT_ID,
		p_ORT,
		p_ART_ID,
		p_DAU,
		p_TEXTID,
		p_VON,
		p_NACH
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_DIENST_ANGEBOT
(
	p_DLA_ID	IN	DIENST_ANGEBOT.DLA_ID%TYPE,
	p_CODE	IN	DIENST_ANGEBOT.CODE%TYPE,
	p_H_DLA_ID	IN	DIENST_ANGEBOT.H_DLA_ID%TYPE,
	p_ORD	IN	DIENST_ANGEBOT.ORD%TYPE,
	p_DLT_ID	IN	DIENST_ANGEBOT.DLT_ID%TYPE,
	p_BEZ_ID	IN	DIENST_ANGEBOT.BEZ_ID%TYPE,
	p_AKT_ID	IN	DIENST_ANGEBOT.AKT_ID%TYPE,
	p_ORT	IN	DIENST_ANGEBOT.ORT%TYPE,
	p_ART_ID	IN	DIENST_ANGEBOT.ART_ID%TYPE,
	p_DAU	IN	DIENST_ANGEBOT.DAU%TYPE,
	p_TEXTID	IN	DIENST_ANGEBOT.TEXTID%TYPE,
	p_VON	IN	DIENST_ANGEBOT.VON%TYPE,
	p_NACH	IN	DIENST_ANGEBOT.NACH%TYPE
)
AS
BEGIN
	update	DIENST_ANGEBOT
		set	CODE = p_CODE,
			H_DLA_ID = p_H_DLA_ID,
			ORD = p_ORD,
			DLT_ID = p_DLT_ID,
			BEZ_ID = p_BEZ_ID,
			AKT_ID = p_AKT_ID,
			ORT = p_ORT,
			ART_ID = p_ART_ID,
			DAU = p_DAU,
			TEXTID = p_TEXTID,
			VON = p_VON,
			NACH = p_NACH
	where	DLA_ID = p_DLA_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_DIENST_ANGEBOT
(
	p_cur	OUT	Types.cursor_type,
	p_DLA_ID	IN	DIENST_ANGEBOT.DLA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	DLA_ID = p_DLA_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_DIENST_ANGEBOT
(
	p_DLA_ID	IN	DIENST_ANGEBOT.DLA_ID%TYPE
)
AS
BEGIN
	delete from DIENST_ANGEBOT
	where  DLA_ID = p_DLA_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	DIENST_ANGEBOT.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	DLT_ID = p_DLT_ID;
END;

create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT_ByFK_AKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_AKT_ID	IN	DIENST_ANGEBOT.AKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	AKT_ID = p_AKT_ID;
END;

create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT_ByFK_ART_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ART_ID	IN	DIENST_ANGEBOT.ART_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	ART_ID = p_ART_ID;
END;

create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT_ByFK_VON
(
	p_cur	OUT	Types.cursor_type,
	p_VON	IN	DIENST_ANGEBOT.VON%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	VON = p_VON;
END;

create or replace PROCEDURE tdb_READALL_DIENST_ANGEBOT_ByFK_NACH
(
	p_cur	OUT	Types.cursor_type,
	p_NACH	IN	DIENST_ANGEBOT.NACH%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			CODE,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DIENST_ANGEBOT
	where	NACH = p_NACH;
END;

--[End of Stored Procedure for table: DIENST_ANGEBOT]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: DIENST_TRAEGER]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_DIENST_TRAEGER
(
	p_DLT_ID	IN	DIENST_TRAEGER.DLT_ID%TYPE,
	p_CODE	IN	DIENST_TRAEGER.CODE%TYPE,
	p_BEZ_ID	IN	DIENST_TRAEGER.BEZ_ID%TYPE,
	p_KAT_ID	IN	DIENST_TRAEGER.KAT_ID%TYPE,
	p_H_DLT_ID	IN	DIENST_TRAEGER.H_DLT_ID%TYPE,
	p_DLT_GRP_ID	IN	DIENST_TRAEGER.DLT_GRP_ID%TYPE,
	p_HOST_ID	IN	DIENST_TRAEGER.HOST_ID%TYPE,
	p_TYP_ID	IN	DIENST_TRAEGER.TYP_ID%TYPE,
	p_TEXTID	IN	DIENST_TRAEGER.TEXTID%TYPE,
	p_STUFE	IN	DIENST_TRAEGER.STUFE%TYPE,
	p_STA_ID	IN	DIENST_TRAEGER.STA_ID%TYPE,
	p_ANZ	IN	DIENST_TRAEGER.ANZ%TYPE
)
AS
BEGIN
	insert into DIENST_TRAEGER
	(
		DLT_ID,
		CODE,
		BEZ_ID,
		KAT_ID,
		H_DLT_ID,
		DLT_GRP_ID,
		HOST_ID,
		TYP_ID,
		TEXTID,
		STUFE,
		STA_ID,
		ANZ
	)
	values
	(
		p_DLT_ID,
		p_CODE,
		p_BEZ_ID,
		p_KAT_ID,
		p_H_DLT_ID,
		p_DLT_GRP_ID,
		p_HOST_ID,
		p_TYP_ID,
		p_TEXTID,
		p_STUFE,
		p_STA_ID,
		p_ANZ
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_DIENST_TRAEGER
(
	p_DLT_ID	IN	DIENST_TRAEGER.DLT_ID%TYPE,
	p_CODE	IN	DIENST_TRAEGER.CODE%TYPE,
	p_BEZ_ID	IN	DIENST_TRAEGER.BEZ_ID%TYPE,
	p_KAT_ID	IN	DIENST_TRAEGER.KAT_ID%TYPE,
	p_H_DLT_ID	IN	DIENST_TRAEGER.H_DLT_ID%TYPE,
	p_DLT_GRP_ID	IN	DIENST_TRAEGER.DLT_GRP_ID%TYPE,
	p_HOST_ID	IN	DIENST_TRAEGER.HOST_ID%TYPE,
	p_TYP_ID	IN	DIENST_TRAEGER.TYP_ID%TYPE,
	p_TEXTID	IN	DIENST_TRAEGER.TEXTID%TYPE,
	p_STUFE	IN	DIENST_TRAEGER.STUFE%TYPE,
	p_STA_ID	IN	DIENST_TRAEGER.STA_ID%TYPE,
	p_ANZ	IN	DIENST_TRAEGER.ANZ%TYPE
)
AS
BEGIN
	update	DIENST_TRAEGER
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			KAT_ID = p_KAT_ID,
			H_DLT_ID = p_H_DLT_ID,
			DLT_GRP_ID = p_DLT_GRP_ID,
			HOST_ID = p_HOST_ID,
			TYP_ID = p_TYP_ID,
			TEXTID = p_TEXTID,
			STUFE = p_STUFE,
			STA_ID = p_STA_ID,
			ANZ = p_ANZ
	where	DLT_ID = p_DLT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_DIENST_TRAEGER
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	DIENST_TRAEGER.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			CODE,
			BEZ_ID,
			KAT_ID,
			H_DLT_ID,
			DLT_GRP_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE,
			STA_ID,
			ANZ
	from	DIENST_TRAEGER
	where	DLT_ID = p_DLT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_DIENST_TRAEGER
(
	p_DLT_ID	IN	DIENST_TRAEGER.DLT_ID%TYPE
)
AS
BEGIN
	delete from DIENST_TRAEGER
	where  DLT_ID = p_DLT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_DIENST_TRAEGER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			CODE,
			BEZ_ID,
			KAT_ID,
			H_DLT_ID,
			DLT_GRP_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE,
			STA_ID,
			ANZ
	from	DIENST_TRAEGER;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_DIENST_TRAEGER_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	DIENST_TRAEGER.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			CODE,
			BEZ_ID,
			KAT_ID,
			H_DLT_ID,
			DLT_GRP_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE,
			STA_ID,
			ANZ
	from	DIENST_TRAEGER
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_DIENST_TRAEGER_ByFK_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_TYP_ID	IN	DIENST_TRAEGER.TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			CODE,
			BEZ_ID,
			KAT_ID,
			H_DLT_ID,
			DLT_GRP_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE,
			STA_ID,
			ANZ
	from	DIENST_TRAEGER
	where	TYP_ID = p_TYP_ID;
END;

--[End of Stored Procedure for table: DIENST_TRAEGER]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: DLG_DLG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_DLG_DLG
(
	p_DLG_ID	IN	DLG_DLG.DLG_ID%TYPE,
	p_DL_ID	IN	DLG_DLG.DL_ID%TYPE,
	p_ORD	IN	DLG_DLG.ORD%TYPE
)
AS
BEGIN
	insert into DLG_DLG
	(
		DLG_ID,
		DL_ID,
		ORD
	)
	values
	(
		p_DLG_ID,
		p_DL_ID,
		p_ORD
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_DLG_DLG
(
	p_DLG_ID	IN	DLG_DLG.DLG_ID%TYPE,
	p_DL_ID	IN	DLG_DLG.DL_ID%TYPE,
	p_ORD	IN	DLG_DLG.ORD%TYPE
)
AS
BEGIN
	update	DLG_DLG
		set	ORD = p_ORD
	where	DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_DLG_DLG
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	DLG_DLG.DLG_ID%TYPE,
	p_DL_ID	IN	DLG_DLG.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			DL_ID,
			ORD
	from	DLG_DLG
	where	DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_DLG_DLG
(
	p_DLG_ID	IN	DLG_DLG.DLG_ID%TYPE,
	p_DL_ID	IN	DLG_DLG.DL_ID%TYPE
)
AS
BEGIN
	delete from DLG_DLG
	where  DLG_ID = p_DLG_ID AND DL_ID = p_DL_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_DLG_DLG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			DL_ID,
			ORD
	from	DLG_DLG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_DLG_DLG_ByFK_DLG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	DLG_DLG.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			DL_ID,
			ORD
	from	DLG_DLG
	where	DLG_ID = p_DLG_ID;
END;

create or replace PROCEDURE tdb_READALL_DLG_DLG_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	DLG_DLG.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			DL_ID,
			ORD
	from	DLG_DLG
	where	DL_ID = p_DL_ID;
END;

--[End of Stored Procedure for table: DLG_DLG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: DLG_PARTS]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_DLG_PARTS
(
	p_DL_ID	IN	DLG_PARTS.DL_ID%TYPE,
	p_CODE	IN	DLG_PARTS.CODE%TYPE,
	p_BEZ_ID	IN	DLG_PARTS.BEZ_ID%TYPE,
	p_H_DL_ID	IN	DLG_PARTS.H_DL_ID%TYPE,
	p_DLA_ID	IN	DLG_PARTS.DLA_ID%TYPE,
	p_ORD	IN	DLG_PARTS.ORD%TYPE,
	p_A_ZEIT	IN	DLG_PARTS.A_ZEIT%TYPE,
	p_E_ZEIT	IN	DLG_PARTS.E_ZEIT%TYPE,
	p_RES_F	IN	DLG_PARTS.RES_F%TYPE,
	p_KID	IN	DLG_PARTS.KID%TYPE,
	p_KONTO	IN	DLG_PARTS.KONTO%TYPE,
	p_TEXTID	IN	DLG_PARTS.TEXTID%TYPE,
	p_SAI_ID	IN	DLG_PARTS.SAI_ID%TYPE,
	p_RECHST	IN	DLG_PARTS.RECHST%TYPE
)
AS
BEGIN
	insert into DLG_PARTS
	(
		DL_ID,
		CODE,
		BEZ_ID,
		H_DL_ID,
		DLA_ID,
		ORD,
		A_ZEIT,
		E_ZEIT,
		RES_F,
		KID,
		KONTO,
		TEXTID,
		SAI_ID,
		RECHST
	)
	values
	(
		p_DL_ID,
		p_CODE,
		p_BEZ_ID,
		p_H_DL_ID,
		p_DLA_ID,
		p_ORD,
		p_A_ZEIT,
		p_E_ZEIT,
		p_RES_F,
		p_KID,
		p_KONTO,
		p_TEXTID,
		p_SAI_ID,
		p_RECHST
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_DLG_PARTS
(
	p_DL_ID	IN	DLG_PARTS.DL_ID%TYPE,
	p_CODE	IN	DLG_PARTS.CODE%TYPE,
	p_BEZ_ID	IN	DLG_PARTS.BEZ_ID%TYPE,
	p_H_DL_ID	IN	DLG_PARTS.H_DL_ID%TYPE,
	p_DLA_ID	IN	DLG_PARTS.DLA_ID%TYPE,
	p_ORD	IN	DLG_PARTS.ORD%TYPE,
	p_A_ZEIT	IN	DLG_PARTS.A_ZEIT%TYPE,
	p_E_ZEIT	IN	DLG_PARTS.E_ZEIT%TYPE,
	p_RES_F	IN	DLG_PARTS.RES_F%TYPE,
	p_KID	IN	DLG_PARTS.KID%TYPE,
	p_KONTO	IN	DLG_PARTS.KONTO%TYPE,
	p_TEXTID	IN	DLG_PARTS.TEXTID%TYPE,
	p_SAI_ID	IN	DLG_PARTS.SAI_ID%TYPE,
	p_RECHST	IN	DLG_PARTS.RECHST%TYPE
)
AS
BEGIN
	update	DLG_PARTS
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			H_DL_ID = p_H_DL_ID,
			DLA_ID = p_DLA_ID,
			ORD = p_ORD,
			A_ZEIT = p_A_ZEIT,
			E_ZEIT = p_E_ZEIT,
			RES_F = p_RES_F,
			KID = p_KID,
			KONTO = p_KONTO,
			TEXTID = p_TEXTID,
			SAI_ID = p_SAI_ID,
			RECHST = p_RECHST
	where	DL_ID = p_DL_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_DLG_PARTS
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	DLG_PARTS.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS
	where	DL_ID = p_DL_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_DLG_PARTS
(
	p_DL_ID	IN	DLG_PARTS.DL_ID%TYPE
)
AS
BEGIN
	delete from DLG_PARTS
	where  DL_ID = p_DL_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_DLG_PARTS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_DLG_PARTS_ByFK_DLA_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLA_ID	IN	DLG_PARTS.DLA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS
	where	DLA_ID = p_DLA_ID;
END;

create or replace PROCEDURE tdb_READALL_DLG_PARTS_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	DLG_PARTS.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS
	where	KID = p_KID;
END;

create or replace PROCEDURE tdb_READALL_DLG_PARTS_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	DLG_PARTS.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS
	where	SAI_ID = p_SAI_ID;
END;

create or replace PROCEDURE tdb_READALL_DLG_PARTS_ByFK_RECHST
(
	p_cur	OUT	Types.cursor_type,
	p_RECHST	IN	DLG_PARTS.RECHST%TYPE
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			CODE,
			BEZ_ID,
			H_DL_ID,
			DLA_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID,
			RECHST
	from	DLG_PARTS
	where	RECHST = p_RECHST;
END;

--[End of Stored Procedure for table: DLG_PARTS]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: GRAFORM]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_GRAFORM
(
	p_GRA_ID	IN	GRAFORM.GRA_ID%TYPE,
	p_FORMNR	IN	GRAFORM.FORMNR%TYPE,
	p_FORM	IN	GRAFORM.FORM%TYPE
)
AS
BEGIN
	insert into GRAFORM
	(
		GRA_ID,
		FORMNR,
		FORM
	)
	values
	(
		p_GRA_ID,
		p_FORMNR,
		p_FORM
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_GRAFORM
(
	p_GRA_ID	IN	GRAFORM.GRA_ID%TYPE,
	p_FORMNR	IN	GRAFORM.FORMNR%TYPE,
	p_FORM	IN	GRAFORM.FORM%TYPE
)
AS
BEGIN
	update	GRAFORM
		set	FORM = p_FORM
	where	GRA_ID = p_GRA_ID AND FORMNR = p_FORMNR;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_GRAFORM
(
	p_cur	OUT	Types.cursor_type,
	p_GRA_ID	IN	GRAFORM.GRA_ID%TYPE,
	p_FORMNR	IN	GRAFORM.FORMNR%TYPE
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			FORMNR,
			FORM
	from	GRAFORM
	where	GRA_ID = p_GRA_ID AND FORMNR = p_FORMNR;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_GRAFORM
(
	p_GRA_ID	IN	GRAFORM.GRA_ID%TYPE,
	p_FORMNR	IN	GRAFORM.FORMNR%TYPE
)
AS
BEGIN
	delete from GRAFORM
	where  GRA_ID = p_GRA_ID AND FORMNR = p_FORMNR;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_GRAFORM
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			FORMNR,
			FORM
	from	GRAFORM;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_GRAFORM_ByFK_GRA_ID
(
	p_cur	OUT	Types.cursor_type,
	p_GRA_ID	IN	GRAFORM.GRA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			FORMNR,
			FORM
	from	GRAFORM
	where	GRA_ID = p_GRA_ID;
END;

--[End of Stored Procedure for table: GRAFORM]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: GRAPHIK]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_GRAPHIK
(
	p_GRA_ID	IN	GRAPHIK.GRA_ID%TYPE,
	p_BEZ_ID	IN	GRAPHIK.BEZ_ID%TYPE,
	p_DLT_ID	IN	GRAPHIK.DLT_ID%TYPE,
	p_TEXTID	IN	GRAPHIK.TEXTID%TYPE
)
AS
BEGIN
	insert into GRAPHIK
	(
		GRA_ID,
		BEZ_ID,
		DLT_ID,
		TEXTID
	)
	values
	(
		p_GRA_ID,
		p_BEZ_ID,
		p_DLT_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_GRAPHIK
(
	p_GRA_ID	IN	GRAPHIK.GRA_ID%TYPE,
	p_BEZ_ID	IN	GRAPHIK.BEZ_ID%TYPE,
	p_DLT_ID	IN	GRAPHIK.DLT_ID%TYPE,
	p_TEXTID	IN	GRAPHIK.TEXTID%TYPE
)
AS
BEGIN
	update	GRAPHIK
		set	BEZ_ID = p_BEZ_ID,
			DLT_ID = p_DLT_ID,
			TEXTID = p_TEXTID
	where	GRA_ID = p_GRA_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_GRAPHIK
(
	p_cur	OUT	Types.cursor_type,
	p_GRA_ID	IN	GRAPHIK.GRA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			BEZ_ID,
			DLT_ID,
			TEXTID
	from	GRAPHIK
	where	GRA_ID = p_GRA_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_GRAPHIK
(
	p_GRA_ID	IN	GRAPHIK.GRA_ID%TYPE
)
AS
BEGIN
	delete from GRAPHIK
	where  GRA_ID = p_GRA_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_GRAPHIK
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			BEZ_ID,
			DLT_ID,
			TEXTID
	from	GRAPHIK;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_GRAPHIK_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	GRAPHIK.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			BEZ_ID,
			DLT_ID,
			TEXTID
	from	GRAPHIK
	where	DLT_ID = p_DLT_ID;
END;

--[End of Stored Procedure for table: GRAPHIK]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: HELP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_HELP
(
	p_TOPIC	IN	HELP.TOPIC%TYPE,
	p_SEQ	IN	HELP.SEQ%TYPE,
	p_INFO	IN	HELP.INFO%TYPE,
	p_HELP_TYP	IN	HELP.HELP_TYP%TYPE,
	p_HELP_ID	IN	HELP.HELP_ID%TYPE,
	p_S_ID	IN	HELP.S_ID%TYPE,
	p_TEXTNR	IN	HELP.TEXTNR%TYPE,
	p_TEXT	IN	HELP.TEXT%TYPE
)
AS
BEGIN
	insert into HELP
	(
		TOPIC,
		SEQ,
		INFO,
		HELP_TYP,
		HELP_ID,
		S_ID,
		TEXTNR,
		TEXT
	)
	values
	(
		p_TOPIC,
		p_SEQ,
		p_INFO,
		p_HELP_TYP,
		p_HELP_ID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_HELP
(
	p_TOPIC	IN	HELP.TOPIC%TYPE,
	p_SEQ	IN	HELP.SEQ%TYPE,
	p_INFO	IN	HELP.INFO%TYPE,
	p_HELP_TYP	IN	HELP.HELP_TYP%TYPE,
	p_HELP_ID	IN	HELP.HELP_ID%TYPE,
	p_S_ID	IN	HELP.S_ID%TYPE,
	p_TEXTNR	IN	HELP.TEXTNR%TYPE,
	p_TEXT	IN	HELP.TEXT%TYPE
)
AS
BEGIN
	update	HELP
		set	TOPIC = p_TOPIC,
			SEQ = p_SEQ,
			INFO = p_INFO,
			TEXT = p_TEXT
	where	HELP_TYP = p_HELP_TYP AND HELP_ID = p_HELP_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_HELP
(
	p_cur	OUT	Types.cursor_type,
	p_HELP_TYP	IN	HELP.HELP_TYP%TYPE,
	p_HELP_ID	IN	HELP.HELP_ID%TYPE,
	p_S_ID	IN	HELP.S_ID%TYPE,
	p_TEXTNR	IN	HELP.TEXTNR%TYPE
)
AS
BEGIN
	open p_cur for
	select	TOPIC,
			SEQ,
			INFO,
			HELP_TYP,
			HELP_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	HELP
	where	HELP_TYP = p_HELP_TYP AND HELP_ID = p_HELP_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_HELP
(
	p_HELP_TYP	IN	HELP.HELP_TYP%TYPE,
	p_HELP_ID	IN	HELP.HELP_ID%TYPE,
	p_S_ID	IN	HELP.S_ID%TYPE,
	p_TEXTNR	IN	HELP.TEXTNR%TYPE
)
AS
BEGIN
	delete from HELP
	where  HELP_TYP = p_HELP_TYP AND HELP_ID = p_HELP_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_HELP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TOPIC,
			SEQ,
			INFO,
			HELP_TYP,
			HELP_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	HELP;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_HELP_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	HELP.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TOPIC,
			SEQ,
			INFO,
			HELP_TYP,
			HELP_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	HELP
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: HELP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: HISTORY]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_HISTORY
(
	p_HIS_ID	IN	HISTORY.HIS_ID%TYPE,
	p_S_ID	IN	HISTORY.S_ID%TYPE,
	p_TEXTNR	IN	HISTORY.TEXTNR%TYPE,
	p_TEXT	IN	HISTORY.TEXT%TYPE,
	p_DAT	IN	HISTORY.DAT%TYPE,
	p_TYP	IN	HISTORY.TYP%TYPE
)
AS
BEGIN
	insert into HISTORY
	(
		HIS_ID,
		S_ID,
		TEXTNR,
		TEXT,
		DAT,
		TYP
	)
	values
	(
		p_HIS_ID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT,
		p_DAT,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_HISTORY
(
	p_HIS_ID	IN	HISTORY.HIS_ID%TYPE,
	p_S_ID	IN	HISTORY.S_ID%TYPE,
	p_TEXTNR	IN	HISTORY.TEXTNR%TYPE,
	p_TEXT	IN	HISTORY.TEXT%TYPE,
	p_DAT	IN	HISTORY.DAT%TYPE,
	p_TYP	IN	HISTORY.TYP%TYPE
)
AS
BEGIN
	update	HISTORY
		set	TEXT = p_TEXT,
			DAT = p_DAT,
			TYP = p_TYP
	where	HIS_ID = p_HIS_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_HISTORY
(
	p_cur	OUT	Types.cursor_type,
	p_HIS_ID	IN	HISTORY.HIS_ID%TYPE,
	p_S_ID	IN	HISTORY.S_ID%TYPE,
	p_TEXTNR	IN	HISTORY.TEXTNR%TYPE
)
AS
BEGIN
	open p_cur for
	select	HIS_ID,
			S_ID,
			TEXTNR,
			TEXT,
			DAT,
			TYP
	from	HISTORY
	where	HIS_ID = p_HIS_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_HISTORY
(
	p_HIS_ID	IN	HISTORY.HIS_ID%TYPE,
	p_S_ID	IN	HISTORY.S_ID%TYPE,
	p_TEXTNR	IN	HISTORY.TEXTNR%TYPE
)
AS
BEGIN
	delete from HISTORY
	where  HIS_ID = p_HIS_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_HISTORY
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HIS_ID,
			S_ID,
			TEXTNR,
			TEXT,
			DAT,
			TYP
	from	HISTORY;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_HISTORY_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	HISTORY.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HIS_ID,
			S_ID,
			TEXTNR,
			TEXT,
			DAT,
			TYP
	from	HISTORY
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: HISTORY]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: HOST_KONT]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_HOST_KONT
(
	p_BEZ_ID	IN	HOST_KONT.BEZ_ID%TYPE,
	p_FROM_PERS	IN	HOST_KONT.FROM_PERS%TYPE,
	p_KBST	IN	HOST_KONT.KBST%TYPE,
	p_DLA_ID	IN	HOST_KONT.DLA_ID%TYPE,
	p_DL_ID	IN	HOST_KONT.DL_ID%TYPE,
	p_DL_VONDAT	IN	HOST_KONT.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	HOST_KONT.DL_BISDAT%TYPE,
	p_TEXTID	IN	HOST_KONT.TEXTID%TYPE,
	p_OPT_DAT	IN	HOST_KONT.OPT_DAT%TYPE,
	p_SAI_ID	IN	HOST_KONT.SAI_ID%TYPE,
	p_REF	IN	HOST_KONT.REF%TYPE,
	p_HISTORY	IN	HOST_KONT.HISTORY%TYPE,
	p_HOSTKONT_ID	IN	HOST_KONT.HOSTKONT_ID%TYPE
)
AS
BEGIN
	insert into HOST_KONT
	(
		BEZ_ID,
		FROM_PERS,
		KBST,
		DLA_ID,
		DL_ID,
		DL_VONDAT,
		DL_BISDAT,
		TEXTID,
		OPT_DAT,
		SAI_ID,
		REF,
		HISTORY,
		HOSTKONT_ID
	)
	values
	(
		p_BEZ_ID,
		p_FROM_PERS,
		p_KBST,
		p_DLA_ID,
		p_DL_ID,
		p_DL_VONDAT,
		p_DL_BISDAT,
		p_TEXTID,
		p_OPT_DAT,
		p_SAI_ID,
		p_REF,
		p_HISTORY,
		p_HOSTKONT_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_HOST_KONT
(
	p_BEZ_ID	IN	HOST_KONT.BEZ_ID%TYPE,
	p_FROM_PERS	IN	HOST_KONT.FROM_PERS%TYPE,
	p_KBST	IN	HOST_KONT.KBST%TYPE,
	p_DLA_ID	IN	HOST_KONT.DLA_ID%TYPE,
	p_DL_ID	IN	HOST_KONT.DL_ID%TYPE,
	p_DL_VONDAT	IN	HOST_KONT.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	HOST_KONT.DL_BISDAT%TYPE,
	p_TEXTID	IN	HOST_KONT.TEXTID%TYPE,
	p_OPT_DAT	IN	HOST_KONT.OPT_DAT%TYPE,
	p_SAI_ID	IN	HOST_KONT.SAI_ID%TYPE,
	p_REF	IN	HOST_KONT.REF%TYPE,
	p_HISTORY	IN	HOST_KONT.HISTORY%TYPE,
	p_HOSTKONT_ID	IN	HOST_KONT.HOSTKONT_ID%TYPE
)
AS
BEGIN
	update	HOST_KONT
		set	BEZ_ID = p_BEZ_ID,
			FROM_PERS = p_FROM_PERS,
			KBST = p_KBST,
			DLA_ID = p_DLA_ID,
			DL_ID = p_DL_ID,
			DL_VONDAT = p_DL_VONDAT,
			DL_BISDAT = p_DL_BISDAT,
			TEXTID = p_TEXTID,
			OPT_DAT = p_OPT_DAT,
			SAI_ID = p_SAI_ID,
			REF = p_REF,
			HISTORY = p_HISTORY
	where	HOSTKONT_ID = p_HOSTKONT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_HOST_KONT
(
	p_cur	OUT	Types.cursor_type,
	p_HOSTKONT_ID	IN	HOST_KONT.HOSTKONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	HOSTKONT_ID = p_HOSTKONT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_HOST_KONT
(
	p_HOSTKONT_ID	IN	HOST_KONT.HOSTKONT_ID%TYPE
)
AS
BEGIN
	delete from HOST_KONT
	where  HOSTKONT_ID = p_HOSTKONT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_HOST_KONT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_HOST_KONT_ByFK_FROM_PERS
(
	p_cur	OUT	Types.cursor_type,
	p_FROM_PERS	IN	HOST_KONT.FROM_PERS%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	FROM_PERS = p_FROM_PERS;
END;

create or replace PROCEDURE tdb_READALL_HOST_KONT_ByFK_KBST
(
	p_cur	OUT	Types.cursor_type,
	p_KBST	IN	HOST_KONT.KBST%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	KBST = p_KBST;
END;

create or replace PROCEDURE tdb_READALL_HOST_KONT_ByFK_DLA_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLA_ID	IN	HOST_KONT.DLA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	DLA_ID = p_DLA_ID;
END;

create or replace PROCEDURE tdb_READALL_HOST_KONT_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	HOST_KONT.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_HOST_KONT_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	HOST_KONT.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			FROM_PERS,
			KBST,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			TEXTID,
			OPT_DAT,
			SAI_ID,
			REF,
			HISTORY,
			HOSTKONT_ID
	from	HOST_KONT
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: HOST_KONT]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KAPA]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KAPA
(
	p_KAT_ID	IN	KAPA.KAT_ID%TYPE,
	p_KATBEZ_ID	IN	KAPA.KATBEZ_ID%TYPE,
	p_TDL_ID	IN	KAPA.TDL_ID%TYPE,
	p_TDLBEZ_ID	IN	KAPA.TDLBEZ_ID%TYPE,
	p_PRE_ID	IN	KAPA.PRE_ID%TYPE,
	p_ANZ	IN	KAPA.ANZ%TYPE,
	p_BUSY	IN	KAPA.BUSY%TYPE,
	p_VPR	IN	KAPA.VPR%TYPE,
	p_VON_DAT	IN	KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	insert into KAPA
	(
		KAT_ID,
		KATBEZ_ID,
		TDL_ID,
		TDLBEZ_ID,
		PRE_ID,
		ANZ,
		BUSY,
		VPR,
		VON_DAT,
		BIS_DAT
	)
	values
	(
		p_KAT_ID,
		p_KATBEZ_ID,
		p_TDL_ID,
		p_TDLBEZ_ID,
		p_PRE_ID,
		p_ANZ,
		p_BUSY,
		p_VPR,
		p_VON_DAT,
		p_BIS_DAT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KAPA
(
	p_KAT_ID	IN	KAPA.KAT_ID%TYPE,
	p_KATBEZ_ID	IN	KAPA.KATBEZ_ID%TYPE,
	p_TDL_ID	IN	KAPA.TDL_ID%TYPE,
	p_TDLBEZ_ID	IN	KAPA.TDLBEZ_ID%TYPE,
	p_PRE_ID	IN	KAPA.PRE_ID%TYPE,
	p_ANZ	IN	KAPA.ANZ%TYPE,
	p_BUSY	IN	KAPA.BUSY%TYPE,
	p_VPR	IN	KAPA.VPR%TYPE,
	p_VON_DAT	IN	KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	update	KAPA
		set	KATBEZ_ID = p_KATBEZ_ID,
			TDLBEZ_ID = p_TDLBEZ_ID,
			PRE_ID = p_PRE_ID,
			ANZ = p_ANZ,
			BUSY = p_BUSY,
			VPR = p_VPR
	where	KAT_ID = p_KAT_ID AND TDL_ID = p_TDL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KAPA
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	KAPA.KAT_ID%TYPE,
	p_TDL_ID	IN	KAPA.TDL_ID%TYPE,
	p_VON_DAT	IN	KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			TDL_ID,
			TDLBEZ_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR,
			VON_DAT,
			BIS_DAT
	from	KAPA
	where	KAT_ID = p_KAT_ID AND TDL_ID = p_TDL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KAPA
(
	p_KAT_ID	IN	KAPA.KAT_ID%TYPE,
	p_TDL_ID	IN	KAPA.TDL_ID%TYPE,
	p_VON_DAT	IN	KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	delete from KAPA
	where  KAT_ID = p_KAT_ID AND TDL_ID = p_TDL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KAPA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			TDL_ID,
			TDLBEZ_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR,
			VON_DAT,
			BIS_DAT
	from	KAPA;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KAPA_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	KAPA.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			TDL_ID,
			TDLBEZ_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR,
			VON_DAT,
			BIS_DAT
	from	KAPA
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_KAPA_ByFK_TDL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_TDL_ID	IN	KAPA.TDL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			TDL_ID,
			TDLBEZ_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR,
			VON_DAT,
			BIS_DAT
	from	KAPA
	where	TDL_ID = p_TDL_ID;
END;

--[End of Stored Procedure for table: KAPA]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KATEGORIE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KATEGORIE
(
	p_KAT_ID	IN	KATEGORIE.KAT_ID%TYPE,
	p_BEZ_ID	IN	KATEGORIE.BEZ_ID%TYPE,
	p_H_KAT_ID	IN	KATEGORIE.H_KAT_ID%TYPE,
	p_TYP_ID	IN	KATEGORIE.TYP_ID%TYPE,
	p_GA	IN	KATEGORIE.GA%TYPE,
	p_TEXTID	IN	KATEGORIE.TEXTID%TYPE
)
AS
BEGIN
	insert into KATEGORIE
	(
		KAT_ID,
		BEZ_ID,
		H_KAT_ID,
		TYP_ID,
		GA,
		TEXTID
	)
	values
	(
		p_KAT_ID,
		p_BEZ_ID,
		p_H_KAT_ID,
		p_TYP_ID,
		p_GA,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KATEGORIE
(
	p_KAT_ID	IN	KATEGORIE.KAT_ID%TYPE,
	p_BEZ_ID	IN	KATEGORIE.BEZ_ID%TYPE,
	p_H_KAT_ID	IN	KATEGORIE.H_KAT_ID%TYPE,
	p_TYP_ID	IN	KATEGORIE.TYP_ID%TYPE,
	p_GA	IN	KATEGORIE.GA%TYPE,
	p_TEXTID	IN	KATEGORIE.TEXTID%TYPE
)
AS
BEGIN
	update	KATEGORIE
		set	BEZ_ID = p_BEZ_ID,
			H_KAT_ID = p_H_KAT_ID,
			TYP_ID = p_TYP_ID,
			GA = p_GA,
			TEXTID = p_TEXTID
	where	KAT_ID = p_KAT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KATEGORIE
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	KATEGORIE.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			BEZ_ID,
			H_KAT_ID,
			TYP_ID,
			GA,
			TEXTID
	from	KATEGORIE
	where	KAT_ID = p_KAT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KATEGORIE
(
	p_KAT_ID	IN	KATEGORIE.KAT_ID%TYPE
)
AS
BEGIN
	delete from KATEGORIE
	where  KAT_ID = p_KAT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KATEGORIE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			BEZ_ID,
			H_KAT_ID,
			TYP_ID,
			GA,
			TEXTID
	from	KATEGORIE;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KATEGORIE_ByFK_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_TYP_ID	IN	KATEGORIE.TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			BEZ_ID,
			H_KAT_ID,
			TYP_ID,
			GA,
			TEXTID
	from	KATEGORIE
	where	TYP_ID = p_TYP_ID;
END;

--[End of Stored Procedure for table: KATEGORIE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KOLLEKTIV]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KOLLEKTIV
(
	p_K_ID	IN	KOLLEKTIV.K_ID%TYPE,
	p_REF	IN	KOLLEKTIV.REF%TYPE,
	p_NAME	IN	KOLLEKTIV.NAME%TYPE,
	p_K_TYP_ID	IN	KOLLEKTIV.K_TYP_ID%TYPE,
	p_KBST	IN	KOLLEKTIV.KBST%TYPE,
	p_K_STA	IN	KOLLEKTIV.K_STA%TYPE,
	p_HAUPTPERS	IN	KOLLEKTIV.HAUPTPERS%TYPE,
	p_KID	IN	KOLLEKTIV.KID%TYPE,
	p_TEXTID	IN	KOLLEKTIV.TEXTID%TYPE
)
AS
BEGIN
	insert into KOLLEKTIV
	(
		K_ID,
		REF,
		NAME,
		K_TYP_ID,
		KBST,
		K_STA,
		HAUPTPERS,
		KID,
		TEXTID
	)
	values
	(
		p_K_ID,
		p_REF,
		p_NAME,
		p_K_TYP_ID,
		p_KBST,
		p_K_STA,
		p_HAUPTPERS,
		p_KID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KOLLEKTIV
(
	p_K_ID	IN	KOLLEKTIV.K_ID%TYPE,
	p_REF	IN	KOLLEKTIV.REF%TYPE,
	p_NAME	IN	KOLLEKTIV.NAME%TYPE,
	p_K_TYP_ID	IN	KOLLEKTIV.K_TYP_ID%TYPE,
	p_KBST	IN	KOLLEKTIV.KBST%TYPE,
	p_K_STA	IN	KOLLEKTIV.K_STA%TYPE,
	p_HAUPTPERS	IN	KOLLEKTIV.HAUPTPERS%TYPE,
	p_KID	IN	KOLLEKTIV.KID%TYPE,
	p_TEXTID	IN	KOLLEKTIV.TEXTID%TYPE
)
AS
BEGIN
	update	KOLLEKTIV
		set	REF = p_REF,
			NAME = p_NAME,
			K_TYP_ID = p_K_TYP_ID,
			KBST = p_KBST,
			K_STA = p_K_STA,
			HAUPTPERS = p_HAUPTPERS,
			KID = p_KID,
			TEXTID = p_TEXTID
	where	K_ID = p_K_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KOLLEKTIV
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	KOLLEKTIV.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV
	where	K_ID = p_K_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KOLLEKTIV
(
	p_K_ID	IN	KOLLEKTIV.K_ID%TYPE
)
AS
BEGIN
	delete from KOLLEKTIV
	where  K_ID = p_K_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KOLLEKTIV
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KOLLEKTIV_ByFK_K_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_TYP_ID	IN	KOLLEKTIV.K_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV
	where	K_TYP_ID = p_K_TYP_ID;
END;

create or replace PROCEDURE tdb_READALL_KOLLEKTIV_ByFK_KBST
(
	p_cur	OUT	Types.cursor_type,
	p_KBST	IN	KOLLEKTIV.KBST%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV
	where	KBST = p_KBST;
END;

create or replace PROCEDURE tdb_READALL_KOLLEKTIV_ByFK_HAUPTPERS
(
	p_cur	OUT	Types.cursor_type,
	p_HAUPTPERS	IN	KOLLEKTIV.HAUPTPERS%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV
	where	HAUPTPERS = p_HAUPTPERS;
END;

create or replace PROCEDURE tdb_READALL_KOLLEKTIV_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	KOLLEKTIV.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_ID,
			REF,
			NAME,
			K_TYP_ID,
			KBST,
			K_STA,
			HAUPTPERS,
			KID,
			TEXTID
	from	KOLLEKTIV
	where	KID = p_KID;
END;

--[End of Stored Procedure for table: KOLLEKTIV]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KOLLEKTIV_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KOLLEKTIV_TYP
(
	p_K_TYP_ID	IN	KOLLEKTIV_TYP.K_TYP_ID%TYPE,
	p_KOLCODE	IN	KOLLEKTIV_TYP.KOLCODE%TYPE,
	p_BEZ_ID	IN	KOLLEKTIV_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	KOLLEKTIV_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into KOLLEKTIV_TYP
	(
		K_TYP_ID,
		KOLCODE,
		BEZ_ID,
		TEXTID
	)
	values
	(
		p_K_TYP_ID,
		p_KOLCODE,
		p_BEZ_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KOLLEKTIV_TYP
(
	p_K_TYP_ID	IN	KOLLEKTIV_TYP.K_TYP_ID%TYPE,
	p_KOLCODE	IN	KOLLEKTIV_TYP.KOLCODE%TYPE,
	p_BEZ_ID	IN	KOLLEKTIV_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	KOLLEKTIV_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	KOLLEKTIV_TYP
		set	KOLCODE = p_KOLCODE,
			BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID
	where	K_TYP_ID = p_K_TYP_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KOLLEKTIV_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_K_TYP_ID	IN	KOLLEKTIV_TYP.K_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_TYP_ID,
			KOLCODE,
			BEZ_ID,
			TEXTID
	from	KOLLEKTIV_TYP
	where	K_TYP_ID = p_K_TYP_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KOLLEKTIV_TYP
(
	p_K_TYP_ID	IN	KOLLEKTIV_TYP.K_TYP_ID%TYPE
)
AS
BEGIN
	delete from KOLLEKTIV_TYP
	where  K_TYP_ID = p_K_TYP_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KOLLEKTIV_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	K_TYP_ID,
			KOLCODE,
			BEZ_ID,
			TEXTID
	from	KOLLEKTIV_TYP;
END;

--[End of Stored Procedure for table: KOLLEKTIV_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KOMMISSION]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KOMMISSION
(
	p_KOMM_ID	IN	KOMMISSION.KOMM_ID%TYPE,
	p_BEZ_ID	IN	KOMMISSION.BEZ_ID%TYPE,
	p_SATZ_ART	IN	KOMMISSION.SATZ_ART%TYPE,
	p_SATZ	IN	KOMMISSION.SATZ%TYPE,
	p_KOMM_TYP	IN	KOMMISSION.KOMM_TYP%TYPE,
	p_KBST	IN	KOMMISSION.KBST%TYPE,
	p_KAR_ID	IN	KOMMISSION.KAR_ID%TYPE,
	p_DLTT_ID	IN	KOMMISSION.DLTT_ID%TYPE,
	p_KAT_ID	IN	KOMMISSION.KAT_ID%TYPE,
	p_RKR_ID	IN	KOMMISSION.RKR_ID%TYPE,
	p_DLA_ID	IN	KOMMISSION.DLA_ID%TYPE,
	p_DL_ID	IN	KOMMISSION.DL_ID%TYPE,
	p_DL_VONDAT	IN	KOMMISSION.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	KOMMISSION.DL_BISDAT%TYPE,
	p_KONT_ID	IN	KOMMISSION.KONT_ID%TYPE,
	p_BID	IN	KOMMISSION.BID%TYPE,
	p_HISTORY	IN	KOMMISSION.HISTORY%TYPE,
	p_SAI_ID	IN	KOMMISSION.SAI_ID%TYPE,
	p_TEXTID	IN	KOMMISSION.TEXTID%TYPE
)
AS
BEGIN
	insert into KOMMISSION
	(
		KOMM_ID,
		BEZ_ID,
		SATZ_ART,
		SATZ,
		KOMM_TYP,
		KBST,
		KAR_ID,
		DLTT_ID,
		KAT_ID,
		RKR_ID,
		DLA_ID,
		DL_ID,
		DL_VONDAT,
		DL_BISDAT,
		KONT_ID,
		BID,
		HISTORY,
		SAI_ID,
		TEXTID
	)
	values
	(
		p_KOMM_ID,
		p_BEZ_ID,
		p_SATZ_ART,
		p_SATZ,
		p_KOMM_TYP,
		p_KBST,
		p_KAR_ID,
		p_DLTT_ID,
		p_KAT_ID,
		p_RKR_ID,
		p_DLA_ID,
		p_DL_ID,
		p_DL_VONDAT,
		p_DL_BISDAT,
		p_KONT_ID,
		p_BID,
		p_HISTORY,
		p_SAI_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KOMMISSION
(
	p_KOMM_ID	IN	KOMMISSION.KOMM_ID%TYPE,
	p_BEZ_ID	IN	KOMMISSION.BEZ_ID%TYPE,
	p_SATZ_ART	IN	KOMMISSION.SATZ_ART%TYPE,
	p_SATZ	IN	KOMMISSION.SATZ%TYPE,
	p_KOMM_TYP	IN	KOMMISSION.KOMM_TYP%TYPE,
	p_KBST	IN	KOMMISSION.KBST%TYPE,
	p_KAR_ID	IN	KOMMISSION.KAR_ID%TYPE,
	p_DLTT_ID	IN	KOMMISSION.DLTT_ID%TYPE,
	p_KAT_ID	IN	KOMMISSION.KAT_ID%TYPE,
	p_RKR_ID	IN	KOMMISSION.RKR_ID%TYPE,
	p_DLA_ID	IN	KOMMISSION.DLA_ID%TYPE,
	p_DL_ID	IN	KOMMISSION.DL_ID%TYPE,
	p_DL_VONDAT	IN	KOMMISSION.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	KOMMISSION.DL_BISDAT%TYPE,
	p_KONT_ID	IN	KOMMISSION.KONT_ID%TYPE,
	p_BID	IN	KOMMISSION.BID%TYPE,
	p_HISTORY	IN	KOMMISSION.HISTORY%TYPE,
	p_SAI_ID	IN	KOMMISSION.SAI_ID%TYPE,
	p_TEXTID	IN	KOMMISSION.TEXTID%TYPE
)
AS
BEGIN
	update	KOMMISSION
		set	BEZ_ID = p_BEZ_ID,
			SATZ_ART = p_SATZ_ART,
			SATZ = p_SATZ,
			KOMM_TYP = p_KOMM_TYP,
			KBST = p_KBST,
			KAR_ID = p_KAR_ID,
			DLTT_ID = p_DLTT_ID,
			KAT_ID = p_KAT_ID,
			RKR_ID = p_RKR_ID,
			DLA_ID = p_DLA_ID,
			DL_ID = p_DL_ID,
			DL_VONDAT = p_DL_VONDAT,
			DL_BISDAT = p_DL_BISDAT,
			KONT_ID = p_KONT_ID,
			BID = p_BID,
			HISTORY = p_HISTORY,
			SAI_ID = p_SAI_ID,
			TEXTID = p_TEXTID
	where	KOMM_ID = p_KOMM_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KOMMISSION
(
	p_cur	OUT	Types.cursor_type,
	p_KOMM_ID	IN	KOMMISSION.KOMM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	KOMM_ID = p_KOMM_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KOMMISSION
(
	p_KOMM_ID	IN	KOMMISSION.KOMM_ID%TYPE
)
AS
BEGIN
	delete from KOMMISSION
	where  KOMM_ID = p_KOMM_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KOMMISSION
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_KBST
(
	p_cur	OUT	Types.cursor_type,
	p_KBST	IN	KOMMISSION.KBST%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	KBST = p_KBST;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_KAR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAR_ID	IN	KOMMISSION.KAR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	KAR_ID = p_KAR_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_DLTT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLTT_ID	IN	KOMMISSION.DLTT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	DLTT_ID = p_DLTT_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	KOMMISSION.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_RKR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_RKR_ID	IN	KOMMISSION.RKR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	RKR_ID = p_RKR_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_DLA_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLA_ID	IN	KOMMISSION.DLA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	DLA_ID = p_DLA_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	KOMMISSION.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_KONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KONT_ID	IN	KOMMISSION.KONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	KONT_ID = p_KONT_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	KOMMISSION.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_KOMMISSION_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	KOMMISSION.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BEZ_ID,
			SATZ_ART,
			SATZ,
			KOMM_TYP,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			DL_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			BID,
			HISTORY,
			SAI_ID,
			TEXTID
	from	KOMMISSION
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: KOMMISSION]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KOMM_DETAIL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KOMM_DETAIL
(
	p_KOMM_ID	IN	KOMM_DETAIL.KOMM_ID%TYPE,
	p_BID	IN	KOMM_DETAIL.BID%TYPE,
	p_DLN_ID	IN	KOMM_DETAIL.DLN_ID%TYPE,
	p_KUN_ID	IN	KOMM_DETAIL.KUN_ID%TYPE,
	p_KOL_ID	IN	KOMM_DETAIL.KOL_ID%TYPE,
	p_PRIO	IN	KOMM_DETAIL.PRIO%TYPE
)
AS
BEGIN
	insert into KOMM_DETAIL
	(
		KOMM_ID,
		BID,
		DLN_ID,
		KUN_ID,
		KOL_ID,
		PRIO
	)
	values
	(
		p_KOMM_ID,
		p_BID,
		p_DLN_ID,
		p_KUN_ID,
		p_KOL_ID,
		p_PRIO
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KOMM_DETAIL
(
	p_KOMM_ID	IN	KOMM_DETAIL.KOMM_ID%TYPE,
	p_BID	IN	KOMM_DETAIL.BID%TYPE,
	p_DLN_ID	IN	KOMM_DETAIL.DLN_ID%TYPE,
	p_KUN_ID	IN	KOMM_DETAIL.KUN_ID%TYPE,
	p_KOL_ID	IN	KOMM_DETAIL.KOL_ID%TYPE,
	p_PRIO	IN	KOMM_DETAIL.PRIO%TYPE
)
AS
BEGIN
	update	KOMM_DETAIL
		set	PRIO = p_PRIO
	where	KOMM_ID = p_KOMM_ID AND BID = p_BID AND DLN_ID = p_DLN_ID AND KUN_ID = p_KUN_ID AND KOL_ID = p_KOL_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KOMM_DETAIL
(
	p_cur	OUT	Types.cursor_type,
	p_KOMM_ID	IN	KOMM_DETAIL.KOMM_ID%TYPE,
	p_BID	IN	KOMM_DETAIL.BID%TYPE,
	p_DLN_ID	IN	KOMM_DETAIL.DLN_ID%TYPE,
	p_KUN_ID	IN	KOMM_DETAIL.KUN_ID%TYPE,
	p_KOL_ID	IN	KOMM_DETAIL.KOL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	KOMM_ID = p_KOMM_ID AND BID = p_BID AND DLN_ID = p_DLN_ID AND KUN_ID = p_KUN_ID AND KOL_ID = p_KOL_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KOMM_DETAIL
(
	p_KOMM_ID	IN	KOMM_DETAIL.KOMM_ID%TYPE,
	p_BID	IN	KOMM_DETAIL.BID%TYPE,
	p_DLN_ID	IN	KOMM_DETAIL.DLN_ID%TYPE,
	p_KUN_ID	IN	KOMM_DETAIL.KUN_ID%TYPE,
	p_KOL_ID	IN	KOMM_DETAIL.KOL_ID%TYPE
)
AS
BEGIN
	delete from KOMM_DETAIL
	where  KOMM_ID = p_KOMM_ID AND BID = p_BID AND DLN_ID = p_DLN_ID AND KUN_ID = p_KUN_ID AND KOL_ID = p_KOL_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KOMM_DETAIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KOMM_DETAIL_ByFK_KOMM_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KOMM_ID	IN	KOMM_DETAIL.KOMM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	KOMM_ID = p_KOMM_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMM_DETAIL_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	KOMM_DETAIL.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_KOMM_DETAIL_ByFK_DLN_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLN_ID	IN	KOMM_DETAIL.DLN_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	DLN_ID = p_DLN_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMM_DETAIL_ByFK_KUN_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KUN_ID	IN	KOMM_DETAIL.KUN_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	KUN_ID = p_KUN_ID;
END;

create or replace PROCEDURE tdb_READALL_KOMM_DETAIL_ByFK_KOL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KOL_ID	IN	KOMM_DETAIL.KOL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KOMM_ID,
			BID,
			DLN_ID,
			KUN_ID,
			KOL_ID,
			PRIO
	from	KOMM_DETAIL
	where	KOL_ID = p_KOL_ID;
END;

--[End of Stored Procedure for table: KOMM_DETAIL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KONTINGENT]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KONTINGENT
(
	p_KONT_ID	IN	KONTINGENT.KONT_ID%TYPE,
	p_BEZ_ID	IN	KONTINGENT.BEZ_ID%TYPE,
	p_HOSTKONT_ID	IN	KONTINGENT.HOSTKONT_ID%TYPE,
	p_KUNDEN_ID	IN	KONTINGENT.KUNDEN_ID%TYPE,
	p_OPT_DAT	IN	KONTINGENT.OPT_DAT%TYPE,
	p_REF	IN	KONTINGENT.REF%TYPE,
	p_SAI_ID	IN	KONTINGENT.SAI_ID%TYPE,
	p_TEXTID	IN	KONTINGENT.TEXTID%TYPE
)
AS
BEGIN
	insert into KONTINGENT
	(
		KONT_ID,
		BEZ_ID,
		HOSTKONT_ID,
		KUNDEN_ID,
		OPT_DAT,
		REF,
		SAI_ID,
		TEXTID
	)
	values
	(
		p_KONT_ID,
		p_BEZ_ID,
		p_HOSTKONT_ID,
		p_KUNDEN_ID,
		p_OPT_DAT,
		p_REF,
		p_SAI_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KONTINGENT
(
	p_KONT_ID	IN	KONTINGENT.KONT_ID%TYPE,
	p_BEZ_ID	IN	KONTINGENT.BEZ_ID%TYPE,
	p_HOSTKONT_ID	IN	KONTINGENT.HOSTKONT_ID%TYPE,
	p_KUNDEN_ID	IN	KONTINGENT.KUNDEN_ID%TYPE,
	p_OPT_DAT	IN	KONTINGENT.OPT_DAT%TYPE,
	p_REF	IN	KONTINGENT.REF%TYPE,
	p_SAI_ID	IN	KONTINGENT.SAI_ID%TYPE,
	p_TEXTID	IN	KONTINGENT.TEXTID%TYPE
)
AS
BEGIN
	update	KONTINGENT
		set	BEZ_ID = p_BEZ_ID,
			HOSTKONT_ID = p_HOSTKONT_ID,
			KUNDEN_ID = p_KUNDEN_ID,
			OPT_DAT = p_OPT_DAT,
			REF = p_REF,
			SAI_ID = p_SAI_ID,
			TEXTID = p_TEXTID
	where	KONT_ID = p_KONT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KONTINGENT
(
	p_cur	OUT	Types.cursor_type,
	p_KONT_ID	IN	KONTINGENT.KONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KONTINGENT
	where	KONT_ID = p_KONT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KONTINGENT
(
	p_KONT_ID	IN	KONTINGENT.KONT_ID%TYPE
)
AS
BEGIN
	delete from KONTINGENT
	where  KONT_ID = p_KONT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KONTINGENT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KONTINGENT;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KONTINGENT_ByFK_HOSTKONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_HOSTKONT_ID	IN	KONTINGENT.HOSTKONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KONTINGENT
	where	HOSTKONT_ID = p_HOSTKONT_ID;
END;

create or replace PROCEDURE tdb_READALL_KONTINGENT_ByFK_KUNDEN_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KUNDEN_ID	IN	KONTINGENT.KUNDEN_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KONTINGENT
	where	KUNDEN_ID = p_KUNDEN_ID;
END;

create or replace PROCEDURE tdb_READALL_KONTINGENT_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	KONTINGENT.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KONTINGENT
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: KONTINGENT]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KONT_DETAIL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KONT_DETAIL
(
	p_HOSTKONT_ID	IN	KONT_DETAIL.HOSTKONT_ID%TYPE,
	p_KONT_ID	IN	KONT_DETAIL.KONT_ID%TYPE,
	p_KAT_ID	IN	KONT_DETAIL.KAT_ID%TYPE,
	p_DLT_ID	IN	KONT_DETAIL.DLT_ID%TYPE,
	p_STA_ID	IN	KONT_DETAIL.STA_ID%TYPE,
	p_ANZ	IN	KONT_DETAIL.ANZ%TYPE,
	p_BUSY	IN	KONT_DETAIL.BUSY%TYPE,
	p_MINANZ	IN	KONT_DETAIL.MINANZ%TYPE,
	p_VON_DAT	IN	KONT_DETAIL.VON_DAT%TYPE,
	p_BIS_DAT	IN	KONT_DETAIL.BIS_DAT%TYPE
)
AS
BEGIN
	insert into KONT_DETAIL
	(
		HOSTKONT_ID,
		KONT_ID,
		KAT_ID,
		DLT_ID,
		STA_ID,
		ANZ,
		BUSY,
		MINANZ,
		VON_DAT,
		BIS_DAT
	)
	values
	(
		p_HOSTKONT_ID,
		p_KONT_ID,
		p_KAT_ID,
		p_DLT_ID,
		p_STA_ID,
		p_ANZ,
		p_BUSY,
		p_MINANZ,
		p_VON_DAT,
		p_BIS_DAT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KONT_DETAIL
(
	p_HOSTKONT_ID	IN	KONT_DETAIL.HOSTKONT_ID%TYPE,
	p_KONT_ID	IN	KONT_DETAIL.KONT_ID%TYPE,
	p_KAT_ID	IN	KONT_DETAIL.KAT_ID%TYPE,
	p_DLT_ID	IN	KONT_DETAIL.DLT_ID%TYPE,
	p_STA_ID	IN	KONT_DETAIL.STA_ID%TYPE,
	p_ANZ	IN	KONT_DETAIL.ANZ%TYPE,
	p_BUSY	IN	KONT_DETAIL.BUSY%TYPE,
	p_MINANZ	IN	KONT_DETAIL.MINANZ%TYPE,
	p_VON_DAT	IN	KONT_DETAIL.VON_DAT%TYPE,
	p_BIS_DAT	IN	KONT_DETAIL.BIS_DAT%TYPE
)
AS
BEGIN
	update	KONT_DETAIL
		set	STA_ID = p_STA_ID,
			ANZ = p_ANZ,
			BUSY = p_BUSY,
			MINANZ = p_MINANZ
	where	HOSTKONT_ID = p_HOSTKONT_ID AND KONT_ID = p_KONT_ID AND KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KONT_DETAIL
(
	p_cur	OUT	Types.cursor_type,
	p_HOSTKONT_ID	IN	KONT_DETAIL.HOSTKONT_ID%TYPE,
	p_KONT_ID	IN	KONT_DETAIL.KONT_ID%TYPE,
	p_KAT_ID	IN	KONT_DETAIL.KAT_ID%TYPE,
	p_DLT_ID	IN	KONT_DETAIL.DLT_ID%TYPE,
	p_VON_DAT	IN	KONT_DETAIL.VON_DAT%TYPE,
	p_BIS_DAT	IN	KONT_DETAIL.BIS_DAT%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL
	where	HOSTKONT_ID = p_HOSTKONT_ID AND KONT_ID = p_KONT_ID AND KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KONT_DETAIL
(
	p_HOSTKONT_ID	IN	KONT_DETAIL.HOSTKONT_ID%TYPE,
	p_KONT_ID	IN	KONT_DETAIL.KONT_ID%TYPE,
	p_KAT_ID	IN	KONT_DETAIL.KAT_ID%TYPE,
	p_DLT_ID	IN	KONT_DETAIL.DLT_ID%TYPE,
	p_VON_DAT	IN	KONT_DETAIL.VON_DAT%TYPE,
	p_BIS_DAT	IN	KONT_DETAIL.BIS_DAT%TYPE
)
AS
BEGIN
	delete from KONT_DETAIL
	where  HOSTKONT_ID = p_HOSTKONT_ID AND KONT_ID = p_KONT_ID AND KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KONT_DETAIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KONT_DETAIL_ByFK_HOSTKONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_HOSTKONT_ID	IN	KONT_DETAIL.HOSTKONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL
	where	HOSTKONT_ID = p_HOSTKONT_ID;
END;

create or replace PROCEDURE tdb_READALL_KONT_DETAIL_ByFK_KONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KONT_ID	IN	KONT_DETAIL.KONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL
	where	KONT_ID = p_KONT_ID;
END;

create or replace PROCEDURE tdb_READALL_KONT_DETAIL_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	KONT_DETAIL.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_KONT_DETAIL_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	KONT_DETAIL.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			STA_ID,
			ANZ,
			BUSY,
			MINANZ,
			VON_DAT,
			BIS_DAT
	from	KONT_DETAIL
	where	DLT_ID = p_DLT_ID;
END;

--[End of Stored Procedure for table: KONT_DETAIL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KOSTEN_ART]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KOSTEN_ART
(
	p_KAR_ID	IN	KOSTEN_ART.KAR_ID%TYPE,
	p_BEZ_ID	IN	KOSTEN_ART.BEZ_ID%TYPE,
	p_TEXTID	IN	KOSTEN_ART.TEXTID%TYPE
)
AS
BEGIN
	insert into KOSTEN_ART
	(
		KAR_ID,
		BEZ_ID,
		TEXTID
	)
	values
	(
		p_KAR_ID,
		p_BEZ_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KOSTEN_ART
(
	p_KAR_ID	IN	KOSTEN_ART.KAR_ID%TYPE,
	p_BEZ_ID	IN	KOSTEN_ART.BEZ_ID%TYPE,
	p_TEXTID	IN	KOSTEN_ART.TEXTID%TYPE
)
AS
BEGIN
	update	KOSTEN_ART
		set	BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID
	where	KAR_ID = p_KAR_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KOSTEN_ART
(
	p_cur	OUT	Types.cursor_type,
	p_KAR_ID	IN	KOSTEN_ART.KAR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAR_ID,
			BEZ_ID,
			TEXTID
	from	KOSTEN_ART
	where	KAR_ID = p_KAR_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KOSTEN_ART
(
	p_KAR_ID	IN	KOSTEN_ART.KAR_ID%TYPE
)
AS
BEGIN
	delete from KOSTEN_ART
	where  KAR_ID = p_KAR_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KOSTEN_ART
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAR_ID,
			BEZ_ID,
			TEXTID
	from	KOSTEN_ART;
END;

--[End of Stored Procedure for table: KOSTEN_ART]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KUNDEN]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KUNDEN
(
	p_FAX	IN	KUNDEN.FAX%TYPE,
	p_TLX	IN	KUNDEN.TLX%TYPE,
	p_EMAIL	IN	KUNDEN.EMAIL%TYPE,
	p_WEB	IN	KUNDEN.WEB%TYPE,
	p_KONTO	IN	KUNDEN.KONTO%TYPE,
	p_LEITER	IN	KUNDEN.LEITER%TYPE,
	p_ATTR1	IN	KUNDEN.ATTR1%TYPE,
	p_ATTR2	IN	KUNDEN.ATTR2%TYPE,
	p_K_TYP_ID	IN	KUNDEN.K_TYP_ID%TYPE,
	p_WHR_ID	IN	KUNDEN.WHR_ID%TYPE,
	p_PERS_ID	IN	KUNDEN.PERS_ID%TYPE,
	p_TEL	IN	KUNDEN.TEL%TYPE,
	p_HANDY	IN	KUNDEN.HANDY%TYPE
)
AS
BEGIN
	insert into KUNDEN
	(
		FAX,
		TLX,
		EMAIL,
		WEB,
		KONTO,
		LEITER,
		ATTR1,
		ATTR2,
		K_TYP_ID,
		WHR_ID,
		PERS_ID,
		TEL,
		HANDY
	)
	values
	(
		p_FAX,
		p_TLX,
		p_EMAIL,
		p_WEB,
		p_KONTO,
		p_LEITER,
		p_ATTR1,
		p_ATTR2,
		p_K_TYP_ID,
		p_WHR_ID,
		p_PERS_ID,
		p_TEL,
		p_HANDY
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KUNDEN
(
	p_FAX	IN	KUNDEN.FAX%TYPE,
	p_TLX	IN	KUNDEN.TLX%TYPE,
	p_EMAIL	IN	KUNDEN.EMAIL%TYPE,
	p_WEB	IN	KUNDEN.WEB%TYPE,
	p_KONTO	IN	KUNDEN.KONTO%TYPE,
	p_LEITER	IN	KUNDEN.LEITER%TYPE,
	p_ATTR1	IN	KUNDEN.ATTR1%TYPE,
	p_ATTR2	IN	KUNDEN.ATTR2%TYPE,
	p_K_TYP_ID	IN	KUNDEN.K_TYP_ID%TYPE,
	p_WHR_ID	IN	KUNDEN.WHR_ID%TYPE,
	p_PERS_ID	IN	KUNDEN.PERS_ID%TYPE,
	p_TEL	IN	KUNDEN.TEL%TYPE,
	p_HANDY	IN	KUNDEN.HANDY%TYPE
)
AS
BEGIN
	update	KUNDEN
		set	FAX = p_FAX,
			TLX = p_TLX,
			EMAIL = p_EMAIL,
			WEB = p_WEB,
			KONTO = p_KONTO,
			LEITER = p_LEITER,
			ATTR1 = p_ATTR1,
			ATTR2 = p_ATTR2,
			K_TYP_ID = p_K_TYP_ID,
			WHR_ID = p_WHR_ID,
			TEL = p_TEL,
			HANDY = p_HANDY
	where	PERS_ID = p_PERS_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KUNDEN
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	KUNDEN.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN
	where	PERS_ID = p_PERS_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KUNDEN
(
	p_PERS_ID	IN	KUNDEN.PERS_ID%TYPE
)
AS
BEGIN
	delete from KUNDEN
	where  PERS_ID = p_PERS_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KUNDEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_KUNDEN_ByFK_LEITER
(
	p_cur	OUT	Types.cursor_type,
	p_LEITER	IN	KUNDEN.LEITER%TYPE
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN
	where	LEITER = p_LEITER;
END;

create or replace PROCEDURE tdb_READALL_KUNDEN_ByFK_K_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_TYP_ID	IN	KUNDEN.K_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN
	where	K_TYP_ID = p_K_TYP_ID;
END;

create or replace PROCEDURE tdb_READALL_KUNDEN_ByFK_WHR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	KUNDEN.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN
	where	WHR_ID = p_WHR_ID;
END;

create or replace PROCEDURE tdb_READALL_KUNDEN_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	KUNDEN.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			WHR_ID,
			PERS_ID,
			TEL,
			HANDY
	from	KUNDEN
	where	PERS_ID = p_PERS_ID;
END;

--[End of Stored Procedure for table: KUNDEN]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: KUNDEN_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_KUNDEN_TYP
(
	p_K_TYP_ID	IN	KUNDEN_TYP.K_TYP_ID%TYPE,
	p_KUNCODE	IN	KUNDEN_TYP.KUNCODE%TYPE,
	p_BEZ_ID	IN	KUNDEN_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	KUNDEN_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into KUNDEN_TYP
	(
		K_TYP_ID,
		KUNCODE,
		BEZ_ID,
		TEXTID
	)
	values
	(
		p_K_TYP_ID,
		p_KUNCODE,
		p_BEZ_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_KUNDEN_TYP
(
	p_K_TYP_ID	IN	KUNDEN_TYP.K_TYP_ID%TYPE,
	p_KUNCODE	IN	KUNDEN_TYP.KUNCODE%TYPE,
	p_BEZ_ID	IN	KUNDEN_TYP.BEZ_ID%TYPE,
	p_TEXTID	IN	KUNDEN_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	KUNDEN_TYP
		set	KUNCODE = p_KUNCODE,
			BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID
	where	K_TYP_ID = p_K_TYP_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_KUNDEN_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_K_TYP_ID	IN	KUNDEN_TYP.K_TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	K_TYP_ID,
			KUNCODE,
			BEZ_ID,
			TEXTID
	from	KUNDEN_TYP
	where	K_TYP_ID = p_K_TYP_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_KUNDEN_TYP
(
	p_K_TYP_ID	IN	KUNDEN_TYP.K_TYP_ID%TYPE
)
AS
BEGIN
	delete from KUNDEN_TYP
	where  K_TYP_ID = p_K_TYP_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_KUNDEN_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	K_TYP_ID,
			KUNCODE,
			BEZ_ID,
			TEXTID
	from	KUNDEN_TYP;
END;

--[End of Stored Procedure for table: KUNDEN_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: LABEL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_LABEL
(
	p_LABEL_PRG	IN	LABEL.LABEL_PRG%TYPE,
	p_LABEL_TYP	IN	LABEL.LABEL_TYP%TYPE,
	p_STUFE1	IN	LABEL.STUFE1%TYPE,
	p_STUFE2	IN	LABEL.STUFE2%TYPE,
	p_S_ID	IN	LABEL.S_ID%TYPE,
	p_LABEL	IN	LABEL.LABEL%TYPE
)
AS
BEGIN
	insert into LABEL
	(
		LABEL_PRG,
		LABEL_TYP,
		STUFE1,
		STUFE2,
		S_ID,
		LABEL
	)
	values
	(
		p_LABEL_PRG,
		p_LABEL_TYP,
		p_STUFE1,
		p_STUFE2,
		p_S_ID,
		p_LABEL
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_LABEL
(
	p_LABEL_PRG	IN	LABEL.LABEL_PRG%TYPE,
	p_LABEL_TYP	IN	LABEL.LABEL_TYP%TYPE,
	p_STUFE1	IN	LABEL.STUFE1%TYPE,
	p_STUFE2	IN	LABEL.STUFE2%TYPE,
	p_S_ID	IN	LABEL.S_ID%TYPE,
	p_LABEL	IN	LABEL.LABEL%TYPE
)
AS
BEGIN
	update	LABEL
		set	LABEL = p_LABEL
	where	LABEL_PRG = p_LABEL_PRG AND LABEL_TYP = p_LABEL_TYP AND STUFE1 = p_STUFE1 AND STUFE2 = p_STUFE2 AND S_ID = p_S_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_LABEL
(
	p_cur	OUT	Types.cursor_type,
	p_LABEL_PRG	IN	LABEL.LABEL_PRG%TYPE,
	p_LABEL_TYP	IN	LABEL.LABEL_TYP%TYPE,
	p_STUFE1	IN	LABEL.STUFE1%TYPE,
	p_STUFE2	IN	LABEL.STUFE2%TYPE,
	p_S_ID	IN	LABEL.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LABEL_PRG,
			LABEL_TYP,
			STUFE1,
			STUFE2,
			S_ID,
			LABEL
	from	LABEL
	where	LABEL_PRG = p_LABEL_PRG AND LABEL_TYP = p_LABEL_TYP AND STUFE1 = p_STUFE1 AND STUFE2 = p_STUFE2 AND S_ID = p_S_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_LABEL
(
	p_LABEL_PRG	IN	LABEL.LABEL_PRG%TYPE,
	p_LABEL_TYP	IN	LABEL.LABEL_TYP%TYPE,
	p_STUFE1	IN	LABEL.STUFE1%TYPE,
	p_STUFE2	IN	LABEL.STUFE2%TYPE,
	p_S_ID	IN	LABEL.S_ID%TYPE
)
AS
BEGIN
	delete from LABEL
	where  LABEL_PRG = p_LABEL_PRG AND LABEL_TYP = p_LABEL_TYP AND STUFE1 = p_STUFE1 AND STUFE2 = p_STUFE2 AND S_ID = p_S_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_LABEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LABEL_PRG,
			LABEL_TYP,
			STUFE1,
			STUFE2,
			S_ID,
			LABEL
	from	LABEL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_LABEL_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	LABEL.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LABEL_PRG,
			LABEL_TYP,
			STUFE1,
			STUFE2,
			S_ID,
			LABEL
	from	LABEL
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: LABEL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: LAND]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_LAND
(
	p_LAND_ID	IN	LAND.LAND_ID%TYPE,
	p_BEZ_ID	IN	LAND.BEZ_ID%TYPE,
	p_TEXTID	IN	LAND.TEXTID%TYPE,
	p_KRZL	IN	LAND.KRZL%TYPE,
	p_HAUPT_ORT	IN	LAND.HAUPT_ORT%TYPE,
	p_HAUPT_WHR	IN	LAND.HAUPT_WHR%TYPE,
	p_HAUPT_SPR	IN	LAND.HAUPT_SPR%TYPE,
	p_VAT	IN	LAND.VAT%TYPE,
	p_DATEFORMAT	IN	LAND.DATEFORMAT%TYPE
)
AS
BEGIN
	insert into LAND
	(
		LAND_ID,
		BEZ_ID,
		TEXTID,
		KRZL,
		HAUPT_ORT,
		HAUPT_WHR,
		HAUPT_SPR,
		VAT,
		DATEFORMAT
	)
	values
	(
		p_LAND_ID,
		p_BEZ_ID,
		p_TEXTID,
		p_KRZL,
		p_HAUPT_ORT,
		p_HAUPT_WHR,
		p_HAUPT_SPR,
		p_VAT,
		p_DATEFORMAT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_LAND
(
	p_LAND_ID	IN	LAND.LAND_ID%TYPE,
	p_BEZ_ID	IN	LAND.BEZ_ID%TYPE,
	p_TEXTID	IN	LAND.TEXTID%TYPE,
	p_KRZL	IN	LAND.KRZL%TYPE,
	p_HAUPT_ORT	IN	LAND.HAUPT_ORT%TYPE,
	p_HAUPT_WHR	IN	LAND.HAUPT_WHR%TYPE,
	p_HAUPT_SPR	IN	LAND.HAUPT_SPR%TYPE,
	p_VAT	IN	LAND.VAT%TYPE,
	p_DATEFORMAT	IN	LAND.DATEFORMAT%TYPE
)
AS
BEGIN
	update	LAND
		set	BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID,
			KRZL = p_KRZL,
			HAUPT_ORT = p_HAUPT_ORT,
			HAUPT_WHR = p_HAUPT_WHR,
			HAUPT_SPR = p_HAUPT_SPR,
			VAT = p_VAT,
			DATEFORMAT = p_DATEFORMAT
	where	LAND_ID = p_LAND_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_LAND
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	LAND.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			TEXTID,
			KRZL,
			HAUPT_ORT,
			HAUPT_WHR,
			HAUPT_SPR,
			VAT,
			DATEFORMAT
	from	LAND
	where	LAND_ID = p_LAND_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_LAND
(
	p_LAND_ID	IN	LAND.LAND_ID%TYPE
)
AS
BEGIN
	delete from LAND
	where  LAND_ID = p_LAND_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_LAND
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			TEXTID,
			KRZL,
			HAUPT_ORT,
			HAUPT_WHR,
			HAUPT_SPR,
			VAT,
			DATEFORMAT
	from	LAND;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_LAND_ByFK_HAUPT_WHR
(
	p_cur	OUT	Types.cursor_type,
	p_HAUPT_WHR	IN	LAND.HAUPT_WHR%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			TEXTID,
			KRZL,
			HAUPT_ORT,
			HAUPT_WHR,
			HAUPT_SPR,
			VAT,
			DATEFORMAT
	from	LAND
	where	HAUPT_WHR = p_HAUPT_WHR;
END;

create or replace PROCEDURE tdb_READALL_LAND_ByFK_HAUPT_SPR
(
	p_cur	OUT	Types.cursor_type,
	p_HAUPT_SPR	IN	LAND.HAUPT_SPR%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			TEXTID,
			KRZL,
			HAUPT_ORT,
			HAUPT_WHR,
			HAUPT_SPR,
			VAT,
			DATEFORMAT
	from	LAND
	where	HAUPT_SPR = p_HAUPT_SPR;
END;

--[End of Stored Procedure for table: LAND]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: LAND_SPR]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_LAND_SPR
(
	p_LAND_ID	IN	LAND_SPR.LAND_ID%TYPE,
	p_S_ID	IN	LAND_SPR.S_ID%TYPE
)
AS
BEGIN
	insert into LAND_SPR
	(
		LAND_ID,
		S_ID
	)
	values
	(
		p_LAND_ID,
		p_S_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_LAND_SPR
(
	p_LAND_ID	IN	LAND_SPR.LAND_ID%TYPE,
	p_S_ID	IN	LAND_SPR.S_ID%TYPE
)
AS
BEGIN
	update	LAND_SPR
		set	where	LAND_ID = p_LAND_ID AND S_ID = p_S_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_LAND_SPR
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	LAND_SPR.LAND_ID%TYPE,
	p_S_ID	IN	LAND_SPR.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			S_ID
	from	LAND_SPR
	where	LAND_ID = p_LAND_ID AND S_ID = p_S_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_LAND_SPR
(
	p_LAND_ID	IN	LAND_SPR.LAND_ID%TYPE,
	p_S_ID	IN	LAND_SPR.S_ID%TYPE
)
AS
BEGIN
	delete from LAND_SPR
	where  LAND_ID = p_LAND_ID AND S_ID = p_S_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_LAND_SPR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			S_ID
	from	LAND_SPR;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_LAND_SPR_ByFK_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	LAND_SPR.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			S_ID
	from	LAND_SPR
	where	LAND_ID = p_LAND_ID;
END;

create or replace PROCEDURE tdb_READALL_LAND_SPR_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	LAND_SPR.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			S_ID
	from	LAND_SPR
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: LAND_SPR]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: LAND_WHR]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_LAND_WHR
(
	p_LAND_ID	IN	LAND_WHR.LAND_ID%TYPE,
	p_WHR_ID	IN	LAND_WHR.WHR_ID%TYPE,
	p_KURS_TYP	IN	LAND_WHR.KURS_TYP%TYPE,
	p_A_KURS	IN	LAND_WHR.A_KURS%TYPE,
	p_V_KURS	IN	LAND_WHR.V_KURS%TYPE,
	p_VON_DAT	IN	LAND_WHR.VON_DAT%TYPE
)
AS
BEGIN
	insert into LAND_WHR
	(
		LAND_ID,
		WHR_ID,
		KURS_TYP,
		A_KURS,
		V_KURS,
		VON_DAT
	)
	values
	(
		p_LAND_ID,
		p_WHR_ID,
		p_KURS_TYP,
		p_A_KURS,
		p_V_KURS,
		p_VON_DAT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_LAND_WHR
(
	p_LAND_ID	IN	LAND_WHR.LAND_ID%TYPE,
	p_WHR_ID	IN	LAND_WHR.WHR_ID%TYPE,
	p_KURS_TYP	IN	LAND_WHR.KURS_TYP%TYPE,
	p_A_KURS	IN	LAND_WHR.A_KURS%TYPE,
	p_V_KURS	IN	LAND_WHR.V_KURS%TYPE,
	p_VON_DAT	IN	LAND_WHR.VON_DAT%TYPE
)
AS
BEGIN
	update	LAND_WHR
		set	A_KURS = p_A_KURS,
			V_KURS = p_V_KURS,
			VON_DAT = p_VON_DAT
	where	LAND_ID = p_LAND_ID AND WHR_ID = p_WHR_ID AND KURS_TYP = p_KURS_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_LAND_WHR
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	LAND_WHR.LAND_ID%TYPE,
	p_WHR_ID	IN	LAND_WHR.WHR_ID%TYPE,
	p_KURS_TYP	IN	LAND_WHR.KURS_TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			WHR_ID,
			KURS_TYP,
			A_KURS,
			V_KURS,
			VON_DAT
	from	LAND_WHR
	where	LAND_ID = p_LAND_ID AND WHR_ID = p_WHR_ID AND KURS_TYP = p_KURS_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_LAND_WHR
(
	p_LAND_ID	IN	LAND_WHR.LAND_ID%TYPE,
	p_WHR_ID	IN	LAND_WHR.WHR_ID%TYPE,
	p_KURS_TYP	IN	LAND_WHR.KURS_TYP%TYPE
)
AS
BEGIN
	delete from LAND_WHR
	where  LAND_ID = p_LAND_ID AND WHR_ID = p_WHR_ID AND KURS_TYP = p_KURS_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_LAND_WHR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			WHR_ID,
			KURS_TYP,
			A_KURS,
			V_KURS,
			VON_DAT
	from	LAND_WHR;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_LAND_WHR_ByFK_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	LAND_WHR.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			WHR_ID,
			KURS_TYP,
			A_KURS,
			V_KURS,
			VON_DAT
	from	LAND_WHR
	where	LAND_ID = p_LAND_ID;
END;

create or replace PROCEDURE tdb_READALL_LAND_WHR_ByFK_WHR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	LAND_WHR.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			WHR_ID,
			KURS_TYP,
			A_KURS,
			V_KURS,
			VON_DAT
	from	LAND_WHR
	where	WHR_ID = p_WHR_ID;
END;

--[End of Stored Procedure for table: LAND_WHR]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MAXIMA]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MAXIMA
(
	p_TABELLE	IN	MAXIMA.TABELLE%TYPE,
	p_TYP	IN	MAXIMA.TYP%TYPE,
	p_MAX_ID	IN	MAXIMA.MAX_ID%TYPE,
	p_MIN_ID	IN	MAXIMA.MIN_ID%TYPE,
	p_INCR	IN	MAXIMA.INCR%TYPE
)
AS
BEGIN
	insert into MAXIMA
	(
		TABELLE,
		TYP,
		MAX_ID,
		MIN_ID,
		INCR
	)
	values
	(
		p_TABELLE,
		p_TYP,
		p_MAX_ID,
		p_MIN_ID,
		p_INCR
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MAXIMA
(
	p_TABELLE	IN	MAXIMA.TABELLE%TYPE,
	p_TYP	IN	MAXIMA.TYP%TYPE,
	p_MAX_ID	IN	MAXIMA.MAX_ID%TYPE,
	p_MIN_ID	IN	MAXIMA.MIN_ID%TYPE,
	p_INCR	IN	MAXIMA.INCR%TYPE
)
AS
BEGIN
	update	MAXIMA
		set	MAX_ID = p_MAX_ID,
			MIN_ID = p_MIN_ID,
			INCR = p_INCR
	where	TABELLE = p_TABELLE AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MAXIMA
(
	p_cur	OUT	Types.cursor_type,
	p_TABELLE	IN	MAXIMA.TABELLE%TYPE,
	p_TYP	IN	MAXIMA.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	TABELLE,
			TYP,
			MAX_ID,
			MIN_ID,
			INCR
	from	MAXIMA
	where	TABELLE = p_TABELLE AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MAXIMA
(
	p_TABELLE	IN	MAXIMA.TABELLE%TYPE,
	p_TYP	IN	MAXIMA.TYP%TYPE
)
AS
BEGIN
	delete from MAXIMA
	where  TABELLE = p_TABELLE AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MAXIMA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TABELLE,
			TYP,
			MAX_ID,
			MIN_ID,
			INCR
	from	MAXIMA;
END;

--[End of Stored Procedure for table: MAXIMA]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MICROSOFTDTPROPERTIES]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MICROSOFTDTPROPERTIES
(
	p_ID	IN	MICROSOFTDTPROPERTIES.ID%TYPE,
	p_OBJECTID	IN	MICROSOFTDTPROPERTIES.OBJECTID%TYPE,
	p_PROPERTY	IN	MICROSOFTDTPROPERTIES.PROPERTY%TYPE,
	p_VALUE	IN	MICROSOFTDTPROPERTIES.VALUE%TYPE,
	p_LVALUE	IN	MICROSOFTDTPROPERTIES.LVALUE%TYPE,
	p_VERSION	IN	MICROSOFTDTPROPERTIES.VERSION%TYPE
)
AS
BEGIN
	insert into MICROSOFTDTPROPERTIES
	(
		ID,
		OBJECTID,
		PROPERTY,
		VALUE,
		LVALUE,
		VERSION
	)
	values
	(
		p_ID,
		p_OBJECTID,
		p_PROPERTY,
		p_VALUE,
		p_LVALUE,
		p_VERSION
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MICROSOFTDTPROPERTIES
(
	p_ID	IN	MICROSOFTDTPROPERTIES.ID%TYPE,
	p_OBJECTID	IN	MICROSOFTDTPROPERTIES.OBJECTID%TYPE,
	p_PROPERTY	IN	MICROSOFTDTPROPERTIES.PROPERTY%TYPE,
	p_VALUE	IN	MICROSOFTDTPROPERTIES.VALUE%TYPE,
	p_LVALUE	IN	MICROSOFTDTPROPERTIES.LVALUE%TYPE,
	p_VERSION	IN	MICROSOFTDTPROPERTIES.VERSION%TYPE
)
AS
BEGIN
	update	MICROSOFTDTPROPERTIES
		set	OBJECTID = p_OBJECTID,
			VALUE = p_VALUE,
			LVALUE = p_LVALUE,
			VERSION = p_VERSION
	where	ID = p_ID AND PROPERTY = p_PROPERTY;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MICROSOFTDTPROPERTIES
(
	p_cur	OUT	Types.cursor_type,
	p_ID	IN	MICROSOFTDTPROPERTIES.ID%TYPE,
	p_PROPERTY	IN	MICROSOFTDTPROPERTIES.PROPERTY%TYPE
)
AS
BEGIN
	open p_cur for
	select	ID,
			OBJECTID,
			PROPERTY,
			VALUE,
			LVALUE,
			VERSION
	from	MICROSOFTDTPROPERTIES
	where	ID = p_ID AND PROPERTY = p_PROPERTY;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MICROSOFTDTPROPERTIES
(
	p_ID	IN	MICROSOFTDTPROPERTIES.ID%TYPE,
	p_PROPERTY	IN	MICROSOFTDTPROPERTIES.PROPERTY%TYPE
)
AS
BEGIN
	delete from MICROSOFTDTPROPERTIES
	where  ID = p_ID AND PROPERTY = p_PROPERTY;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MICROSOFTDTPROPERTIES
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ID,
			OBJECTID,
			PROPERTY,
			VALUE,
			LVALUE,
			VERSION
	from	MICROSOFTDTPROPERTIES;
END;

--[End of Stored Procedure for table: MICROSOFTDTPROPERTIES]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_ARRKOM]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_ARRKOM
(
	p_ARR_ID	IN	MP_ARRKOM.ARR_ID%TYPE,
	p_KOMM_ID	IN	MP_ARRKOM.KOMM_ID%TYPE,
	p_KOMM_BEZID	IN	MP_ARRKOM.KOMM_BEZID%TYPE
)
AS
BEGIN
	insert into MP_ARRKOM
	(
		ARR_ID,
		KOMM_ID,
		KOMM_BEZID
	)
	values
	(
		p_ARR_ID,
		p_KOMM_ID,
		p_KOMM_BEZID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_ARRKOM
(
	p_ARR_ID	IN	MP_ARRKOM.ARR_ID%TYPE,
	p_KOMM_ID	IN	MP_ARRKOM.KOMM_ID%TYPE,
	p_KOMM_BEZID	IN	MP_ARRKOM.KOMM_BEZID%TYPE
)
AS
BEGIN
	update	MP_ARRKOM
		set	KOMM_BEZID = p_KOMM_BEZID
	where	ARR_ID = p_ARR_ID AND KOMM_ID = p_KOMM_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_ARRKOM
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	MP_ARRKOM.ARR_ID%TYPE,
	p_KOMM_ID	IN	MP_ARRKOM.KOMM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			KOMM_ID,
			KOMM_BEZID
	from	MP_ARRKOM
	where	ARR_ID = p_ARR_ID AND KOMM_ID = p_KOMM_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_ARRKOM
(
	p_ARR_ID	IN	MP_ARRKOM.ARR_ID%TYPE,
	p_KOMM_ID	IN	MP_ARRKOM.KOMM_ID%TYPE
)
AS
BEGIN
	delete from MP_ARRKOM
	where  ARR_ID = p_ARR_ID AND KOMM_ID = p_KOMM_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_ARRKOM
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			KOMM_ID,
			KOMM_BEZID
	from	MP_ARRKOM;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_ARRKOM_ByFK_ARR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	MP_ARRKOM.ARR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			KOMM_ID,
			KOMM_BEZID
	from	MP_ARRKOM
	where	ARR_ID = p_ARR_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_ARRKOM_ByFK_KOMM_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KOMM_ID	IN	MP_ARRKOM.KOMM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			KOMM_ID,
			KOMM_BEZID
	from	MP_ARRKOM
	where	KOMM_ID = p_KOMM_ID;
END;

--[End of Stored Procedure for table: MP_ARRKOM]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_BCH_DLG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_BCH_DLG
(
	p_BID	IN	MP_BCH_DLG.BID%TYPE,
	p_DLG_ID	IN	MP_BCH_DLG.DLG_ID%TYPE,
	p_TEIL	IN	MP_BCH_DLG.TEIL%TYPE
)
AS
BEGIN
	insert into MP_BCH_DLG
	(
		BID,
		DLG_ID,
		TEIL
	)
	values
	(
		p_BID,
		p_DLG_ID,
		p_TEIL
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_BCH_DLG
(
	p_BID	IN	MP_BCH_DLG.BID%TYPE,
	p_DLG_ID	IN	MP_BCH_DLG.DLG_ID%TYPE,
	p_TEIL	IN	MP_BCH_DLG.TEIL%TYPE
)
AS
BEGIN
	update	MP_BCH_DLG
		set	DLG_ID = p_DLG_ID
	where	BID = p_BID AND TEIL = p_TEIL;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_BCH_DLG
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_BCH_DLG.BID%TYPE,
	p_TEIL	IN	MP_BCH_DLG.TEIL%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLG_ID,
			TEIL
	from	MP_BCH_DLG
	where	BID = p_BID AND TEIL = p_TEIL;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_BCH_DLG
(
	p_BID	IN	MP_BCH_DLG.BID%TYPE,
	p_TEIL	IN	MP_BCH_DLG.TEIL%TYPE
)
AS
BEGIN
	delete from MP_BCH_DLG
	where  BID = p_BID AND TEIL = p_TEIL;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_BCH_DLG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLG_ID,
			TEIL
	from	MP_BCH_DLG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_BCH_DLG_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_BCH_DLG.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLG_ID,
			TEIL
	from	MP_BCH_DLG
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_MP_BCH_DLG_ByFK_DLG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	MP_BCH_DLG.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	BID,
			DLG_ID,
			TEIL
	from	MP_BCH_DLG
	where	DLG_ID = p_DLG_ID;
END;

--[End of Stored Procedure for table: MP_BCH_DLG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_DEBITOR]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_DEBITOR
(
	p_OPT_TEXT	IN	MP_DEBITOR.OPT_TEXT%TYPE,
	p_DEB_ID	IN	MP_DEBITOR.DEB_ID%TYPE,
	p_BID	IN	MP_DEBITOR.BID%TYPE,
	p_STA_ID	IN	MP_DEBITOR.STA_ID%TYPE,
	p_KID	IN	MP_DEBITOR.KID%TYPE,
	p_KONTO	IN	MP_DEBITOR.KONTO%TYPE,
	p_NACHSALDO	IN	MP_DEBITOR.NACHSALDO%TYPE,
	p_K_ID	IN	MP_DEBITOR.K_ID%TYPE,
	p_FAKT_ID	IN	MP_DEBITOR.FAKT_ID%TYPE,
	p_FAKT_ZEIT	IN	MP_DEBITOR.FAKT_ZEIT%TYPE,
	p_FAKT_NR	IN	MP_DEBITOR.FAKT_NR%TYPE,
	p_FAKT_TEXT	IN	MP_DEBITOR.FAKT_TEXT%TYPE,
	p_DLN_DETAIL	IN	MP_DEBITOR.DLN_DETAIL%TYPE,
	p_DLG_DETAIL	IN	MP_DEBITOR.DLG_DETAIL%TYPE,
	p_WHR_ID	IN	MP_DEBITOR.WHR_ID%TYPE,
	p_WHR_LAND_ID	IN	MP_DEBITOR.WHR_LAND_ID%TYPE,
	p_WHR_KURS	IN	MP_DEBITOR.WHR_KURS%TYPE,
	p_WHR_TEXT	IN	MP_DEBITOR.WHR_TEXT%TYPE,
	p_WHR_EXCL	IN	MP_DEBITOR.WHR_EXCL%TYPE,
	p_WHR_INKL	IN	MP_DEBITOR.WHR_INKL%TYPE,
	p_VAT_ID	IN	MP_DEBITOR.VAT_ID%TYPE,
	p_VAT_LAND_ID	IN	MP_DEBITOR.VAT_LAND_ID%TYPE,
	p_VAT	IN	MP_DEBITOR.VAT%TYPE,
	p_VAT_TEXT	IN	MP_DEBITOR.VAT_TEXT%TYPE,
	p_RST_EXCL	IN	MP_DEBITOR.RST_EXCL%TYPE,
	p_RST_INKL	IN	MP_DEBITOR.RST_INKL%TYPE,
	p_RST_GEWINN	IN	MP_DEBITOR.RST_GEWINN%TYPE
)
AS
BEGIN
	insert into MP_DEBITOR
	(
		OPT_TEXT,
		DEB_ID,
		BID,
		STA_ID,
		KID,
		KONTO,
		NACHSALDO,
		K_ID,
		FAKT_ID,
		FAKT_ZEIT,
		FAKT_NR,
		FAKT_TEXT,
		DLN_DETAIL,
		DLG_DETAIL,
		WHR_ID,
		WHR_LAND_ID,
		WHR_KURS,
		WHR_TEXT,
		WHR_EXCL,
		WHR_INKL,
		VAT_ID,
		VAT_LAND_ID,
		VAT,
		VAT_TEXT,
		RST_EXCL,
		RST_INKL,
		RST_GEWINN
	)
	values
	(
		p_OPT_TEXT,
		p_DEB_ID,
		p_BID,
		p_STA_ID,
		p_KID,
		p_KONTO,
		p_NACHSALDO,
		p_K_ID,
		p_FAKT_ID,
		p_FAKT_ZEIT,
		p_FAKT_NR,
		p_FAKT_TEXT,
		p_DLN_DETAIL,
		p_DLG_DETAIL,
		p_WHR_ID,
		p_WHR_LAND_ID,
		p_WHR_KURS,
		p_WHR_TEXT,
		p_WHR_EXCL,
		p_WHR_INKL,
		p_VAT_ID,
		p_VAT_LAND_ID,
		p_VAT,
		p_VAT_TEXT,
		p_RST_EXCL,
		p_RST_INKL,
		p_RST_GEWINN
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_DEBITOR
(
	p_OPT_TEXT	IN	MP_DEBITOR.OPT_TEXT%TYPE,
	p_DEB_ID	IN	MP_DEBITOR.DEB_ID%TYPE,
	p_BID	IN	MP_DEBITOR.BID%TYPE,
	p_STA_ID	IN	MP_DEBITOR.STA_ID%TYPE,
	p_KID	IN	MP_DEBITOR.KID%TYPE,
	p_KONTO	IN	MP_DEBITOR.KONTO%TYPE,
	p_NACHSALDO	IN	MP_DEBITOR.NACHSALDO%TYPE,
	p_K_ID	IN	MP_DEBITOR.K_ID%TYPE,
	p_FAKT_ID	IN	MP_DEBITOR.FAKT_ID%TYPE,
	p_FAKT_ZEIT	IN	MP_DEBITOR.FAKT_ZEIT%TYPE,
	p_FAKT_NR	IN	MP_DEBITOR.FAKT_NR%TYPE,
	p_FAKT_TEXT	IN	MP_DEBITOR.FAKT_TEXT%TYPE,
	p_DLN_DETAIL	IN	MP_DEBITOR.DLN_DETAIL%TYPE,
	p_DLG_DETAIL	IN	MP_DEBITOR.DLG_DETAIL%TYPE,
	p_WHR_ID	IN	MP_DEBITOR.WHR_ID%TYPE,
	p_WHR_LAND_ID	IN	MP_DEBITOR.WHR_LAND_ID%TYPE,
	p_WHR_KURS	IN	MP_DEBITOR.WHR_KURS%TYPE,
	p_WHR_TEXT	IN	MP_DEBITOR.WHR_TEXT%TYPE,
	p_WHR_EXCL	IN	MP_DEBITOR.WHR_EXCL%TYPE,
	p_WHR_INKL	IN	MP_DEBITOR.WHR_INKL%TYPE,
	p_VAT_ID	IN	MP_DEBITOR.VAT_ID%TYPE,
	p_VAT_LAND_ID	IN	MP_DEBITOR.VAT_LAND_ID%TYPE,
	p_VAT	IN	MP_DEBITOR.VAT%TYPE,
	p_VAT_TEXT	IN	MP_DEBITOR.VAT_TEXT%TYPE,
	p_RST_EXCL	IN	MP_DEBITOR.RST_EXCL%TYPE,
	p_RST_INKL	IN	MP_DEBITOR.RST_INKL%TYPE,
	p_RST_GEWINN	IN	MP_DEBITOR.RST_GEWINN%TYPE
)
AS
BEGIN
	update	MP_DEBITOR
		set	OPT_TEXT = p_OPT_TEXT,
			BID = p_BID,
			STA_ID = p_STA_ID,
			KID = p_KID,
			KONTO = p_KONTO,
			NACHSALDO = p_NACHSALDO,
			K_ID = p_K_ID,
			FAKT_ID = p_FAKT_ID,
			FAKT_ZEIT = p_FAKT_ZEIT,
			FAKT_NR = p_FAKT_NR,
			FAKT_TEXT = p_FAKT_TEXT,
			DLN_DETAIL = p_DLN_DETAIL,
			DLG_DETAIL = p_DLG_DETAIL,
			WHR_ID = p_WHR_ID,
			WHR_LAND_ID = p_WHR_LAND_ID,
			WHR_KURS = p_WHR_KURS,
			WHR_TEXT = p_WHR_TEXT,
			WHR_EXCL = p_WHR_EXCL,
			WHR_INKL = p_WHR_INKL,
			VAT_LAND_ID = p_VAT_LAND_ID,
			VAT = p_VAT,
			VAT_TEXT = p_VAT_TEXT,
			RST_EXCL = p_RST_EXCL,
			RST_INKL = p_RST_INKL,
			RST_GEWINN = p_RST_GEWINN
	where	DEB_ID = p_DEB_ID AND VAT_ID = p_VAT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_DEBITOR
(
	p_cur	OUT	Types.cursor_type,
	p_DEB_ID	IN	MP_DEBITOR.DEB_ID%TYPE,
	p_VAT_ID	IN	MP_DEBITOR.VAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	DEB_ID = p_DEB_ID AND VAT_ID = p_VAT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_DEBITOR
(
	p_DEB_ID	IN	MP_DEBITOR.DEB_ID%TYPE,
	p_VAT_ID	IN	MP_DEBITOR.VAT_ID%TYPE
)
AS
BEGIN
	delete from MP_DEBITOR
	where  DEB_ID = p_DEB_ID AND VAT_ID = p_VAT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_DEBITOR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_DEBITOR.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	MP_DEBITOR.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	KID = p_KID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_K_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	MP_DEBITOR.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	K_ID = p_K_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_FAKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_FAKT_ID	IN	MP_DEBITOR.FAKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	FAKT_ID = p_FAKT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_WHR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	MP_DEBITOR.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	WHR_ID = p_WHR_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_WHR_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_LAND_ID	IN	MP_DEBITOR.WHR_LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	WHR_LAND_ID = p_WHR_LAND_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_VAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_VAT_ID	IN	MP_DEBITOR.VAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	VAT_ID = p_VAT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_DEBITOR_ByFK_VAT_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_VAT_LAND_ID	IN	MP_DEBITOR.VAT_LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	OPT_TEXT,
			DEB_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN
	from	MP_DEBITOR
	where	VAT_LAND_ID = p_VAT_LAND_ID;
END;

--[End of Stored Procedure for table: MP_DEBITOR]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_FILE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_FILE
(
	p_FILE_ID	IN	MP_FILE.FILE_ID%TYPE,
	p_CODE	IN	MP_FILE.CODE%TYPE,
	p_FILE_TYP	IN	MP_FILE.FILE_TYP%TYPE,
	p_LABEL_ID	IN	MP_FILE.LABEL_ID%TYPE,
	p_FILENAME	IN	MP_FILE.FILENAME%TYPE
)
AS
BEGIN
	insert into MP_FILE
	(
		FILE_ID,
		CODE,
		FILE_TYP,
		LABEL_ID,
		FILENAME
	)
	values
	(
		p_FILE_ID,
		p_CODE,
		p_FILE_TYP,
		p_LABEL_ID,
		p_FILENAME
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_FILE
(
	p_FILE_ID	IN	MP_FILE.FILE_ID%TYPE,
	p_CODE	IN	MP_FILE.CODE%TYPE,
	p_FILE_TYP	IN	MP_FILE.FILE_TYP%TYPE,
	p_LABEL_ID	IN	MP_FILE.LABEL_ID%TYPE,
	p_FILENAME	IN	MP_FILE.FILENAME%TYPE
)
AS
BEGIN
	update	MP_FILE
		set	CODE = p_CODE,
			FILE_TYP = p_FILE_TYP,
			LABEL_ID = p_LABEL_ID,
			FILENAME = p_FILENAME
	where	FILE_ID = p_FILE_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_FILE
(
	p_cur	OUT	Types.cursor_type,
	p_FILE_ID	IN	MP_FILE.FILE_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FILE_ID,
			CODE,
			FILE_TYP,
			LABEL_ID,
			FILENAME
	from	MP_FILE
	where	FILE_ID = p_FILE_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_FILE
(
	p_FILE_ID	IN	MP_FILE.FILE_ID%TYPE
)
AS
BEGIN
	delete from MP_FILE
	where  FILE_ID = p_FILE_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_FILE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	FILE_ID,
			CODE,
			FILE_TYP,
			LABEL_ID,
			FILENAME
	from	MP_FILE;
END;

--[End of Stored Procedure for table: MP_FILE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_GEMEIN_RES]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_GEMEIN_RES
(
	p_PERS_ID	IN	MP_GEMEIN_RES.PERS_ID%TYPE,
	p_DL_ID	IN	MP_GEMEIN_RES.DL_ID%TYPE,
	p_TEIL	IN	MP_GEMEIN_RES.TEIL%TYPE,
	p_BID	IN	MP_GEMEIN_RES.BID%TYPE,
	p_GPERS_ID	IN	MP_GEMEIN_RES.GPERS_ID%TYPE
)
AS
BEGIN
	insert into MP_GEMEIN_RES
	(
		PERS_ID,
		DL_ID,
		TEIL,
		BID,
		GPERS_ID
	)
	values
	(
		p_PERS_ID,
		p_DL_ID,
		p_TEIL,
		p_BID,
		p_GPERS_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_GEMEIN_RES
(
	p_PERS_ID	IN	MP_GEMEIN_RES.PERS_ID%TYPE,
	p_DL_ID	IN	MP_GEMEIN_RES.DL_ID%TYPE,
	p_TEIL	IN	MP_GEMEIN_RES.TEIL%TYPE,
	p_BID	IN	MP_GEMEIN_RES.BID%TYPE,
	p_GPERS_ID	IN	MP_GEMEIN_RES.GPERS_ID%TYPE
)
AS
BEGIN
	update	MP_GEMEIN_RES
		set	where	PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID AND GPERS_ID = p_GPERS_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_GEMEIN_RES
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	MP_GEMEIN_RES.PERS_ID%TYPE,
	p_DL_ID	IN	MP_GEMEIN_RES.DL_ID%TYPE,
	p_TEIL	IN	MP_GEMEIN_RES.TEIL%TYPE,
	p_BID	IN	MP_GEMEIN_RES.BID%TYPE,
	p_GPERS_ID	IN	MP_GEMEIN_RES.GPERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID AND GPERS_ID = p_GPERS_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_GEMEIN_RES
(
	p_PERS_ID	IN	MP_GEMEIN_RES.PERS_ID%TYPE,
	p_DL_ID	IN	MP_GEMEIN_RES.DL_ID%TYPE,
	p_TEIL	IN	MP_GEMEIN_RES.TEIL%TYPE,
	p_BID	IN	MP_GEMEIN_RES.BID%TYPE,
	p_GPERS_ID	IN	MP_GEMEIN_RES.GPERS_ID%TYPE
)
AS
BEGIN
	delete from MP_GEMEIN_RES
	where  PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID AND GPERS_ID = p_GPERS_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	MP_GEMEIN_RES.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	MP_GEMEIN_RES.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES_ByFK_TEIL
(
	p_cur	OUT	Types.cursor_type,
	p_TEIL	IN	MP_GEMEIN_RES.TEIL%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	TEIL = p_TEIL;
END;

create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_GEMEIN_RES.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_MP_GEMEIN_RES_ByFK_GPERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_GPERS_ID	IN	MP_GEMEIN_RES.GPERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DL_ID,
			TEIL,
			BID,
			GPERS_ID
	from	MP_GEMEIN_RES
	where	GPERS_ID = p_GPERS_ID;
END;

--[End of Stored Procedure for table: MP_GEMEIN_RES]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_KAPA]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_KAPA
(
	p_KAT_ID	IN	MP_KAPA.KAT_ID%TYPE,
	p_KATBEZ_ID	IN	MP_KAPA.KATBEZ_ID%TYPE,
	p_DLT_ID	IN	MP_KAPA.DLT_ID%TYPE,
	p_DLTBEZ_ID	IN	MP_KAPA.DLTBEZ_ID%TYPE,
	p_DL_ID	IN	MP_KAPA.DL_ID%TYPE,
	p_DLBEZ_ID	IN	MP_KAPA.DLBEZ_ID%TYPE,
	p_ANZ	IN	MP_KAPA.ANZ%TYPE,
	p_BUSY	IN	MP_KAPA.BUSY%TYPE,
	p_VON_DAT	IN	MP_KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	MP_KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	insert into MP_KAPA
	(
		KAT_ID,
		KATBEZ_ID,
		DLT_ID,
		DLTBEZ_ID,
		DL_ID,
		DLBEZ_ID,
		ANZ,
		BUSY,
		VON_DAT,
		BIS_DAT
	)
	values
	(
		p_KAT_ID,
		p_KATBEZ_ID,
		p_DLT_ID,
		p_DLTBEZ_ID,
		p_DL_ID,
		p_DLBEZ_ID,
		p_ANZ,
		p_BUSY,
		p_VON_DAT,
		p_BIS_DAT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_KAPA
(
	p_KAT_ID	IN	MP_KAPA.KAT_ID%TYPE,
	p_KATBEZ_ID	IN	MP_KAPA.KATBEZ_ID%TYPE,
	p_DLT_ID	IN	MP_KAPA.DLT_ID%TYPE,
	p_DLTBEZ_ID	IN	MP_KAPA.DLTBEZ_ID%TYPE,
	p_DL_ID	IN	MP_KAPA.DL_ID%TYPE,
	p_DLBEZ_ID	IN	MP_KAPA.DLBEZ_ID%TYPE,
	p_ANZ	IN	MP_KAPA.ANZ%TYPE,
	p_BUSY	IN	MP_KAPA.BUSY%TYPE,
	p_VON_DAT	IN	MP_KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	MP_KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	update	MP_KAPA
		set	KATBEZ_ID = p_KATBEZ_ID,
			DLTBEZ_ID = p_DLTBEZ_ID,
			DLBEZ_ID = p_DLBEZ_ID,
			ANZ = p_ANZ,
			BUSY = p_BUSY
	where	KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND DL_ID = p_DL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_KAPA
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	MP_KAPA.KAT_ID%TYPE,
	p_DLT_ID	IN	MP_KAPA.DLT_ID%TYPE,
	p_DL_ID	IN	MP_KAPA.DL_ID%TYPE,
	p_VON_DAT	IN	MP_KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	MP_KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			DLT_ID,
			DLTBEZ_ID,
			DL_ID,
			DLBEZ_ID,
			ANZ,
			BUSY,
			VON_DAT,
			BIS_DAT
	from	MP_KAPA
	where	KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND DL_ID = p_DL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_KAPA
(
	p_KAT_ID	IN	MP_KAPA.KAT_ID%TYPE,
	p_DLT_ID	IN	MP_KAPA.DLT_ID%TYPE,
	p_DL_ID	IN	MP_KAPA.DL_ID%TYPE,
	p_VON_DAT	IN	MP_KAPA.VON_DAT%TYPE,
	p_BIS_DAT	IN	MP_KAPA.BIS_DAT%TYPE
)
AS
BEGIN
	delete from MP_KAPA
	where  KAT_ID = p_KAT_ID AND DLT_ID = p_DLT_ID AND DL_ID = p_DL_ID AND VON_DAT = p_VON_DAT AND BIS_DAT = p_BIS_DAT;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_KAPA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			DLT_ID,
			DLTBEZ_ID,
			DL_ID,
			DLBEZ_ID,
			ANZ,
			BUSY,
			VON_DAT,
			BIS_DAT
	from	MP_KAPA;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_KAPA_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	MP_KAPA.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			DLT_ID,
			DLTBEZ_ID,
			DL_ID,
			DLBEZ_ID,
			ANZ,
			BUSY,
			VON_DAT,
			BIS_DAT
	from	MP_KAPA
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KAPA_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	MP_KAPA.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			DLT_ID,
			DLTBEZ_ID,
			DL_ID,
			DLBEZ_ID,
			ANZ,
			BUSY,
			VON_DAT,
			BIS_DAT
	from	MP_KAPA
	where	DLT_ID = p_DLT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KAPA_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	MP_KAPA.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ_ID,
			DLT_ID,
			DLTBEZ_ID,
			DL_ID,
			DLBEZ_ID,
			ANZ,
			BUSY,
			VON_DAT,
			BIS_DAT
	from	MP_KAPA
	where	DL_ID = p_DL_ID;
END;

--[End of Stored Procedure for table: MP_KAPA]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_KOL_PERS]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_KOL_PERS
(
	p_PERS_ID	IN	MP_KOL_PERS.PERS_ID%TYPE,
	p_ADR_TYP	IN	MP_KOL_PERS.ADR_TYP%TYPE,
	p_MPID	IN	MP_KOL_PERS.MPID%TYPE,
	p_K_ID	IN	MP_KOL_PERS.K_ID%TYPE
)
AS
BEGIN
	insert into MP_KOL_PERS
	(
		PERS_ID,
		ADR_TYP,
		MPID,
		K_ID
	)
	values
	(
		p_PERS_ID,
		p_ADR_TYP,
		p_MPID,
		p_K_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_KOL_PERS
(
	p_PERS_ID	IN	MP_KOL_PERS.PERS_ID%TYPE,
	p_ADR_TYP	IN	MP_KOL_PERS.ADR_TYP%TYPE,
	p_MPID	IN	MP_KOL_PERS.MPID%TYPE,
	p_K_ID	IN	MP_KOL_PERS.K_ID%TYPE
)
AS
BEGIN
	update	MP_KOL_PERS
		set	where	PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP AND MPID = p_MPID AND K_ID = p_K_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_KOL_PERS
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	MP_KOL_PERS.PERS_ID%TYPE,
	p_ADR_TYP	IN	MP_KOL_PERS.ADR_TYP%TYPE,
	p_MPID	IN	MP_KOL_PERS.MPID%TYPE,
	p_K_ID	IN	MP_KOL_PERS.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			MPID,
			K_ID
	from	MP_KOL_PERS
	where	PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP AND MPID = p_MPID AND K_ID = p_K_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_KOL_PERS
(
	p_PERS_ID	IN	MP_KOL_PERS.PERS_ID%TYPE,
	p_ADR_TYP	IN	MP_KOL_PERS.ADR_TYP%TYPE,
	p_MPID	IN	MP_KOL_PERS.MPID%TYPE,
	p_K_ID	IN	MP_KOL_PERS.K_ID%TYPE
)
AS
BEGIN
	delete from MP_KOL_PERS
	where  PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP AND MPID = p_MPID AND K_ID = p_K_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_KOL_PERS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			MPID,
			K_ID
	from	MP_KOL_PERS;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_KOL_PERS_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	MP_KOL_PERS.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			MPID,
			K_ID
	from	MP_KOL_PERS
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KOL_PERS_ByFK_MPID
(
	p_cur	OUT	Types.cursor_type,
	p_MPID	IN	MP_KOL_PERS.MPID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			MPID,
			K_ID
	from	MP_KOL_PERS
	where	MPID = p_MPID;
END;

create or replace PROCEDURE tdb_READALL_MP_KOL_PERS_ByFK_K_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	MP_KOL_PERS.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			MPID,
			K_ID
	from	MP_KOL_PERS
	where	K_ID = p_K_ID;
END;

--[End of Stored Procedure for table: MP_KOL_PERS]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_KREDITOR]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_KREDITOR
(
	p_KRE_ID	IN	MP_KREDITOR.KRE_ID%TYPE,
	p_BID	IN	MP_KREDITOR.BID%TYPE,
	p_STA_ID	IN	MP_KREDITOR.STA_ID%TYPE,
	p_KID	IN	MP_KREDITOR.KID%TYPE,
	p_KONTO	IN	MP_KREDITOR.KONTO%TYPE,
	p_NACHSALDO	IN	MP_KREDITOR.NACHSALDO%TYPE,
	p_K_ID	IN	MP_KREDITOR.K_ID%TYPE,
	p_FAKT_ID	IN	MP_KREDITOR.FAKT_ID%TYPE,
	p_FAKT_ZEIT	IN	MP_KREDITOR.FAKT_ZEIT%TYPE,
	p_FAKT_NR	IN	MP_KREDITOR.FAKT_NR%TYPE,
	p_FAKT_TEXT	IN	MP_KREDITOR.FAKT_TEXT%TYPE,
	p_DLN_DETAIL	IN	MP_KREDITOR.DLN_DETAIL%TYPE,
	p_DLG_DETAIL	IN	MP_KREDITOR.DLG_DETAIL%TYPE,
	p_WHR_ID	IN	MP_KREDITOR.WHR_ID%TYPE,
	p_WHR_LAND_ID	IN	MP_KREDITOR.WHR_LAND_ID%TYPE,
	p_WHR_KURS	IN	MP_KREDITOR.WHR_KURS%TYPE,
	p_WHR_TEXT	IN	MP_KREDITOR.WHR_TEXT%TYPE,
	p_WHR_EXCL	IN	MP_KREDITOR.WHR_EXCL%TYPE,
	p_WHR_INKL	IN	MP_KREDITOR.WHR_INKL%TYPE,
	p_VAT_ID	IN	MP_KREDITOR.VAT_ID%TYPE,
	p_VAT_LAND_ID	IN	MP_KREDITOR.VAT_LAND_ID%TYPE,
	p_VAT	IN	MP_KREDITOR.VAT%TYPE,
	p_VAT_TEXT	IN	MP_KREDITOR.VAT_TEXT%TYPE,
	p_RST_EXCL	IN	MP_KREDITOR.RST_EXCL%TYPE,
	p_RST_INKL	IN	MP_KREDITOR.RST_INKL%TYPE,
	p_RST_GEWINN	IN	MP_KREDITOR.RST_GEWINN%TYPE,
	p_OPT_TEXT	IN	MP_KREDITOR.OPT_TEXT%TYPE
)
AS
BEGIN
	insert into MP_KREDITOR
	(
		KRE_ID,
		BID,
		STA_ID,
		KID,
		KONTO,
		NACHSALDO,
		K_ID,
		FAKT_ID,
		FAKT_ZEIT,
		FAKT_NR,
		FAKT_TEXT,
		DLN_DETAIL,
		DLG_DETAIL,
		WHR_ID,
		WHR_LAND_ID,
		WHR_KURS,
		WHR_TEXT,
		WHR_EXCL,
		WHR_INKL,
		VAT_ID,
		VAT_LAND_ID,
		VAT,
		VAT_TEXT,
		RST_EXCL,
		RST_INKL,
		RST_GEWINN,
		OPT_TEXT
	)
	values
	(
		p_KRE_ID,
		p_BID,
		p_STA_ID,
		p_KID,
		p_KONTO,
		p_NACHSALDO,
		p_K_ID,
		p_FAKT_ID,
		p_FAKT_ZEIT,
		p_FAKT_NR,
		p_FAKT_TEXT,
		p_DLN_DETAIL,
		p_DLG_DETAIL,
		p_WHR_ID,
		p_WHR_LAND_ID,
		p_WHR_KURS,
		p_WHR_TEXT,
		p_WHR_EXCL,
		p_WHR_INKL,
		p_VAT_ID,
		p_VAT_LAND_ID,
		p_VAT,
		p_VAT_TEXT,
		p_RST_EXCL,
		p_RST_INKL,
		p_RST_GEWINN,
		p_OPT_TEXT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_KREDITOR
(
	p_KRE_ID	IN	MP_KREDITOR.KRE_ID%TYPE,
	p_BID	IN	MP_KREDITOR.BID%TYPE,
	p_STA_ID	IN	MP_KREDITOR.STA_ID%TYPE,
	p_KID	IN	MP_KREDITOR.KID%TYPE,
	p_KONTO	IN	MP_KREDITOR.KONTO%TYPE,
	p_NACHSALDO	IN	MP_KREDITOR.NACHSALDO%TYPE,
	p_K_ID	IN	MP_KREDITOR.K_ID%TYPE,
	p_FAKT_ID	IN	MP_KREDITOR.FAKT_ID%TYPE,
	p_FAKT_ZEIT	IN	MP_KREDITOR.FAKT_ZEIT%TYPE,
	p_FAKT_NR	IN	MP_KREDITOR.FAKT_NR%TYPE,
	p_FAKT_TEXT	IN	MP_KREDITOR.FAKT_TEXT%TYPE,
	p_DLN_DETAIL	IN	MP_KREDITOR.DLN_DETAIL%TYPE,
	p_DLG_DETAIL	IN	MP_KREDITOR.DLG_DETAIL%TYPE,
	p_WHR_ID	IN	MP_KREDITOR.WHR_ID%TYPE,
	p_WHR_LAND_ID	IN	MP_KREDITOR.WHR_LAND_ID%TYPE,
	p_WHR_KURS	IN	MP_KREDITOR.WHR_KURS%TYPE,
	p_WHR_TEXT	IN	MP_KREDITOR.WHR_TEXT%TYPE,
	p_WHR_EXCL	IN	MP_KREDITOR.WHR_EXCL%TYPE,
	p_WHR_INKL	IN	MP_KREDITOR.WHR_INKL%TYPE,
	p_VAT_ID	IN	MP_KREDITOR.VAT_ID%TYPE,
	p_VAT_LAND_ID	IN	MP_KREDITOR.VAT_LAND_ID%TYPE,
	p_VAT	IN	MP_KREDITOR.VAT%TYPE,
	p_VAT_TEXT	IN	MP_KREDITOR.VAT_TEXT%TYPE,
	p_RST_EXCL	IN	MP_KREDITOR.RST_EXCL%TYPE,
	p_RST_INKL	IN	MP_KREDITOR.RST_INKL%TYPE,
	p_RST_GEWINN	IN	MP_KREDITOR.RST_GEWINN%TYPE,
	p_OPT_TEXT	IN	MP_KREDITOR.OPT_TEXT%TYPE
)
AS
BEGIN
	update	MP_KREDITOR
		set	BID = p_BID,
			STA_ID = p_STA_ID,
			KONTO = p_KONTO,
			NACHSALDO = p_NACHSALDO,
			K_ID = p_K_ID,
			FAKT_ID = p_FAKT_ID,
			FAKT_ZEIT = p_FAKT_ZEIT,
			FAKT_NR = p_FAKT_NR,
			FAKT_TEXT = p_FAKT_TEXT,
			DLN_DETAIL = p_DLN_DETAIL,
			DLG_DETAIL = p_DLG_DETAIL,
			WHR_ID = p_WHR_ID,
			WHR_LAND_ID = p_WHR_LAND_ID,
			WHR_KURS = p_WHR_KURS,
			WHR_TEXT = p_WHR_TEXT,
			WHR_EXCL = p_WHR_EXCL,
			WHR_INKL = p_WHR_INKL,
			VAT_LAND_ID = p_VAT_LAND_ID,
			VAT = p_VAT,
			VAT_TEXT = p_VAT_TEXT,
			RST_EXCL = p_RST_EXCL,
			RST_INKL = p_RST_INKL,
			RST_GEWINN = p_RST_GEWINN,
			OPT_TEXT = p_OPT_TEXT
	where	KRE_ID = p_KRE_ID AND KID = p_KID AND VAT_ID = p_VAT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_KREDITOR
(
	p_cur	OUT	Types.cursor_type,
	p_KRE_ID	IN	MP_KREDITOR.KRE_ID%TYPE,
	p_KID	IN	MP_KREDITOR.KID%TYPE,
	p_VAT_ID	IN	MP_KREDITOR.VAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	KRE_ID = p_KRE_ID AND KID = p_KID AND VAT_ID = p_VAT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_KREDITOR
(
	p_KRE_ID	IN	MP_KREDITOR.KRE_ID%TYPE,
	p_KID	IN	MP_KREDITOR.KID%TYPE,
	p_VAT_ID	IN	MP_KREDITOR.VAT_ID%TYPE
)
AS
BEGIN
	delete from MP_KREDITOR
	where  KRE_ID = p_KRE_ID AND KID = p_KID AND VAT_ID = p_VAT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_KREDITOR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_KREDITOR.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	MP_KREDITOR.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	KID = p_KID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_K_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	MP_KREDITOR.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	K_ID = p_K_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_FAKT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_FAKT_ID	IN	MP_KREDITOR.FAKT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	FAKT_ID = p_FAKT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_WHR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	MP_KREDITOR.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	WHR_ID = p_WHR_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_WHR_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_LAND_ID	IN	MP_KREDITOR.WHR_LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	WHR_LAND_ID = p_WHR_LAND_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_VAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_VAT_ID	IN	MP_KREDITOR.VAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	VAT_ID = p_VAT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_KREDITOR_ByFK_VAT_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_VAT_LAND_ID	IN	MP_KREDITOR.VAT_LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	KRE_ID,
			BID,
			STA_ID,
			KID,
			KONTO,
			NACHSALDO,
			K_ID,
			FAKT_ID,
			FAKT_ZEIT,
			FAKT_NR,
			FAKT_TEXT,
			DLN_DETAIL,
			DLG_DETAIL,
			WHR_ID,
			WHR_LAND_ID,
			WHR_KURS,
			WHR_TEXT,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			VAT_TEXT,
			RST_EXCL,
			RST_INKL,
			RST_GEWINN,
			OPT_TEXT
	from	MP_KREDITOR
	where	VAT_LAND_ID = p_VAT_LAND_ID;
END;

--[End of Stored Procedure for table: MP_KREDITOR]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_LABEL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_LABEL
(
	p_LABEL_ID	IN	MP_LABEL.LABEL_ID%TYPE,
	p_SEC_ID	IN	MP_LABEL.SEC_ID%TYPE,
	p_LABEL_TYP	IN	MP_LABEL.LABEL_TYP%TYPE,
	p_S_ID	IN	MP_LABEL.S_ID%TYPE,
	p_LABEL	IN	MP_LABEL.LABEL%TYPE
)
AS
BEGIN
	insert into MP_LABEL
	(
		LABEL_ID,
		SEC_ID,
		LABEL_TYP,
		S_ID,
		LABEL
	)
	values
	(
		p_LABEL_ID,
		p_SEC_ID,
		p_LABEL_TYP,
		p_S_ID,
		p_LABEL
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_LABEL
(
	p_LABEL_ID	IN	MP_LABEL.LABEL_ID%TYPE,
	p_SEC_ID	IN	MP_LABEL.SEC_ID%TYPE,
	p_LABEL_TYP	IN	MP_LABEL.LABEL_TYP%TYPE,
	p_S_ID	IN	MP_LABEL.S_ID%TYPE,
	p_LABEL	IN	MP_LABEL.LABEL%TYPE
)
AS
BEGIN
	update	MP_LABEL
		set	LABEL = p_LABEL
	where	LABEL_ID = p_LABEL_ID AND SEC_ID = p_SEC_ID AND LABEL_TYP = p_LABEL_TYP AND S_ID = p_S_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_LABEL
(
	p_cur	OUT	Types.cursor_type,
	p_LABEL_ID	IN	MP_LABEL.LABEL_ID%TYPE,
	p_SEC_ID	IN	MP_LABEL.SEC_ID%TYPE,
	p_LABEL_TYP	IN	MP_LABEL.LABEL_TYP%TYPE,
	p_S_ID	IN	MP_LABEL.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LABEL_ID,
			SEC_ID,
			LABEL_TYP,
			S_ID,
			LABEL
	from	MP_LABEL
	where	LABEL_ID = p_LABEL_ID AND SEC_ID = p_SEC_ID AND LABEL_TYP = p_LABEL_TYP AND S_ID = p_S_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_LABEL
(
	p_LABEL_ID	IN	MP_LABEL.LABEL_ID%TYPE,
	p_SEC_ID	IN	MP_LABEL.SEC_ID%TYPE,
	p_LABEL_TYP	IN	MP_LABEL.LABEL_TYP%TYPE,
	p_S_ID	IN	MP_LABEL.S_ID%TYPE
)
AS
BEGIN
	delete from MP_LABEL
	where  LABEL_ID = p_LABEL_ID AND SEC_ID = p_SEC_ID AND LABEL_TYP = p_LABEL_TYP AND S_ID = p_S_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_LABEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LABEL_ID,
			SEC_ID,
			LABEL_TYP,
			S_ID,
			LABEL
	from	MP_LABEL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_LABEL_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	MP_LABEL.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	LABEL_ID,
			SEC_ID,
			LABEL_TYP,
			S_ID,
			LABEL
	from	MP_LABEL
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: MP_LABEL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_MULTIMEDIA]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_MULTIMEDIA
(
	p_MULT_ID	IN	MP_MULTIMEDIA.MULT_ID%TYPE,
	p_MULT_TYP	IN	MP_MULTIMEDIA.MULT_TYP%TYPE,
	p_S_ID	IN	MP_MULTIMEDIA.S_ID%TYPE,
	p_MULT	IN	MP_MULTIMEDIA.MULT%TYPE
)
AS
BEGIN
	insert into MP_MULTIMEDIA
	(
		MULT_ID,
		MULT_TYP,
		S_ID,
		MULT
	)
	values
	(
		p_MULT_ID,
		p_MULT_TYP,
		p_S_ID,
		p_MULT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_MULTIMEDIA
(
	p_MULT_ID	IN	MP_MULTIMEDIA.MULT_ID%TYPE,
	p_MULT_TYP	IN	MP_MULTIMEDIA.MULT_TYP%TYPE,
	p_S_ID	IN	MP_MULTIMEDIA.S_ID%TYPE,
	p_MULT	IN	MP_MULTIMEDIA.MULT%TYPE
)
AS
BEGIN
	update	MP_MULTIMEDIA
		set	MULT_TYP = p_MULT_TYP,
			S_ID = p_S_ID,
			MULT = p_MULT
	where	MULT_ID = p_MULT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_MULTIMEDIA
(
	p_cur	OUT	Types.cursor_type,
	p_MULT_ID	IN	MP_MULTIMEDIA.MULT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MULT_ID,
			MULT_TYP,
			S_ID,
			MULT
	from	MP_MULTIMEDIA
	where	MULT_ID = p_MULT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_MULTIMEDIA
(
	p_MULT_ID	IN	MP_MULTIMEDIA.MULT_ID%TYPE
)
AS
BEGIN
	delete from MP_MULTIMEDIA
	where  MULT_ID = p_MULT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_MULTIMEDIA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	MULT_ID,
			MULT_TYP,
			S_ID,
			MULT
	from	MP_MULTIMEDIA;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_MULTIMEDIA_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	MP_MULTIMEDIA.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MULT_ID,
			MULT_TYP,
			S_ID,
			MULT
	from	MP_MULTIMEDIA
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: MP_MULTIMEDIA]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_PARAM]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_PARAM
(
	p_PARAM_ID	IN	MP_PARAM.PARAM_ID%TYPE,
	p_CODE	IN	MP_PARAM.CODE%TYPE,
	p_FILE_ID	IN	MP_PARAM.FILE_ID%TYPE,
	p_PARAM_TYP	IN	MP_PARAM.PARAM_TYP%TYPE,
	p_LABEL_ID	IN	MP_PARAM.LABEL_ID%TYPE,
	p_PARAM	IN	MP_PARAM.PARAM%TYPE
)
AS
BEGIN
	insert into MP_PARAM
	(
		PARAM_ID,
		CODE,
		FILE_ID,
		PARAM_TYP,
		LABEL_ID,
		PARAM
	)
	values
	(
		p_PARAM_ID,
		p_CODE,
		p_FILE_ID,
		p_PARAM_TYP,
		p_LABEL_ID,
		p_PARAM
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_PARAM
(
	p_PARAM_ID	IN	MP_PARAM.PARAM_ID%TYPE,
	p_CODE	IN	MP_PARAM.CODE%TYPE,
	p_FILE_ID	IN	MP_PARAM.FILE_ID%TYPE,
	p_PARAM_TYP	IN	MP_PARAM.PARAM_TYP%TYPE,
	p_LABEL_ID	IN	MP_PARAM.LABEL_ID%TYPE,
	p_PARAM	IN	MP_PARAM.PARAM%TYPE
)
AS
BEGIN
	update	MP_PARAM
		set	CODE = p_CODE,
			FILE_ID = p_FILE_ID,
			PARAM_TYP = p_PARAM_TYP,
			LABEL_ID = p_LABEL_ID,
			PARAM = p_PARAM
	where	PARAM_ID = p_PARAM_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_PARAM
(
	p_cur	OUT	Types.cursor_type,
	p_PARAM_ID	IN	MP_PARAM.PARAM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARAM_ID,
			CODE,
			FILE_ID,
			PARAM_TYP,
			LABEL_ID,
			PARAM
	from	MP_PARAM
	where	PARAM_ID = p_PARAM_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_PARAM
(
	p_PARAM_ID	IN	MP_PARAM.PARAM_ID%TYPE
)
AS
BEGIN
	delete from MP_PARAM
	where  PARAM_ID = p_PARAM_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_PARAM
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PARAM_ID,
			CODE,
			FILE_ID,
			PARAM_TYP,
			LABEL_ID,
			PARAM
	from	MP_PARAM;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_PARAM_ByFK_FILE_ID
(
	p_cur	OUT	Types.cursor_type,
	p_FILE_ID	IN	MP_PARAM.FILE_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PARAM_ID,
			CODE,
			FILE_ID,
			PARAM_TYP,
			LABEL_ID,
			PARAM
	from	MP_PARAM
	where	FILE_ID = p_FILE_ID;
END;

--[End of Stored Procedure for table: MP_PARAM]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_PREFERENCES]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_PREFERENCES
(
	p_FULLNAME	IN	MP_PREFERENCES.FULLNAME%TYPE,
	p_FILTER	IN	MP_PREFERENCES.FILTER%TYPE,
	p_GUI	IN	MP_PREFERENCES.GUI%TYPE,
	p_CUSTOM	IN	MP_PREFERENCES.CUSTOM%TYPE,
	p_MPID	IN	MP_PREFERENCES.MPID%TYPE
)
AS
BEGIN
	insert into MP_PREFERENCES
	(
		FULLNAME,
		FILTER,
		GUI,
		CUSTOM,
		MPID
	)
	values
	(
		p_FULLNAME,
		p_FILTER,
		p_GUI,
		p_CUSTOM,
		p_MPID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_PREFERENCES
(
	p_FULLNAME	IN	MP_PREFERENCES.FULLNAME%TYPE,
	p_FILTER	IN	MP_PREFERENCES.FILTER%TYPE,
	p_GUI	IN	MP_PREFERENCES.GUI%TYPE,
	p_CUSTOM	IN	MP_PREFERENCES.CUSTOM%TYPE,
	p_MPID	IN	MP_PREFERENCES.MPID%TYPE
)
AS
BEGIN
	update	MP_PREFERENCES
		set	FULLNAME = p_FULLNAME,
			FILTER = p_FILTER,
			GUI = p_GUI,
			CUSTOM = p_CUSTOM
	where	MPID = p_MPID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_PREFERENCES
(
	p_cur	OUT	Types.cursor_type,
	p_MPID	IN	MP_PREFERENCES.MPID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FULLNAME,
			FILTER,
			GUI,
			CUSTOM,
			MPID
	from	MP_PREFERENCES
	where	MPID = p_MPID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_PREFERENCES
(
	p_MPID	IN	MP_PREFERENCES.MPID%TYPE
)
AS
BEGIN
	delete from MP_PREFERENCES
	where  MPID = p_MPID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_PREFERENCES
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	FULLNAME,
			FILTER,
			GUI,
			CUSTOM,
			MPID
	from	MP_PREFERENCES;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_PREFERENCES_ByFK_MPID
(
	p_cur	OUT	Types.cursor_type,
	p_MPID	IN	MP_PREFERENCES.MPID%TYPE
)
AS
BEGIN
	open p_cur for
	select	FULLNAME,
			FILTER,
			GUI,
			CUSTOM,
			MPID
	from	MP_PREFERENCES
	where	MPID = p_MPID;
END;

--[End of Stored Procedure for table: MP_PREFERENCES]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_PROFIL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_PROFIL
(
	p_MPID	IN	MP_PROFIL.MPID%TYPE,
	p_MPUSER	IN	MP_PROFIL.MPUSER%TYPE,
	p_BCHST	IN	MP_PROFIL.BCHST%TYPE,
	p_SECLEVEL	IN	MP_PROFIL.SECLEVEL%TYPE,
	p_S_ID	IN	MP_PROFIL.S_ID%TYPE,
	p_LAND_ID	IN	MP_PROFIL.LAND_ID%TYPE,
	p_DLTT_ID	IN	MP_PROFIL.DLTT_ID%TYPE,
	p_DLT_ID	IN	MP_PROFIL.DLT_ID%TYPE,
	p_KAT_ID	IN	MP_PROFIL.KAT_ID%TYPE,
	p_DLAT_ID	IN	MP_PROFIL.DLAT_ID%TYPE,
	p_DLNT_ID	IN	MP_PROFIL.DLNT_ID%TYPE,
	p_SAI_ID	IN	MP_PROFIL.SAI_ID%TYPE,
	p_PRG_ID	IN	MP_PROFIL.PRG_ID%TYPE,
	p_A_ZEIT	IN	MP_PROFIL.A_ZEIT%TYPE,
	p_E_ZEIT	IN	MP_PROFIL.E_ZEIT%TYPE,
	p_P_RANGE	IN	MP_PROFIL.P_RANGE%TYPE
)
AS
BEGIN
	insert into MP_PROFIL
	(
		MPID,
		MPUSER,
		BCHST,
		SECLEVEL,
		S_ID,
		LAND_ID,
		DLTT_ID,
		DLT_ID,
		KAT_ID,
		DLAT_ID,
		DLNT_ID,
		SAI_ID,
		PRG_ID,
		A_ZEIT,
		E_ZEIT,
		P_RANGE
	)
	values
	(
		p_MPID,
		p_MPUSER,
		p_BCHST,
		p_SECLEVEL,
		p_S_ID,
		p_LAND_ID,
		p_DLTT_ID,
		p_DLT_ID,
		p_KAT_ID,
		p_DLAT_ID,
		p_DLNT_ID,
		p_SAI_ID,
		p_PRG_ID,
		p_A_ZEIT,
		p_E_ZEIT,
		p_P_RANGE
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_PROFIL
(
	p_MPID	IN	MP_PROFIL.MPID%TYPE,
	p_MPUSER	IN	MP_PROFIL.MPUSER%TYPE,
	p_BCHST	IN	MP_PROFIL.BCHST%TYPE,
	p_SECLEVEL	IN	MP_PROFIL.SECLEVEL%TYPE,
	p_S_ID	IN	MP_PROFIL.S_ID%TYPE,
	p_LAND_ID	IN	MP_PROFIL.LAND_ID%TYPE,
	p_DLTT_ID	IN	MP_PROFIL.DLTT_ID%TYPE,
	p_DLT_ID	IN	MP_PROFIL.DLT_ID%TYPE,
	p_KAT_ID	IN	MP_PROFIL.KAT_ID%TYPE,
	p_DLAT_ID	IN	MP_PROFIL.DLAT_ID%TYPE,
	p_DLNT_ID	IN	MP_PROFIL.DLNT_ID%TYPE,
	p_SAI_ID	IN	MP_PROFIL.SAI_ID%TYPE,
	p_PRG_ID	IN	MP_PROFIL.PRG_ID%TYPE,
	p_A_ZEIT	IN	MP_PROFIL.A_ZEIT%TYPE,
	p_E_ZEIT	IN	MP_PROFIL.E_ZEIT%TYPE,
	p_P_RANGE	IN	MP_PROFIL.P_RANGE%TYPE
)
AS
BEGIN
	update	MP_PROFIL
		set	MPUSER = p_MPUSER,
			BCHST = p_BCHST,
			SECLEVEL = p_SECLEVEL,
			S_ID = p_S_ID,
			LAND_ID = p_LAND_ID,
			DLTT_ID = p_DLTT_ID,
			DLT_ID = p_DLT_ID,
			KAT_ID = p_KAT_ID,
			DLAT_ID = p_DLAT_ID,
			DLNT_ID = p_DLNT_ID,
			SAI_ID = p_SAI_ID,
			PRG_ID = p_PRG_ID,
			A_ZEIT = p_A_ZEIT,
			E_ZEIT = p_E_ZEIT,
			P_RANGE = p_P_RANGE
	where	MPID = p_MPID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_PROFIL
(
	p_cur	OUT	Types.cursor_type,
	p_MPID	IN	MP_PROFIL.MPID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	MPID = p_MPID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_PROFIL
(
	p_MPID	IN	MP_PROFIL.MPID%TYPE
)
AS
BEGIN
	delete from MP_PROFIL
	where  MPID = p_MPID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_PROFIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_BCHST
(
	p_cur	OUT	Types.cursor_type,
	p_BCHST	IN	MP_PROFIL.BCHST%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	BCHST = p_BCHST;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	MP_PROFIL.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	S_ID = p_S_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	MP_PROFIL.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	LAND_ID = p_LAND_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_DLTT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLTT_ID	IN	MP_PROFIL.DLTT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	DLTT_ID = p_DLTT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	MP_PROFIL.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	DLT_ID = p_DLT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	MP_PROFIL.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_DLAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLAT_ID	IN	MP_PROFIL.DLAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	DLAT_ID = p_DLAT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_DLNT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLNT_ID	IN	MP_PROFIL.DLNT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	DLNT_ID = p_DLNT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	MP_PROFIL.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	SAI_ID = p_SAI_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROFIL_ByFK_PRG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PRG_ID	IN	MP_PROFIL.PRG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MPID,
			MPUSER,
			BCHST,
			SECLEVEL,
			S_ID,
			LAND_ID,
			DLTT_ID,
			DLT_ID,
			KAT_ID,
			DLAT_ID,
			DLNT_ID,
			SAI_ID,
			PRG_ID,
			A_ZEIT,
			E_ZEIT,
			P_RANGE
	from	MP_PROFIL
	where	PRG_ID = p_PRG_ID;
END;

--[End of Stored Procedure for table: MP_PROFIL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_PROX]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_PROX
(
	p_ORT_ID	IN	MP_PROX.ORT_ID%TYPE,
	p_PROX_ID	IN	MP_PROX.PROX_ID%TYPE
)
AS
BEGIN
	insert into MP_PROX
	(
		ORT_ID,
		PROX_ID
	)
	values
	(
		p_ORT_ID,
		p_PROX_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_PROX
(
	p_ORT_ID	IN	MP_PROX.ORT_ID%TYPE,
	p_PROX_ID	IN	MP_PROX.PROX_ID%TYPE
)
AS
BEGIN
	update	MP_PROX
		set	where	ORT_ID = p_ORT_ID AND PROX_ID = p_PROX_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_PROX
(
	p_cur	OUT	Types.cursor_type,
	p_ORT_ID	IN	MP_PROX.ORT_ID%TYPE,
	p_PROX_ID	IN	MP_PROX.PROX_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			PROX_ID
	from	MP_PROX
	where	ORT_ID = p_ORT_ID AND PROX_ID = p_PROX_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_PROX
(
	p_ORT_ID	IN	MP_PROX.ORT_ID%TYPE,
	p_PROX_ID	IN	MP_PROX.PROX_ID%TYPE
)
AS
BEGIN
	delete from MP_PROX
	where  ORT_ID = p_ORT_ID AND PROX_ID = p_PROX_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_PROX
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			PROX_ID
	from	MP_PROX;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_PROX_ByFK_ORT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ORT_ID	IN	MP_PROX.ORT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			PROX_ID
	from	MP_PROX
	where	ORT_ID = p_ORT_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_PROX_ByFK_PROX_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PROX_ID	IN	MP_PROX.PROX_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			PROX_ID
	from	MP_PROX
	where	PROX_ID = p_PROX_ID;
END;

--[End of Stored Procedure for table: MP_PROX]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_REMINDER]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_REMINDER
(
	p_REM_ID	IN	MP_REMINDER.REM_ID%TYPE,
	p_MPID	IN	MP_REMINDER.MPID%TYPE,
	p_K_ID	IN	MP_REMINDER.K_ID%TYPE,
	p_BID	IN	MP_REMINDER.BID%TYPE,
	p_PERS_ID	IN	MP_REMINDER.PERS_ID%TYPE,
	p_KID	IN	MP_REMINDER.KID%TYPE,
	p_ENTRY	IN	MP_REMINDER.ENTRY%TYPE,
	p_DEADLINE	IN	MP_REMINDER.DEADLINE%TYPE,
	p_PERSON	IN	MP_REMINDER.PERSON%TYPE,
	p_PERS_TYP	IN	MP_REMINDER.PERS_TYP%TYPE,
	p_NOTICE	IN	MP_REMINDER.NOTICE%TYPE,
	p_OPT	IN	MP_REMINDER.OPT%TYPE
)
AS
BEGIN
	insert into MP_REMINDER
	(
		REM_ID,
		MPID,
		K_ID,
		BID,
		PERS_ID,
		KID,
		ENTRY,
		DEADLINE,
		PERSON,
		PERS_TYP,
		NOTICE,
		OPT
	)
	values
	(
		p_REM_ID,
		p_MPID,
		p_K_ID,
		p_BID,
		p_PERS_ID,
		p_KID,
		p_ENTRY,
		p_DEADLINE,
		p_PERSON,
		p_PERS_TYP,
		p_NOTICE,
		p_OPT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_REMINDER
(
	p_REM_ID	IN	MP_REMINDER.REM_ID%TYPE,
	p_MPID	IN	MP_REMINDER.MPID%TYPE,
	p_K_ID	IN	MP_REMINDER.K_ID%TYPE,
	p_BID	IN	MP_REMINDER.BID%TYPE,
	p_PERS_ID	IN	MP_REMINDER.PERS_ID%TYPE,
	p_KID	IN	MP_REMINDER.KID%TYPE,
	p_ENTRY	IN	MP_REMINDER.ENTRY%TYPE,
	p_DEADLINE	IN	MP_REMINDER.DEADLINE%TYPE,
	p_PERSON	IN	MP_REMINDER.PERSON%TYPE,
	p_PERS_TYP	IN	MP_REMINDER.PERS_TYP%TYPE,
	p_NOTICE	IN	MP_REMINDER.NOTICE%TYPE,
	p_OPT	IN	MP_REMINDER.OPT%TYPE
)
AS
BEGIN
	update	MP_REMINDER
		set	MPID = p_MPID,
			K_ID = p_K_ID,
			BID = p_BID,
			PERS_ID = p_PERS_ID,
			KID = p_KID,
			ENTRY = p_ENTRY,
			DEADLINE = p_DEADLINE,
			PERSON = p_PERSON,
			PERS_TYP = p_PERS_TYP,
			NOTICE = p_NOTICE,
			OPT = p_OPT
	where	REM_ID = p_REM_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_REMINDER
(
	p_cur	OUT	Types.cursor_type,
	p_REM_ID	IN	MP_REMINDER.REM_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	REM_ID = p_REM_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_REMINDER
(
	p_REM_ID	IN	MP_REMINDER.REM_ID%TYPE
)
AS
BEGIN
	delete from MP_REMINDER
	where  REM_ID = p_REM_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_REMINDER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_REMINDER_ByFK_MPID
(
	p_cur	OUT	Types.cursor_type,
	p_MPID	IN	MP_REMINDER.MPID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	MPID = p_MPID;
END;

create or replace PROCEDURE tdb_READALL_MP_REMINDER_ByFK_K_ID
(
	p_cur	OUT	Types.cursor_type,
	p_K_ID	IN	MP_REMINDER.K_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	K_ID = p_K_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_REMINDER_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	MP_REMINDER.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_MP_REMINDER_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	MP_REMINDER.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_MP_REMINDER_ByFK_KID
(
	p_cur	OUT	Types.cursor_type,
	p_KID	IN	MP_REMINDER.KID%TYPE
)
AS
BEGIN
	open p_cur for
	select	REM_ID,
			MPID,
			K_ID,
			BID,
			PERS_ID,
			KID,
			ENTRY,
			DEADLINE,
			PERSON,
			PERS_TYP,
			NOTICE,
			OPT
	from	MP_REMINDER
	where	KID = p_KID;
END;

--[End of Stored Procedure for table: MP_REMINDER]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_TEXTE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_TEXTE
(
	p_TEXTID	IN	MP_TEXTE.TEXTID%TYPE,
	p_TYP	IN	MP_TEXTE.TYP%TYPE,
	p_S_ID	IN	MP_TEXTE.S_ID%TYPE,
	p_TEXT	IN	MP_TEXTE.TEXT%TYPE
)
AS
BEGIN
	insert into MP_TEXTE
	(
		TEXTID,
		TYP,
		S_ID,
		TEXT
	)
	values
	(
		p_TEXTID,
		p_TYP,
		p_S_ID,
		p_TEXT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_TEXTE
(
	p_TEXTID	IN	MP_TEXTE.TEXTID%TYPE,
	p_TYP	IN	MP_TEXTE.TYP%TYPE,
	p_S_ID	IN	MP_TEXTE.S_ID%TYPE,
	p_TEXT	IN	MP_TEXTE.TEXT%TYPE
)
AS
BEGIN
	update	MP_TEXTE
		set	TEXT = p_TEXT
	where	TEXTID = p_TEXTID AND TYP = p_TYP AND S_ID = p_S_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_TEXTE
(
	p_cur	OUT	Types.cursor_type,
	p_TEXTID	IN	MP_TEXTE.TEXTID%TYPE,
	p_TYP	IN	MP_TEXTE.TYP%TYPE,
	p_S_ID	IN	MP_TEXTE.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			S_ID,
			TEXT
	from	MP_TEXTE
	where	TEXTID = p_TEXTID AND TYP = p_TYP AND S_ID = p_S_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_TEXTE
(
	p_TEXTID	IN	MP_TEXTE.TEXTID%TYPE,
	p_TYP	IN	MP_TEXTE.TYP%TYPE,
	p_S_ID	IN	MP_TEXTE.S_ID%TYPE
)
AS
BEGIN
	delete from MP_TEXTE
	where  TEXTID = p_TEXTID AND TYP = p_TYP AND S_ID = p_S_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_TEXTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			S_ID,
			TEXT
	from	MP_TEXTE;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_TEXTE_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	MP_TEXTE.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			S_ID,
			TEXT
	from	MP_TEXTE
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: MP_TEXTE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MP_TEXT_DOC]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MP_TEXT_DOC
(
	p_TEXTID	IN	MP_TEXT_DOC.TEXTID%TYPE,
	p_TYP	IN	MP_TEXT_DOC.TYP%TYPE,
	p_MULT_ID	IN	MP_TEXT_DOC.MULT_ID%TYPE
)
AS
BEGIN
	insert into MP_TEXT_DOC
	(
		TEXTID,
		TYP,
		MULT_ID
	)
	values
	(
		p_TEXTID,
		p_TYP,
		p_MULT_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MP_TEXT_DOC
(
	p_TEXTID	IN	MP_TEXT_DOC.TEXTID%TYPE,
	p_TYP	IN	MP_TEXT_DOC.TYP%TYPE,
	p_MULT_ID	IN	MP_TEXT_DOC.MULT_ID%TYPE
)
AS
BEGIN
	update	MP_TEXT_DOC
		set	where	TEXTID = p_TEXTID AND TYP = p_TYP AND MULT_ID = p_MULT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MP_TEXT_DOC
(
	p_cur	OUT	Types.cursor_type,
	p_TEXTID	IN	MP_TEXT_DOC.TEXTID%TYPE,
	p_TYP	IN	MP_TEXT_DOC.TYP%TYPE,
	p_MULT_ID	IN	MP_TEXT_DOC.MULT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			MULT_ID
	from	MP_TEXT_DOC
	where	TEXTID = p_TEXTID AND TYP = p_TYP AND MULT_ID = p_MULT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MP_TEXT_DOC
(
	p_TEXTID	IN	MP_TEXT_DOC.TEXTID%TYPE,
	p_TYP	IN	MP_TEXT_DOC.TYP%TYPE,
	p_MULT_ID	IN	MP_TEXT_DOC.MULT_ID%TYPE
)
AS
BEGIN
	delete from MP_TEXT_DOC
	where  TEXTID = p_TEXTID AND TYP = p_TYP AND MULT_ID = p_MULT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MP_TEXT_DOC
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			MULT_ID
	from	MP_TEXT_DOC;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MP_TEXT_DOC_ByFK_MULT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_MULT_ID	IN	MP_TEXT_DOC.MULT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			MULT_ID
	from	MP_TEXT_DOC
	where	MULT_ID = p_MULT_ID;
END;

--[End of Stored Procedure for table: MP_TEXT_DOC]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: MSG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_MSG
(
	p_MSG_TYP	IN	MSG.MSG_TYP%TYPE,
	p_MSG_ID	IN	MSG.MSG_ID%TYPE,
	p_S_ID	IN	MSG.S_ID%TYPE,
	p_TEXTNR	IN	MSG.TEXTNR%TYPE,
	p_TEXT	IN	MSG.TEXT%TYPE
)
AS
BEGIN
	insert into MSG
	(
		MSG_TYP,
		MSG_ID,
		S_ID,
		TEXTNR,
		TEXT
	)
	values
	(
		p_MSG_TYP,
		p_MSG_ID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_MSG
(
	p_MSG_TYP	IN	MSG.MSG_TYP%TYPE,
	p_MSG_ID	IN	MSG.MSG_ID%TYPE,
	p_S_ID	IN	MSG.S_ID%TYPE,
	p_TEXTNR	IN	MSG.TEXTNR%TYPE,
	p_TEXT	IN	MSG.TEXT%TYPE
)
AS
BEGIN
	update	MSG
		set	TEXT = p_TEXT
	where	MSG_TYP = p_MSG_TYP AND MSG_ID = p_MSG_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_MSG
(
	p_cur	OUT	Types.cursor_type,
	p_MSG_TYP	IN	MSG.MSG_TYP%TYPE,
	p_MSG_ID	IN	MSG.MSG_ID%TYPE,
	p_S_ID	IN	MSG.S_ID%TYPE,
	p_TEXTNR	IN	MSG.TEXTNR%TYPE
)
AS
BEGIN
	open p_cur for
	select	MSG_TYP,
			MSG_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	MSG
	where	MSG_TYP = p_MSG_TYP AND MSG_ID = p_MSG_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_MSG
(
	p_MSG_TYP	IN	MSG.MSG_TYP%TYPE,
	p_MSG_ID	IN	MSG.MSG_ID%TYPE,
	p_S_ID	IN	MSG.S_ID%TYPE,
	p_TEXTNR	IN	MSG.TEXTNR%TYPE
)
AS
BEGIN
	delete from MSG
	where  MSG_TYP = p_MSG_TYP AND MSG_ID = p_MSG_ID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_MSG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	MSG_TYP,
			MSG_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	MSG;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_MSG_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	MSG.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	MSG_TYP,
			MSG_ID,
			S_ID,
			TEXTNR,
			TEXT
	from	MSG
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: MSG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: ORT]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_ORT
(
	p_ORT_ID	IN	ORT.ORT_ID%TYPE,
	p_BEZ_ID	IN	ORT.BEZ_ID%TYPE,
	p_LAND_ID	IN	ORT.LAND_ID%TYPE,
	p_TEXTID	IN	ORT.TEXTID%TYPE,
	p_KRZL	IN	ORT.KRZL%TYPE,
	p_ZEITVER	IN	ORT.ZEITVER%TYPE,
	p_KOORD1	IN	ORT.KOORD1%TYPE,
	p_KOORD2	IN	ORT.KOORD2%TYPE,
	p_ORT_TYP	IN	ORT.ORT_TYP%TYPE
)
AS
BEGIN
	insert into ORT
	(
		ORT_ID,
		BEZ_ID,
		LAND_ID,
		TEXTID,
		KRZL,
		ZEITVER,
		KOORD1,
		KOORD2,
		ORT_TYP
	)
	values
	(
		p_ORT_ID,
		p_BEZ_ID,
		p_LAND_ID,
		p_TEXTID,
		p_KRZL,
		p_ZEITVER,
		p_KOORD1,
		p_KOORD2,
		p_ORT_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_ORT
(
	p_ORT_ID	IN	ORT.ORT_ID%TYPE,
	p_BEZ_ID	IN	ORT.BEZ_ID%TYPE,
	p_LAND_ID	IN	ORT.LAND_ID%TYPE,
	p_TEXTID	IN	ORT.TEXTID%TYPE,
	p_KRZL	IN	ORT.KRZL%TYPE,
	p_ZEITVER	IN	ORT.ZEITVER%TYPE,
	p_KOORD1	IN	ORT.KOORD1%TYPE,
	p_KOORD2	IN	ORT.KOORD2%TYPE,
	p_ORT_TYP	IN	ORT.ORT_TYP%TYPE
)
AS
BEGIN
	update	ORT
		set	BEZ_ID = p_BEZ_ID,
			LAND_ID = p_LAND_ID,
			TEXTID = p_TEXTID,
			KRZL = p_KRZL,
			ZEITVER = p_ZEITVER,
			KOORD1 = p_KOORD1,
			KOORD2 = p_KOORD2,
			ORT_TYP = p_ORT_TYP
	where	ORT_ID = p_ORT_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_ORT
(
	p_cur	OUT	Types.cursor_type,
	p_ORT_ID	IN	ORT.ORT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ_ID,
			LAND_ID,
			TEXTID,
			KRZL,
			ZEITVER,
			KOORD1,
			KOORD2,
			ORT_TYP
	from	ORT
	where	ORT_ID = p_ORT_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_ORT
(
	p_ORT_ID	IN	ORT.ORT_ID%TYPE
)
AS
BEGIN
	delete from ORT
	where  ORT_ID = p_ORT_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_ORT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ_ID,
			LAND_ID,
			TEXTID,
			KRZL,
			ZEITVER,
			KOORD1,
			KOORD2,
			ORT_TYP
	from	ORT;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_ORT_ByFK_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	ORT.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ_ID,
			LAND_ID,
			TEXTID,
			KRZL,
			ZEITVER,
			KOORD1,
			KOORD2,
			ORT_TYP
	from	ORT
	where	LAND_ID = p_LAND_ID;
END;

--[End of Stored Procedure for table: ORT]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: PCX_FILES]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_PCX_FILES
(
	p_PCX_ID	IN	PCX_FILES.PCX_ID%TYPE,
	p_BEZ_ID	IN	PCX_FILES.BEZ_ID%TYPE,
	p_FILENAME	IN	PCX_FILES.FILENAME%TYPE,
	p_X	IN	PCX_FILES.X%TYPE,
	p_Y	IN	PCX_FILES.Y%TYPE,
	p_TYP	IN	PCX_FILES.TYP%TYPE,
	p_TYPCODE	IN	PCX_FILES.TYPCODE%TYPE,
	p_FOLGE	IN	PCX_FILES.FOLGE%TYPE
)
AS
BEGIN
	insert into PCX_FILES
	(
		PCX_ID,
		BEZ_ID,
		FILENAME,
		X,
		Y,
		TYP,
		TYPCODE,
		FOLGE
	)
	values
	(
		p_PCX_ID,
		p_BEZ_ID,
		p_FILENAME,
		p_X,
		p_Y,
		p_TYP,
		p_TYPCODE,
		p_FOLGE
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_PCX_FILES
(
	p_PCX_ID	IN	PCX_FILES.PCX_ID%TYPE,
	p_BEZ_ID	IN	PCX_FILES.BEZ_ID%TYPE,
	p_FILENAME	IN	PCX_FILES.FILENAME%TYPE,
	p_X	IN	PCX_FILES.X%TYPE,
	p_Y	IN	PCX_FILES.Y%TYPE,
	p_TYP	IN	PCX_FILES.TYP%TYPE,
	p_TYPCODE	IN	PCX_FILES.TYPCODE%TYPE,
	p_FOLGE	IN	PCX_FILES.FOLGE%TYPE
)
AS
BEGIN
	update	PCX_FILES
		set	BEZ_ID = p_BEZ_ID,
			FILENAME = p_FILENAME,
			X = p_X,
			Y = p_Y,
			TYP = p_TYP,
			TYPCODE = p_TYPCODE,
			FOLGE = p_FOLGE
	where	PCX_ID = p_PCX_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_PCX_FILES
(
	p_cur	OUT	Types.cursor_type,
	p_PCX_ID	IN	PCX_FILES.PCX_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PCX_ID,
			BEZ_ID,
			FILENAME,
			X,
			Y,
			TYP,
			TYPCODE,
			FOLGE
	from	PCX_FILES
	where	PCX_ID = p_PCX_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_PCX_FILES
(
	p_PCX_ID	IN	PCX_FILES.PCX_ID%TYPE
)
AS
BEGIN
	delete from PCX_FILES
	where  PCX_ID = p_PCX_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_PCX_FILES
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PCX_ID,
			BEZ_ID,
			FILENAME,
			X,
			Y,
			TYP,
			TYPCODE,
			FOLGE
	from	PCX_FILES;
END;

--[End of Stored Procedure for table: PCX_FILES]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: PERSADR]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_PERSADR
(
	p_PERS_ID	IN	PERSADR.PERS_ID%TYPE,
	p_ADR_TYP	IN	PERSADR.ADR_TYP%TYPE,
	p_ANS	IN	PERSADR.ANS%TYPE,
	p_ADR1	IN	PERSADR.ADR1%TYPE,
	p_ADR2	IN	PERSADR.ADR2%TYPE,
	p_ADR3	IN	PERSADR.ADR3%TYPE,
	p_PLZ	IN	PERSADR.PLZ%TYPE,
	p_ORT	IN	PERSADR.ORT%TYPE,
	p_KANT	IN	PERSADR.KANT%TYPE,
	p_LAND_ID	IN	PERSADR.LAND_ID%TYPE,
	p_STA_ID	IN	PERSADR.STA_ID%TYPE,
	p_HAUPT_FLAG	IN	PERSADR.HAUPT_FLAG%TYPE,
	p_RCH_FLAG	IN	PERSADR.RCH_FLAG%TYPE,
	p_MAIL_FLAG	IN	PERSADR.MAIL_FLAG%TYPE,
	p_TEL	IN	PERSADR.TEL%TYPE,
	p_HANDY	IN	PERSADR.HANDY%TYPE,
	p_FAX	IN	PERSADR.FAX%TYPE,
	p_TLX	IN	PERSADR.TLX%TYPE,
	p_EMAIL	IN	PERSADR.EMAIL%TYPE,
	p_WEB	IN	PERSADR.WEB%TYPE
)
AS
BEGIN
	insert into PERSADR
	(
		PERS_ID,
		ADR_TYP,
		ANS,
		ADR1,
		ADR2,
		ADR3,
		PLZ,
		ORT,
		KANT,
		LAND_ID,
		STA_ID,
		HAUPT_FLAG,
		RCH_FLAG,
		MAIL_FLAG,
		TEL,
		HANDY,
		FAX,
		TLX,
		EMAIL,
		WEB
	)
	values
	(
		p_PERS_ID,
		p_ADR_TYP,
		p_ANS,
		p_ADR1,
		p_ADR2,
		p_ADR3,
		p_PLZ,
		p_ORT,
		p_KANT,
		p_LAND_ID,
		p_STA_ID,
		p_HAUPT_FLAG,
		p_RCH_FLAG,
		p_MAIL_FLAG,
		p_TEL,
		p_HANDY,
		p_FAX,
		p_TLX,
		p_EMAIL,
		p_WEB
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_PERSADR
(
	p_PERS_ID	IN	PERSADR.PERS_ID%TYPE,
	p_ADR_TYP	IN	PERSADR.ADR_TYP%TYPE,
	p_ANS	IN	PERSADR.ANS%TYPE,
	p_ADR1	IN	PERSADR.ADR1%TYPE,
	p_ADR2	IN	PERSADR.ADR2%TYPE,
	p_ADR3	IN	PERSADR.ADR3%TYPE,
	p_PLZ	IN	PERSADR.PLZ%TYPE,
	p_ORT	IN	PERSADR.ORT%TYPE,
	p_KANT	IN	PERSADR.KANT%TYPE,
	p_LAND_ID	IN	PERSADR.LAND_ID%TYPE,
	p_STA_ID	IN	PERSADR.STA_ID%TYPE,
	p_HAUPT_FLAG	IN	PERSADR.HAUPT_FLAG%TYPE,
	p_RCH_FLAG	IN	PERSADR.RCH_FLAG%TYPE,
	p_MAIL_FLAG	IN	PERSADR.MAIL_FLAG%TYPE,
	p_TEL	IN	PERSADR.TEL%TYPE,
	p_HANDY	IN	PERSADR.HANDY%TYPE,
	p_FAX	IN	PERSADR.FAX%TYPE,
	p_TLX	IN	PERSADR.TLX%TYPE,
	p_EMAIL	IN	PERSADR.EMAIL%TYPE,
	p_WEB	IN	PERSADR.WEB%TYPE
)
AS
BEGIN
	update	PERSADR
		set	ANS = p_ANS,
			ADR1 = p_ADR1,
			ADR2 = p_ADR2,
			ADR3 = p_ADR3,
			PLZ = p_PLZ,
			ORT = p_ORT,
			KANT = p_KANT,
			LAND_ID = p_LAND_ID,
			STA_ID = p_STA_ID,
			HAUPT_FLAG = p_HAUPT_FLAG,
			RCH_FLAG = p_RCH_FLAG,
			MAIL_FLAG = p_MAIL_FLAG,
			TEL = p_TEL,
			HANDY = p_HANDY,
			FAX = p_FAX,
			TLX = p_TLX,
			EMAIL = p_EMAIL,
			WEB = p_WEB
	where	PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_PERSADR
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	PERSADR.PERS_ID%TYPE,
	p_ADR_TYP	IN	PERSADR.ADR_TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			ANS,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			STA_ID,
			HAUPT_FLAG,
			RCH_FLAG,
			MAIL_FLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	PERSADR
	where	PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_PERSADR
(
	p_PERS_ID	IN	PERSADR.PERS_ID%TYPE,
	p_ADR_TYP	IN	PERSADR.ADR_TYP%TYPE
)
AS
BEGIN
	delete from PERSADR
	where  PERS_ID = p_PERS_ID AND ADR_TYP = p_ADR_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_PERSADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			ANS,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			STA_ID,
			HAUPT_FLAG,
			RCH_FLAG,
			MAIL_FLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	PERSADR;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_PERSADR_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	PERSADR.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			ANS,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			STA_ID,
			HAUPT_FLAG,
			RCH_FLAG,
			MAIL_FLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	PERSADR
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_PERSADR_ByFK_LAND_ID
(
	p_cur	OUT	Types.cursor_type,
	p_LAND_ID	IN	PERSADR.LAND_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ADR_TYP,
			ANS,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			STA_ID,
			HAUPT_FLAG,
			RCH_FLAG,
			MAIL_FLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	PERSADR
	where	LAND_ID = p_LAND_ID;
END;

--[End of Stored Procedure for table: PERSADR]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: PERSONEN]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_PERSONEN
(
	p_PERS_ID	IN	PERSONEN.PERS_ID%TYPE,
	p_PERS_TYP	IN	PERSONEN.PERS_TYP%TYPE,
	p_NAME	IN	PERSONEN.NAME%TYPE,
	p_S_ID	IN	PERSONEN.S_ID%TYPE,
	p_STA_ID	IN	PERSONEN.STA_ID%TYPE,
	p_TEXTID	IN	PERSONEN.TEXTID%TYPE
)
AS
BEGIN
	insert into PERSONEN
	(
		PERS_ID,
		PERS_TYP,
		NAME,
		S_ID,
		STA_ID,
		TEXTID
	)
	values
	(
		p_PERS_ID,
		p_PERS_TYP,
		p_NAME,
		p_S_ID,
		p_STA_ID,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_PERSONEN
(
	p_PERS_ID	IN	PERSONEN.PERS_ID%TYPE,
	p_PERS_TYP	IN	PERSONEN.PERS_TYP%TYPE,
	p_NAME	IN	PERSONEN.NAME%TYPE,
	p_S_ID	IN	PERSONEN.S_ID%TYPE,
	p_STA_ID	IN	PERSONEN.STA_ID%TYPE,
	p_TEXTID	IN	PERSONEN.TEXTID%TYPE
)
AS
BEGIN
	update	PERSONEN
		set	PERS_TYP = p_PERS_TYP,
			NAME = p_NAME,
			S_ID = p_S_ID,
			STA_ID = p_STA_ID,
			TEXTID = p_TEXTID
	where	PERS_ID = p_PERS_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_PERSONEN
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	PERSONEN.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			PERS_TYP,
			NAME,
			S_ID,
			STA_ID,
			TEXTID
	from	PERSONEN
	where	PERS_ID = p_PERS_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_PERSONEN
(
	p_PERS_ID	IN	PERSONEN.PERS_ID%TYPE
)
AS
BEGIN
	delete from PERSONEN
	where  PERS_ID = p_PERS_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_PERSONEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			PERS_TYP,
			NAME,
			S_ID,
			STA_ID,
			TEXTID
	from	PERSONEN;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_PERSONEN_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	PERSONEN.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			PERS_TYP,
			NAME,
			S_ID,
			STA_ID,
			TEXTID
	from	PERSONEN
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: PERSONEN]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: PREIS]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_PREIS
(
	p_PRE_ID	IN	PREIS.PRE_ID%TYPE,
	p_APR	IN	PREIS.APR%TYPE,
	p_EPR	IN	PREIS.EPR%TYPE,
	p_VPR	IN	PREIS.VPR%TYPE,
	p_GLT	IN	PREIS.GLT%TYPE,
	p_WHR_ID	IN	PREIS.WHR_ID%TYPE,
	p_KBST	IN	PREIS.KBST%TYPE,
	p_KAR_ID	IN	PREIS.KAR_ID%TYPE,
	p_DLTT_ID	IN	PREIS.DLTT_ID%TYPE,
	p_KAT_ID	IN	PREIS.KAT_ID%TYPE,
	p_RKR_ID	IN	PREIS.RKR_ID%TYPE,
	p_DLA_ID	IN	PREIS.DLA_ID%TYPE,
	p_ARR_ID	IN	PREIS.ARR_ID%TYPE,
	p_DL_ID	IN	PREIS.DL_ID%TYPE,
	p_EXT_ID	IN	PREIS.EXT_ID%TYPE,
	p_DL_VONDAT	IN	PREIS.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	PREIS.DL_BISDAT%TYPE,
	p_KONT_ID	IN	PREIS.KONT_ID%TYPE,
	p_STA_ID	IN	PREIS.STA_ID%TYPE,
	p_TEXTID	IN	PREIS.TEXTID%TYPE,
	p_HISTORY	IN	PREIS.HISTORY%TYPE,
	p_SAI_ID	IN	PREIS.SAI_ID%TYPE,
	p_UNIT_TYP	IN	PREIS.UNIT_TYP%TYPE,
	p_UNIT_VON	IN	PREIS.UNIT_VON%TYPE,
	p_UNIT_BIS	IN	PREIS.UNIT_BIS%TYPE,
	p_DAU	IN	PREIS.DAU%TYPE,
	p_DAU_VON	IN	PREIS.DAU_VON%TYPE,
	p_DAU_BIS	IN	PREIS.DAU_BIS%TYPE
)
AS
BEGIN
	insert into PREIS
	(
		PRE_ID,
		APR,
		EPR,
		VPR,
		GLT,
		WHR_ID,
		KBST,
		KAR_ID,
		DLTT_ID,
		KAT_ID,
		RKR_ID,
		DLA_ID,
		ARR_ID,
		DL_ID,
		EXT_ID,
		DL_VONDAT,
		DL_BISDAT,
		KONT_ID,
		STA_ID,
		TEXTID,
		HISTORY,
		SAI_ID,
		UNIT_TYP,
		UNIT_VON,
		UNIT_BIS,
		DAU,
		DAU_VON,
		DAU_BIS
	)
	values
	(
		p_PRE_ID,
		p_APR,
		p_EPR,
		p_VPR,
		p_GLT,
		p_WHR_ID,
		p_KBST,
		p_KAR_ID,
		p_DLTT_ID,
		p_KAT_ID,
		p_RKR_ID,
		p_DLA_ID,
		p_ARR_ID,
		p_DL_ID,
		p_EXT_ID,
		p_DL_VONDAT,
		p_DL_BISDAT,
		p_KONT_ID,
		p_STA_ID,
		p_TEXTID,
		p_HISTORY,
		p_SAI_ID,
		p_UNIT_TYP,
		p_UNIT_VON,
		p_UNIT_BIS,
		p_DAU,
		p_DAU_VON,
		p_DAU_BIS
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_PREIS
(
	p_PRE_ID	IN	PREIS.PRE_ID%TYPE,
	p_APR	IN	PREIS.APR%TYPE,
	p_EPR	IN	PREIS.EPR%TYPE,
	p_VPR	IN	PREIS.VPR%TYPE,
	p_GLT	IN	PREIS.GLT%TYPE,
	p_WHR_ID	IN	PREIS.WHR_ID%TYPE,
	p_KBST	IN	PREIS.KBST%TYPE,
	p_KAR_ID	IN	PREIS.KAR_ID%TYPE,
	p_DLTT_ID	IN	PREIS.DLTT_ID%TYPE,
	p_KAT_ID	IN	PREIS.KAT_ID%TYPE,
	p_RKR_ID	IN	PREIS.RKR_ID%TYPE,
	p_DLA_ID	IN	PREIS.DLA_ID%TYPE,
	p_ARR_ID	IN	PREIS.ARR_ID%TYPE,
	p_DL_ID	IN	PREIS.DL_ID%TYPE,
	p_EXT_ID	IN	PREIS.EXT_ID%TYPE,
	p_DL_VONDAT	IN	PREIS.DL_VONDAT%TYPE,
	p_DL_BISDAT	IN	PREIS.DL_BISDAT%TYPE,
	p_KONT_ID	IN	PREIS.KONT_ID%TYPE,
	p_STA_ID	IN	PREIS.STA_ID%TYPE,
	p_TEXTID	IN	PREIS.TEXTID%TYPE,
	p_HISTORY	IN	PREIS.HISTORY%TYPE,
	p_SAI_ID	IN	PREIS.SAI_ID%TYPE,
	p_UNIT_TYP	IN	PREIS.UNIT_TYP%TYPE,
	p_UNIT_VON	IN	PREIS.UNIT_VON%TYPE,
	p_UNIT_BIS	IN	PREIS.UNIT_BIS%TYPE,
	p_DAU	IN	PREIS.DAU%TYPE,
	p_DAU_VON	IN	PREIS.DAU_VON%TYPE,
	p_DAU_BIS	IN	PREIS.DAU_BIS%TYPE
)
AS
BEGIN
	update	PREIS
		set	APR = p_APR,
			EPR = p_EPR,
			VPR = p_VPR,
			GLT = p_GLT,
			WHR_ID = p_WHR_ID,
			KBST = p_KBST,
			KAR_ID = p_KAR_ID,
			DLTT_ID = p_DLTT_ID,
			KAT_ID = p_KAT_ID,
			RKR_ID = p_RKR_ID,
			DLA_ID = p_DLA_ID,
			ARR_ID = p_ARR_ID,
			DL_ID = p_DL_ID,
			EXT_ID = p_EXT_ID,
			DL_VONDAT = p_DL_VONDAT,
			DL_BISDAT = p_DL_BISDAT,
			KONT_ID = p_KONT_ID,
			STA_ID = p_STA_ID,
			TEXTID = p_TEXTID,
			HISTORY = p_HISTORY,
			SAI_ID = p_SAI_ID,
			UNIT_TYP = p_UNIT_TYP,
			UNIT_VON = p_UNIT_VON,
			UNIT_BIS = p_UNIT_BIS,
			DAU = p_DAU,
			DAU_VON = p_DAU_VON,
			DAU_BIS = p_DAU_BIS
	where	PRE_ID = p_PRE_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_PREIS
(
	p_cur	OUT	Types.cursor_type,
	p_PRE_ID	IN	PREIS.PRE_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	PRE_ID = p_PRE_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_PREIS
(
	p_PRE_ID	IN	PREIS.PRE_ID%TYPE
)
AS
BEGIN
	delete from PREIS
	where  PRE_ID = p_PRE_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_PREIS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_PREIS_ByFK_WHR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	PREIS.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	WHR_ID = p_WHR_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_KBST
(
	p_cur	OUT	Types.cursor_type,
	p_KBST	IN	PREIS.KBST%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	KBST = p_KBST;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_KAR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAR_ID	IN	PREIS.KAR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	KAR_ID = p_KAR_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_DLTT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLTT_ID	IN	PREIS.DLTT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	DLTT_ID = p_DLTT_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	PREIS.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_RKR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_RKR_ID	IN	PREIS.RKR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	RKR_ID = p_RKR_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_DLA_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLA_ID	IN	PREIS.DLA_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	DLA_ID = p_DLA_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_ARR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_ARR_ID	IN	PREIS.ARR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	ARR_ID = p_ARR_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	PREIS.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_KONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KONT_ID	IN	PREIS.KONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	KONT_ID = p_KONT_ID;
END;

create or replace PROCEDURE tdb_READALL_PREIS_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	PREIS.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRE_ID,
			APR,
			EPR,
			VPR,
			GLT,
			WHR_ID,
			KBST,
			KAR_ID,
			DLTT_ID,
			KAT_ID,
			RKR_ID,
			DLA_ID,
			ARR_ID,
			DL_ID,
			EXT_ID,
			DL_VONDAT,
			DL_BISDAT,
			KONT_ID,
			STA_ID,
			TEXTID,
			HISTORY,
			SAI_ID,
			UNIT_TYP,
			UNIT_VON,
			UNIT_BIS,
			DAU,
			DAU_VON,
			DAU_BIS
	from	PREIS
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: PREIS]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: PROGRAMM]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_PROGRAMM
(
	p_PRG_ID	IN	PROGRAMM.PRG_ID%TYPE,
	p_CODE	IN	PROGRAMM.CODE%TYPE,
	p_BEZ_ID	IN	PROGRAMM.BEZ_ID%TYPE,
	p_TEXTID	IN	PROGRAMM.TEXTID%TYPE,
	p_SAI_ID	IN	PROGRAMM.SAI_ID%TYPE
)
AS
BEGIN
	insert into PROGRAMM
	(
		PRG_ID,
		CODE,
		BEZ_ID,
		TEXTID,
		SAI_ID
	)
	values
	(
		p_PRG_ID,
		p_CODE,
		p_BEZ_ID,
		p_TEXTID,
		p_SAI_ID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_PROGRAMM
(
	p_PRG_ID	IN	PROGRAMM.PRG_ID%TYPE,
	p_CODE	IN	PROGRAMM.CODE%TYPE,
	p_BEZ_ID	IN	PROGRAMM.BEZ_ID%TYPE,
	p_TEXTID	IN	PROGRAMM.TEXTID%TYPE,
	p_SAI_ID	IN	PROGRAMM.SAI_ID%TYPE
)
AS
BEGIN
	update	PROGRAMM
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID,
			SAI_ID = p_SAI_ID
	where	PRG_ID = p_PRG_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_PROGRAMM
(
	p_cur	OUT	Types.cursor_type,
	p_PRG_ID	IN	PROGRAMM.PRG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID
	from	PROGRAMM
	where	PRG_ID = p_PRG_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_PROGRAMM
(
	p_PRG_ID	IN	PROGRAMM.PRG_ID%TYPE
)
AS
BEGIN
	delete from PROGRAMM
	where  PRG_ID = p_PRG_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_PROGRAMM
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID
	from	PROGRAMM;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_PROGRAMM_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	PROGRAMM.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			CODE,
			BEZ_ID,
			TEXTID,
			SAI_ID
	from	PROGRAMM
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: PROGRAMM]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: REGIONS]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_REGIONS
(
	p_HOST_ID	IN	REGIONS.HOST_ID%TYPE,
	p_H_DLT_ID	IN	REGIONS.H_DLT_ID%TYPE,
	p_DLT_ID	IN	REGIONS.DLT_ID%TYPE,
	p_FOLGE	IN	REGIONS.FOLGE%TYPE,
	p_STUFE	IN	REGIONS.STUFE%TYPE,
	p_NUMMER	IN	REGIONS.NUMMER%TYPE
)
AS
BEGIN
	insert into REGIONS
	(
		HOST_ID,
		H_DLT_ID,
		DLT_ID,
		FOLGE,
		STUFE,
		NUMMER
	)
	values
	(
		p_HOST_ID,
		p_H_DLT_ID,
		p_DLT_ID,
		p_FOLGE,
		p_STUFE,
		p_NUMMER
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_REGIONS
(
	p_HOST_ID	IN	REGIONS.HOST_ID%TYPE,
	p_H_DLT_ID	IN	REGIONS.H_DLT_ID%TYPE,
	p_DLT_ID	IN	REGIONS.DLT_ID%TYPE,
	p_FOLGE	IN	REGIONS.FOLGE%TYPE,
	p_STUFE	IN	REGIONS.STUFE%TYPE,
	p_NUMMER	IN	REGIONS.NUMMER%TYPE
)
AS
BEGIN
	update	REGIONS
		set	STUFE = p_STUFE,
			NUMMER = p_NUMMER
	where	HOST_ID = p_HOST_ID AND H_DLT_ID = p_H_DLT_ID AND DLT_ID = p_DLT_ID AND FOLGE = p_FOLGE;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_REGIONS
(
	p_cur	OUT	Types.cursor_type,
	p_HOST_ID	IN	REGIONS.HOST_ID%TYPE,
	p_H_DLT_ID	IN	REGIONS.H_DLT_ID%TYPE,
	p_DLT_ID	IN	REGIONS.DLT_ID%TYPE,
	p_FOLGE	IN	REGIONS.FOLGE%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOST_ID,
			H_DLT_ID,
			DLT_ID,
			FOLGE,
			STUFE,
			NUMMER
	from	REGIONS
	where	HOST_ID = p_HOST_ID AND H_DLT_ID = p_H_DLT_ID AND DLT_ID = p_DLT_ID AND FOLGE = p_FOLGE;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_REGIONS
(
	p_HOST_ID	IN	REGIONS.HOST_ID%TYPE,
	p_H_DLT_ID	IN	REGIONS.H_DLT_ID%TYPE,
	p_DLT_ID	IN	REGIONS.DLT_ID%TYPE,
	p_FOLGE	IN	REGIONS.FOLGE%TYPE
)
AS
BEGIN
	delete from REGIONS
	where  HOST_ID = p_HOST_ID AND H_DLT_ID = p_H_DLT_ID AND DLT_ID = p_DLT_ID AND FOLGE = p_FOLGE;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_REGIONS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HOST_ID,
			H_DLT_ID,
			DLT_ID,
			FOLGE,
			STUFE,
			NUMMER
	from	REGIONS;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_REGIONS_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	REGIONS.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	HOST_ID,
			H_DLT_ID,
			DLT_ID,
			FOLGE,
			STUFE,
			NUMMER
	from	REGIONS
	where	DLT_ID = p_DLT_ID;
END;

--[End of Stored Procedure for table: REGIONS]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: REISENDER]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_REISENDER
(
	p_PERS_ID	IN	REISENDER.PERS_ID%TYPE,
	p_VOR	IN	REISENDER.VOR%TYPE,
	p_RKR_ID	IN	REISENDER.RKR_ID%TYPE,
	p_SEX	IN	REISENDER.SEX%TYPE,
	p_MUTTERS_ID	IN	REISENDER.MUTTERS_ID%TYPE,
	p_AGE	IN	REISENDER.AGE%TYPE,
	p_PASSNR	IN	REISENDER.PASSNR%TYPE,
	p_ATTR1	IN	REISENDER.ATTR1%TYPE,
	p_ATTR2	IN	REISENDER.ATTR2%TYPE,
	p_TEXTID	IN	REISENDER.TEXTID%TYPE
)
AS
BEGIN
	insert into REISENDER
	(
		PERS_ID,
		VOR,
		RKR_ID,
		SEX,
		MUTTERS_ID,
		AGE,
		PASSNR,
		ATTR1,
		ATTR2,
		TEXTID
	)
	values
	(
		p_PERS_ID,
		p_VOR,
		p_RKR_ID,
		p_SEX,
		p_MUTTERS_ID,
		p_AGE,
		p_PASSNR,
		p_ATTR1,
		p_ATTR2,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_REISENDER
(
	p_PERS_ID	IN	REISENDER.PERS_ID%TYPE,
	p_VOR	IN	REISENDER.VOR%TYPE,
	p_RKR_ID	IN	REISENDER.RKR_ID%TYPE,
	p_SEX	IN	REISENDER.SEX%TYPE,
	p_MUTTERS_ID	IN	REISENDER.MUTTERS_ID%TYPE,
	p_AGE	IN	REISENDER.AGE%TYPE,
	p_PASSNR	IN	REISENDER.PASSNR%TYPE,
	p_ATTR1	IN	REISENDER.ATTR1%TYPE,
	p_ATTR2	IN	REISENDER.ATTR2%TYPE,
	p_TEXTID	IN	REISENDER.TEXTID%TYPE
)
AS
BEGIN
	update	REISENDER
		set	VOR = p_VOR,
			RKR_ID = p_RKR_ID,
			SEX = p_SEX,
			MUTTERS_ID = p_MUTTERS_ID,
			AGE = p_AGE,
			PASSNR = p_PASSNR,
			ATTR1 = p_ATTR1,
			ATTR2 = p_ATTR2,
			TEXTID = p_TEXTID
	where	PERS_ID = p_PERS_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_REISENDER
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	REISENDER.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			RKR_ID,
			SEX,
			MUTTERS_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			TEXTID
	from	REISENDER
	where	PERS_ID = p_PERS_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_REISENDER
(
	p_PERS_ID	IN	REISENDER.PERS_ID%TYPE
)
AS
BEGIN
	delete from REISENDER
	where  PERS_ID = p_PERS_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_REISENDER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			RKR_ID,
			SEX,
			MUTTERS_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			TEXTID
	from	REISENDER;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_REISENDER_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	REISENDER.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			RKR_ID,
			SEX,
			MUTTERS_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			TEXTID
	from	REISENDER
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_REISENDER_ByFK_RKR_ID
(
	p_cur	OUT	Types.cursor_type,
	p_RKR_ID	IN	REISENDER.RKR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			RKR_ID,
			SEX,
			MUTTERS_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			TEXTID
	from	REISENDER
	where	RKR_ID = p_RKR_ID;
END;

create or replace PROCEDURE tdb_READALL_REISENDER_ByFK_MUTTERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_MUTTERS_ID	IN	REISENDER.MUTTERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			RKR_ID,
			SEX,
			MUTTERS_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			TEXTID
	from	REISENDER
	where	MUTTERS_ID = p_MUTTERS_ID;
END;

--[End of Stored Procedure for table: REISENDER]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: REISENDER_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_REISENDER_TYP
(
	p_RKR_ID	IN	REISENDER_TYP.RKR_ID%TYPE,
	p_DLNCODE	IN	REISENDER_TYP.DLNCODE%TYPE,
	p_BEZ_ID	IN	REISENDER_TYP.BEZ_ID%TYPE,
	p_VONALTER	IN	REISENDER_TYP.VONALTER%TYPE,
	p_BISALTER	IN	REISENDER_TYP.BISALTER%TYPE,
	p_TEXTID	IN	REISENDER_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into REISENDER_TYP
	(
		RKR_ID,
		DLNCODE,
		BEZ_ID,
		VONALTER,
		BISALTER,
		TEXTID
	)
	values
	(
		p_RKR_ID,
		p_DLNCODE,
		p_BEZ_ID,
		p_VONALTER,
		p_BISALTER,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_REISENDER_TYP
(
	p_RKR_ID	IN	REISENDER_TYP.RKR_ID%TYPE,
	p_DLNCODE	IN	REISENDER_TYP.DLNCODE%TYPE,
	p_BEZ_ID	IN	REISENDER_TYP.BEZ_ID%TYPE,
	p_VONALTER	IN	REISENDER_TYP.VONALTER%TYPE,
	p_BISALTER	IN	REISENDER_TYP.BISALTER%TYPE,
	p_TEXTID	IN	REISENDER_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	REISENDER_TYP
		set	DLNCODE = p_DLNCODE,
			BEZ_ID = p_BEZ_ID,
			VONALTER = p_VONALTER,
			BISALTER = p_BISALTER,
			TEXTID = p_TEXTID
	where	RKR_ID = p_RKR_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_REISENDER_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_RKR_ID	IN	REISENDER_TYP.RKR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	RKR_ID,
			DLNCODE,
			BEZ_ID,
			VONALTER,
			BISALTER,
			TEXTID
	from	REISENDER_TYP
	where	RKR_ID = p_RKR_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_REISENDER_TYP
(
	p_RKR_ID	IN	REISENDER_TYP.RKR_ID%TYPE
)
AS
BEGIN
	delete from REISENDER_TYP
	where  RKR_ID = p_RKR_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_REISENDER_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	RKR_ID,
			DLNCODE,
			BEZ_ID,
			VONALTER,
			BISALTER,
			TEXTID
	from	REISENDER_TYP;
END;

--[End of Stored Procedure for table: REISENDER_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: RESERVATION]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_RESERVATION
(
	p_PERS_ID	IN	RESERVATION.PERS_ID%TYPE,
	p_DLG_ID	IN	RESERVATION.DLG_ID%TYPE,
	p_DL_ID	IN	RESERVATION.DL_ID%TYPE,
	p_TEIL	IN	RESERVATION.TEIL%TYPE,
	p_DLT_ID	IN	RESERVATION.DLT_ID%TYPE,
	p_TYP_ID	IN	RESERVATION.TYP_ID%TYPE,
	p_BID	IN	RESERVATION.BID%TYPE,
	p_KONT_ID	IN	RESERVATION.KONT_ID%TYPE,
	p_KAT_ID	IN	RESERVATION.KAT_ID%TYPE,
	p_K_KON	IN	RESERVATION.K_KON%TYPE,
	p_B_KON	IN	RESERVATION.B_KON%TYPE,
	p_R_STA	IN	RESERVATION.R_STA%TYPE,
	p_SAI_ID	IN	RESERVATION.SAI_ID%TYPE,
	p_A_ZEIT	IN	RESERVATION.A_ZEIT%TYPE,
	p_E_ZEIT	IN	RESERVATION.E_ZEIT%TYPE,
	p_TEXTID	IN	RESERVATION.TEXTID%TYPE
)
AS
BEGIN
	insert into RESERVATION
	(
		PERS_ID,
		DLG_ID,
		DL_ID,
		TEIL,
		DLT_ID,
		TYP_ID,
		BID,
		KONT_ID,
		KAT_ID,
		K_KON,
		B_KON,
		R_STA,
		SAI_ID,
		A_ZEIT,
		E_ZEIT,
		TEXTID
	)
	values
	(
		p_PERS_ID,
		p_DLG_ID,
		p_DL_ID,
		p_TEIL,
		p_DLT_ID,
		p_TYP_ID,
		p_BID,
		p_KONT_ID,
		p_KAT_ID,
		p_K_KON,
		p_B_KON,
		p_R_STA,
		p_SAI_ID,
		p_A_ZEIT,
		p_E_ZEIT,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_RESERVATION
(
	p_PERS_ID	IN	RESERVATION.PERS_ID%TYPE,
	p_DLG_ID	IN	RESERVATION.DLG_ID%TYPE,
	p_DL_ID	IN	RESERVATION.DL_ID%TYPE,
	p_TEIL	IN	RESERVATION.TEIL%TYPE,
	p_DLT_ID	IN	RESERVATION.DLT_ID%TYPE,
	p_TYP_ID	IN	RESERVATION.TYP_ID%TYPE,
	p_BID	IN	RESERVATION.BID%TYPE,
	p_KONT_ID	IN	RESERVATION.KONT_ID%TYPE,
	p_KAT_ID	IN	RESERVATION.KAT_ID%TYPE,
	p_K_KON	IN	RESERVATION.K_KON%TYPE,
	p_B_KON	IN	RESERVATION.B_KON%TYPE,
	p_R_STA	IN	RESERVATION.R_STA%TYPE,
	p_SAI_ID	IN	RESERVATION.SAI_ID%TYPE,
	p_A_ZEIT	IN	RESERVATION.A_ZEIT%TYPE,
	p_E_ZEIT	IN	RESERVATION.E_ZEIT%TYPE,
	p_TEXTID	IN	RESERVATION.TEXTID%TYPE
)
AS
BEGIN
	update	RESERVATION
		set	DLG_ID = p_DLG_ID,
			DLT_ID = p_DLT_ID,
			TYP_ID = p_TYP_ID,
			KONT_ID = p_KONT_ID,
			KAT_ID = p_KAT_ID,
			K_KON = p_K_KON,
			B_KON = p_B_KON,
			R_STA = p_R_STA,
			SAI_ID = p_SAI_ID,
			A_ZEIT = p_A_ZEIT,
			E_ZEIT = p_E_ZEIT,
			TEXTID = p_TEXTID
	where	PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_RESERVATION
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	RESERVATION.PERS_ID%TYPE,
	p_DL_ID	IN	RESERVATION.DL_ID%TYPE,
	p_TEIL	IN	RESERVATION.TEIL%TYPE,
	p_BID	IN	RESERVATION.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_RESERVATION
(
	p_PERS_ID	IN	RESERVATION.PERS_ID%TYPE,
	p_DL_ID	IN	RESERVATION.DL_ID%TYPE,
	p_TEIL	IN	RESERVATION.TEIL%TYPE,
	p_BID	IN	RESERVATION.BID%TYPE
)
AS
BEGIN
	delete from RESERVATION
	where  PERS_ID = p_PERS_ID AND DL_ID = p_DL_ID AND TEIL = p_TEIL AND BID = p_BID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_RESERVATION
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_PERS_ID
(
	p_cur	OUT	Types.cursor_type,
	p_PERS_ID	IN	RESERVATION.PERS_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	PERS_ID = p_PERS_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_DLG_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLG_ID	IN	RESERVATION.DLG_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	DLG_ID = p_DLG_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_DL_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DL_ID	IN	RESERVATION.DL_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	DL_ID = p_DL_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	RESERVATION.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	DLT_ID = p_DLT_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_TYP_ID
(
	p_cur	OUT	Types.cursor_type,
	p_TYP_ID	IN	RESERVATION.TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	TYP_ID = p_TYP_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_BID
(
	p_cur	OUT	Types.cursor_type,
	p_BID	IN	RESERVATION.BID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	BID = p_BID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_KONT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KONT_ID	IN	RESERVATION.KONT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	KONT_ID = p_KONT_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_KAT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_KAT_ID	IN	RESERVATION.KAT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	KAT_ID = p_KAT_ID;
END;

create or replace PROCEDURE tdb_READALL_RESERVATION_ByFK_SAI_ID
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	RESERVATION.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			A_ZEIT,
			E_ZEIT,
			TEXTID
	from	RESERVATION
	where	SAI_ID = p_SAI_ID;
END;

--[End of Stored Procedure for table: RESERVATION]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: SAISON]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_SAISON
(
	p_SAI_ID	IN	SAISON.SAI_ID%TYPE,
	p_CODE	IN	SAISON.CODE%TYPE,
	p_BEZ_ID	IN	SAISON.BEZ_ID%TYPE,
	p_VON	IN	SAISON.VON%TYPE,
	p_BIS	IN	SAISON.BIS%TYPE,
	p_TEXTID	IN	SAISON.TEXTID%TYPE
)
AS
BEGIN
	insert into SAISON
	(
		SAI_ID,
		CODE,
		BEZ_ID,
		VON,
		BIS,
		TEXTID
	)
	values
	(
		p_SAI_ID,
		p_CODE,
		p_BEZ_ID,
		p_VON,
		p_BIS,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_SAISON
(
	p_SAI_ID	IN	SAISON.SAI_ID%TYPE,
	p_CODE	IN	SAISON.CODE%TYPE,
	p_BEZ_ID	IN	SAISON.BEZ_ID%TYPE,
	p_VON	IN	SAISON.VON%TYPE,
	p_BIS	IN	SAISON.BIS%TYPE,
	p_TEXTID	IN	SAISON.TEXTID%TYPE
)
AS
BEGIN
	update	SAISON
		set	CODE = p_CODE,
			BEZ_ID = p_BEZ_ID,
			VON = p_VON,
			BIS = p_BIS,
			TEXTID = p_TEXTID
	where	SAI_ID = p_SAI_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_SAISON
(
	p_cur	OUT	Types.cursor_type,
	p_SAI_ID	IN	SAISON.SAI_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			CODE,
			BEZ_ID,
			VON,
			BIS,
			TEXTID
	from	SAISON
	where	SAI_ID = p_SAI_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_SAISON
(
	p_SAI_ID	IN	SAISON.SAI_ID%TYPE
)
AS
BEGIN
	delete from SAISON
	where  SAI_ID = p_SAI_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_SAISON
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			CODE,
			BEZ_ID,
			VON,
			BIS,
			TEXTID
	from	SAISON;
END;

--[End of Stored Procedure for table: SAISON]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: SPRACHEN]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_SPRACHEN
(
	p_S_ID	IN	SPRACHEN.S_ID%TYPE,
	p_BEZ_ID	IN	SPRACHEN.BEZ_ID%TYPE,
	p_DIALOG	IN	SPRACHEN.DIALOG%TYPE,
	p_SYSBEZ	IN	SPRACHEN.SYSBEZ%TYPE,
	p_OUTPUT	IN	SPRACHEN.OUTPUT%TYPE,
	p_GUI	IN	SPRACHEN.GUI%TYPE
)
AS
BEGIN
	insert into SPRACHEN
	(
		S_ID,
		BEZ_ID,
		DIALOG,
		SYSBEZ,
		OUTPUT,
		GUI
	)
	values
	(
		p_S_ID,
		p_BEZ_ID,
		p_DIALOG,
		p_SYSBEZ,
		p_OUTPUT,
		p_GUI
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_SPRACHEN
(
	p_S_ID	IN	SPRACHEN.S_ID%TYPE,
	p_BEZ_ID	IN	SPRACHEN.BEZ_ID%TYPE,
	p_DIALOG	IN	SPRACHEN.DIALOG%TYPE,
	p_SYSBEZ	IN	SPRACHEN.SYSBEZ%TYPE,
	p_OUTPUT	IN	SPRACHEN.OUTPUT%TYPE,
	p_GUI	IN	SPRACHEN.GUI%TYPE
)
AS
BEGIN
	update	SPRACHEN
		set	BEZ_ID = p_BEZ_ID,
			DIALOG = p_DIALOG,
			SYSBEZ = p_SYSBEZ,
			OUTPUT = p_OUTPUT,
			GUI = p_GUI
	where	S_ID = p_S_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_SPRACHEN
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	SPRACHEN.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ_ID,
			DIALOG,
			SYSBEZ,
			OUTPUT,
			GUI
	from	SPRACHEN
	where	S_ID = p_S_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_SPRACHEN
(
	p_S_ID	IN	SPRACHEN.S_ID%TYPE
)
AS
BEGIN
	delete from SPRACHEN
	where  S_ID = p_S_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_SPRACHEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ_ID,
			DIALOG,
			SYSBEZ,
			OUTPUT,
			GUI
	from	SPRACHEN;
END;

--[End of Stored Procedure for table: SPRACHEN]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: STATUS_WERTE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_STATUS_WERTE
(
	p_STA_ID	IN	STATUS_WERTE.STA_ID%TYPE,
	p_ABK	IN	STATUS_WERTE.ABK%TYPE,
	p_STA	IN	STATUS_WERTE.STA%TYPE,
	p_BEZ_ID	IN	STATUS_WERTE.BEZ_ID%TYPE,
	p_KOND	IN	STATUS_WERTE.KOND%TYPE,
	p_TYP	IN	STATUS_WERTE.TYP%TYPE
)
AS
BEGIN
	insert into STATUS_WERTE
	(
		STA_ID,
		ABK,
		STA,
		BEZ_ID,
		KOND,
		TYP
	)
	values
	(
		p_STA_ID,
		p_ABK,
		p_STA,
		p_BEZ_ID,
		p_KOND,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_STATUS_WERTE
(
	p_STA_ID	IN	STATUS_WERTE.STA_ID%TYPE,
	p_ABK	IN	STATUS_WERTE.ABK%TYPE,
	p_STA	IN	STATUS_WERTE.STA%TYPE,
	p_BEZ_ID	IN	STATUS_WERTE.BEZ_ID%TYPE,
	p_KOND	IN	STATUS_WERTE.KOND%TYPE,
	p_TYP	IN	STATUS_WERTE.TYP%TYPE
)
AS
BEGIN
	update	STATUS_WERTE
		set	ABK = p_ABK,
			STA = p_STA,
			BEZ_ID = p_BEZ_ID,
			KOND = p_KOND
	where	STA_ID = p_STA_ID AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_STATUS_WERTE
(
	p_cur	OUT	Types.cursor_type,
	p_STA_ID	IN	STATUS_WERTE.STA_ID%TYPE,
	p_TYP	IN	STATUS_WERTE.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			ABK,
			STA,
			BEZ_ID,
			KOND,
			TYP
	from	STATUS_WERTE
	where	STA_ID = p_STA_ID AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_STATUS_WERTE
(
	p_STA_ID	IN	STATUS_WERTE.STA_ID%TYPE,
	p_TYP	IN	STATUS_WERTE.TYP%TYPE
)
AS
BEGIN
	delete from STATUS_WERTE
	where  STA_ID = p_STA_ID AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_STATUS_WERTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			ABK,
			STA,
			BEZ_ID,
			KOND,
			TYP
	from	STATUS_WERTE;
END;

--[End of Stored Procedure for table: STATUS_WERTE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: TEXTE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_TEXTE
(
	p_TEXTID	IN	TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TEXTE.TEXTNR%TYPE,
	p_TEXT	IN	TEXTE.TEXT%TYPE,
	p_TYP	IN	TEXTE.TYP%TYPE
)
AS
BEGIN
	insert into TEXTE
	(
		TEXTID,
		S_ID,
		TEXTNR,
		TEXT,
		TYP
	)
	values
	(
		p_TEXTID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_TEXTE
(
	p_TEXTID	IN	TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TEXTE.TEXTNR%TYPE,
	p_TEXT	IN	TEXTE.TEXT%TYPE,
	p_TYP	IN	TEXTE.TYP%TYPE
)
AS
BEGIN
	update	TEXTE
		set	TEXT = p_TEXT
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_TEXTE
(
	p_cur	OUT	Types.cursor_type,
	p_TEXTID	IN	TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TEXTE.TEXTNR%TYPE,
	p_TYP	IN	TEXTE.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	TEXTE
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_TEXTE
(
	p_TEXTID	IN	TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TEXTE.TEXTNR%TYPE,
	p_TYP	IN	TEXTE.TYP%TYPE
)
AS
BEGIN
	delete from TEXTE
	where  TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_TEXTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	TEXTE;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_TEXTE_ByFK_S_ID
(
	p_cur	OUT	Types.cursor_type,
	p_S_ID	IN	TEXTE.S_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	TEXTE
	where	S_ID = p_S_ID;
END;

--[End of Stored Procedure for table: TEXTE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: TMP_BEZEICHNUNG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_TMP_BEZEICHNUNG
(
	p_BEZ_ID	IN	TMP_BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	TMP_BEZEICHNUNG.S_ID%TYPE,
	p_BEZ	IN	TMP_BEZEICHNUNG.BEZ%TYPE,
	p_TYP	IN	TMP_BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	insert into TMP_BEZEICHNUNG
	(
		BEZ_ID,
		S_ID,
		BEZ,
		TYP
	)
	values
	(
		p_BEZ_ID,
		p_S_ID,
		p_BEZ,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_TMP_BEZEICHNUNG
(
	p_BEZ_ID	IN	TMP_BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	TMP_BEZEICHNUNG.S_ID%TYPE,
	p_BEZ	IN	TMP_BEZEICHNUNG.BEZ%TYPE,
	p_TYP	IN	TMP_BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	update	TMP_BEZEICHNUNG
		set	BEZ = p_BEZ
	where	BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_TMP_BEZEICHNUNG
(
	p_cur	OUT	Types.cursor_type,
	p_BEZ_ID	IN	TMP_BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	TMP_BEZEICHNUNG.S_ID%TYPE,
	p_TYP	IN	TMP_BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			S_ID,
			BEZ,
			TYP
	from	TMP_BEZEICHNUNG
	where	BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_TMP_BEZEICHNUNG
(
	p_BEZ_ID	IN	TMP_BEZEICHNUNG.BEZ_ID%TYPE,
	p_S_ID	IN	TMP_BEZEICHNUNG.S_ID%TYPE,
	p_TYP	IN	TMP_BEZEICHNUNG.TYP%TYPE
)
AS
BEGIN
	delete from TMP_BEZEICHNUNG
	where  BEZ_ID = p_BEZ_ID AND S_ID = p_S_ID AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_TMP_BEZEICHNUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BEZ_ID,
			S_ID,
			BEZ,
			TYP
	from	TMP_BEZEICHNUNG;
END;

--[End of Stored Procedure for table: TMP_BEZEICHNUNG]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: TMP_TEXTE]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_TMP_TEXTE
(
	p_TEXTID	IN	TMP_TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TMP_TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TMP_TEXTE.TEXTNR%TYPE,
	p_TEXT	IN	TMP_TEXTE.TEXT%TYPE,
	p_TYP	IN	TMP_TEXTE.TYP%TYPE
)
AS
BEGIN
	insert into TMP_TEXTE
	(
		TEXTID,
		S_ID,
		TEXTNR,
		TEXT,
		TYP
	)
	values
	(
		p_TEXTID,
		p_S_ID,
		p_TEXTNR,
		p_TEXT,
		p_TYP
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_TMP_TEXTE
(
	p_TEXTID	IN	TMP_TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TMP_TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TMP_TEXTE.TEXTNR%TYPE,
	p_TEXT	IN	TMP_TEXTE.TEXT%TYPE,
	p_TYP	IN	TMP_TEXTE.TYP%TYPE
)
AS
BEGIN
	update	TMP_TEXTE
		set	TEXT = p_TEXT
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_TMP_TEXTE
(
	p_cur	OUT	Types.cursor_type,
	p_TEXTID	IN	TMP_TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TMP_TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TMP_TEXTE.TEXTNR%TYPE,
	p_TYP	IN	TMP_TEXTE.TYP%TYPE
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	TMP_TEXTE
	where	TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_TMP_TEXTE
(
	p_TEXTID	IN	TMP_TEXTE.TEXTID%TYPE,
	p_S_ID	IN	TMP_TEXTE.S_ID%TYPE,
	p_TEXTNR	IN	TMP_TEXTE.TEXTNR%TYPE,
	p_TYP	IN	TMP_TEXTE.TYP%TYPE
)
AS
BEGIN
	delete from TMP_TEXTE
	where  TEXTID = p_TEXTID AND S_ID = p_S_ID AND TEXTNR = p_TEXTNR AND TYP = p_TYP;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_TMP_TEXTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			S_ID,
			TEXTNR,
			TEXT,
			TYP
	from	TMP_TEXTE;
END;

--[End of Stored Procedure for table: TMP_TEXTE]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: TRAEGER_DETAIL]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_TRAEGER_DETAIL
(
	p_DLT_ID	IN	TRAEGER_DETAIL.DLT_ID%TYPE,
	p_FIRMA	IN	TRAEGER_DETAIL.FIRMA%TYPE
)
AS
BEGIN
	insert into TRAEGER_DETAIL
	(
		DLT_ID,
		FIRMA
	)
	values
	(
		p_DLT_ID,
		p_FIRMA
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_TRAEGER_DETAIL
(
	p_DLT_ID	IN	TRAEGER_DETAIL.DLT_ID%TYPE,
	p_FIRMA	IN	TRAEGER_DETAIL.FIRMA%TYPE
)
AS
BEGIN
	update	TRAEGER_DETAIL
		set	where	DLT_ID = p_DLT_ID AND FIRMA = p_FIRMA;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_TRAEGER_DETAIL
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	TRAEGER_DETAIL.DLT_ID%TYPE,
	p_FIRMA	IN	TRAEGER_DETAIL.FIRMA%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			FIRMA
	from	TRAEGER_DETAIL
	where	DLT_ID = p_DLT_ID AND FIRMA = p_FIRMA;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_TRAEGER_DETAIL
(
	p_DLT_ID	IN	TRAEGER_DETAIL.DLT_ID%TYPE,
	p_FIRMA	IN	TRAEGER_DETAIL.FIRMA%TYPE
)
AS
BEGIN
	delete from TRAEGER_DETAIL
	where  DLT_ID = p_DLT_ID AND FIRMA = p_FIRMA;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_TRAEGER_DETAIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			FIRMA
	from	TRAEGER_DETAIL;
END;

-- //// Select All Stored Procedure Based On Foreign Key.
create or replace PROCEDURE tdb_READALL_TRAEGER_DETAIL_ByFK_DLT_ID
(
	p_cur	OUT	Types.cursor_type,
	p_DLT_ID	IN	TRAEGER_DETAIL.DLT_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			FIRMA
	from	TRAEGER_DETAIL
	where	DLT_ID = p_DLT_ID;
END;

create or replace PROCEDURE tdb_READALL_TRAEGER_DETAIL_ByFK_FIRMA
(
	p_cur	OUT	Types.cursor_type,
	p_FIRMA	IN	TRAEGER_DETAIL.FIRMA%TYPE
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			FIRMA
	from	TRAEGER_DETAIL
	where	FIRMA = p_FIRMA;
END;

--[End of Stored Procedure for table: TRAEGER_DETAIL]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: TRAEGER_TYP]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_TRAEGER_TYP
(
	p_TYP_ID	IN	TRAEGER_TYP.TYP_ID%TYPE,
	p_BEZ_ID	IN	TRAEGER_TYP.BEZ_ID%TYPE,
	p_H_TYP_ID	IN	TRAEGER_TYP.H_TYP_ID%TYPE,
	p_HOST_TYP	IN	TRAEGER_TYP.HOST_TYP%TYPE,
	p_TEXTID	IN	TRAEGER_TYP.TEXTID%TYPE
)
AS
BEGIN
	insert into TRAEGER_TYP
	(
		TYP_ID,
		BEZ_ID,
		H_TYP_ID,
		HOST_TYP,
		TEXTID
	)
	values
	(
		p_TYP_ID,
		p_BEZ_ID,
		p_H_TYP_ID,
		p_HOST_TYP,
		p_TEXTID
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_TRAEGER_TYP
(
	p_TYP_ID	IN	TRAEGER_TYP.TYP_ID%TYPE,
	p_BEZ_ID	IN	TRAEGER_TYP.BEZ_ID%TYPE,
	p_H_TYP_ID	IN	TRAEGER_TYP.H_TYP_ID%TYPE,
	p_HOST_TYP	IN	TRAEGER_TYP.HOST_TYP%TYPE,
	p_TEXTID	IN	TRAEGER_TYP.TEXTID%TYPE
)
AS
BEGIN
	update	TRAEGER_TYP
		set	BEZ_ID = p_BEZ_ID,
			H_TYP_ID = p_H_TYP_ID,
			HOST_TYP = p_HOST_TYP,
			TEXTID = p_TEXTID
	where	TYP_ID = p_TYP_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_TRAEGER_TYP
(
	p_cur	OUT	Types.cursor_type,
	p_TYP_ID	IN	TRAEGER_TYP.TYP_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	TYP_ID,
			BEZ_ID,
			H_TYP_ID,
			HOST_TYP,
			TEXTID
	from	TRAEGER_TYP
	where	TYP_ID = p_TYP_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_TRAEGER_TYP
(
	p_TYP_ID	IN	TRAEGER_TYP.TYP_ID%TYPE
)
AS
BEGIN
	delete from TRAEGER_TYP
	where  TYP_ID = p_TYP_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_TRAEGER_TYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TYP_ID,
			BEZ_ID,
			H_TYP_ID,
			HOST_TYP,
			TEXTID
	from	TRAEGER_TYP;
END;

--[End of Stored Procedure for table: TRAEGER_TYP]

--===============================================================
--===============================================================
--[Stored Procedure generated for table: WAEHRUNG]

-- //// Insert Stored Procedure.
create or replace PROCEDURE tdb_INSERT_WAEHRUNG
(
	p_WHR_ID	IN	WAEHRUNG.WHR_ID%TYPE,
	p_BEZ_ID	IN	WAEHRUNG.BEZ_ID%TYPE,
	p_TEXTID	IN	WAEHRUNG.TEXTID%TYPE,
	p_STATUS	IN	WAEHRUNG.STATUS%TYPE,
	p_KRZL	IN	WAEHRUNG.KRZL%TYPE
)
AS
BEGIN
	insert into WAEHRUNG
	(
		WHR_ID,
		BEZ_ID,
		TEXTID,
		STATUS,
		KRZL
	)
	values
	(
		p_WHR_ID,
		p_BEZ_ID,
		p_TEXTID,
		p_STATUS,
		p_KRZL
	);
END;

-- //// Update Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_UPDATE_WAEHRUNG
(
	p_WHR_ID	IN	WAEHRUNG.WHR_ID%TYPE,
	p_BEZ_ID	IN	WAEHRUNG.BEZ_ID%TYPE,
	p_TEXTID	IN	WAEHRUNG.TEXTID%TYPE,
	p_STATUS	IN	WAEHRUNG.STATUS%TYPE,
	p_KRZL	IN	WAEHRUNG.KRZL%TYPE
)
AS
BEGIN
	update	WAEHRUNG
		set	BEZ_ID = p_BEZ_ID,
			TEXTID = p_TEXTID,
			STATUS = p_STATUS,
			KRZL = p_KRZL
	where	WHR_ID = p_WHR_ID;
END;

-- //// Select Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_READ_WAEHRUNG
(
	p_cur	OUT	Types.cursor_type,
	p_WHR_ID	IN	WAEHRUNG.WHR_ID%TYPE
)
AS
BEGIN
	open p_cur for
	select	WHR_ID,
			BEZ_ID,
			TEXTID,
			STATUS,
			KRZL
	from	WAEHRUNG
	where	WHR_ID = p_WHR_ID;
END;

-- //// Delete Stored Procedure Based On Primary Key.
create or replace PROCEDURE tdb_DELETE_WAEHRUNG
(
	p_WHR_ID	IN	WAEHRUNG.WHR_ID%TYPE
)
AS
BEGIN
	delete from WAEHRUNG
	where  WHR_ID = p_WHR_ID;
END;

-- //// Select All Stored Procedure.
create or replace PROCEDURE tdb_READALL_WAEHRUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	WHR_ID,
			BEZ_ID,
			TEXTID,
			STATUS,
			KRZL
	from	WAEHRUNG;
END;

--[End of Stored Procedure for table: WAEHRUNG]

--===============================================================
create or replace PROCEDURE tdb_READALL_AKT_DETAIL_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			Z_FLAG,
			AKT_ID,
			ORD,
			A_FLAG,
			M_FLAG,
			A_TYP_ID,
			PROZ
	from	AKT_DETAIL_VIEW;
END;

create or replace PROCEDURE tdb_READALL_AKT_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ID,
			BEZ,
			UBEZ,
			ORD,
			SPR
	from	AKT_VIEW;
END;

create or replace PROCEDURE tdb_READALL_AMEXCOSYNCHTEAM
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			BID,
			LASTNAME,
			FIRSTNAME,
			SEX,
			ANREDE,
			TEAMREF,
			SHAREWITH,
			COMPANY,
			CONFIRMATIONTO,
			TELEPHONE,
			FAX,
			EMAIL,
			CCTYPE,
			CCHOLDER,
			CCNUMBER,
			CCVALID,
			COMMENTS,
			COMMENTSID
	from	AMEXCOSYNCHTEAM;
END;

create or replace PROCEDURE tdb_READALL_AMEXCOTEXTE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TEXTID,
			TYP,
			S_ID,
			TEXT,
			SHAREWITH,
			COMPANY,
			CONFIRMATIONTO,
			TELEPHONE,
			FAX,
			EMAIL,
			CCTYPE,
			CCHOLDER,
			CCNUMBER,
			CCVALID,
			TEAMREF
	from	AMEXCOTEXTE;
END;

create or replace PROCEDURE tdb_READALL_ARR_DLG_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID,
			DL_ID,
			ORD,
			A_ZEIT,
			RES_F,
			BEZ,
			BEZ1,
			S_ID,
			DTG_ZEIT
	from	ARR_DLG_VIEW;
END;

create or replace PROCEDURE tdb_READALL_ARR_DL_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			A_DAT,
			DLG_ID,
			BEZ,
			A_ZEIT,
			TEIL,
			PRIO,
			AKT_ID,
			S_ID
	from	ARR_DL_VIEW;
END;

create or replace PROCEDURE tdb_READALL_ARR_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			BEZ,
			S_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	ARR_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DLA_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ,
			S_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	DLA_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DLG_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			H_DL_ID,
			DLA_ID,
			BEZ,
			S_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID
	from	DLG_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DLN_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLN_ID,
			NAME,
			VOR,
			ORT,
			S_ID,
			STA_ID,
			TEXTID,
			RKR_ID,
			SEX,
			EXT_TXT,
			LAND_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2
	from	DLN_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DLT_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			BEZ,
			S_ID,
			KAT_ID,
			H_DLT_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE
	from	DLT_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DL_DLG_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			START_ZEIT,
			DL_ID,
			BEZ,
			A_ZEIT,
			E_ZEIT,
			ORD,
			RES_F,
			S_ID
	from	DL_DLG_VIEW;
END;

create or replace PROCEDURE tdb_READALL_DTG_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			BEZ,
			S_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	DTG_VIEW;
END;

create or replace PROCEDURE tdb_READALL_GRA_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			BEZ,
			DLT_ID,
			DLTBEZ,
			TEXTID,
			S_ID
	from	GRA_VIEW;
END;

create or replace PROCEDURE tdb_READALL_KAR_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAR_ID,
			BEZ,
			S_ID,
			TEXTID
	from	KAR_VIEW;
END;

create or replace PROCEDURE tdb_READALL_KAT_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			BEZ,
			S_ID,
			H_KAT_ID,
			TYP_ID,
			GA,
			TEXTID
	from	KAT_VIEW;
END;

create or replace PROCEDURE tdb_READALL_KONCHECK_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			ANZ,
			BUSY
	from	KONCHECK_VIEW;
END;

create or replace PROCEDURE tdb_READALL_KON_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ,
			S_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	KON_VIEW;
END;

create or replace PROCEDURE tdb_READALL_KUNDEN_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KUN_ID,
			NAME,
			ORT,
			S_ID,
			STA_ID,
			TEXTID,
			KANT,
			TEL,
			FAX,
			TLX,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			LAND_ID,
			WHR_ID
	from	KUNDEN_VIEW;
END;

create or replace PROCEDURE tdb_READALL_LAND_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ,
			S_ID,
			KRZL,
			HAUPT_ORT,
			HAUPT_SPR,
			HAUPT_WHR,
			TEXTID,
			VAT
	from	LAND_VIEW;
END;

create or replace PROCEDURE tdb_READALL_MP2000_ARRANGEMENT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			BEZ_ID,
			VON,
			NACH,
			A_ZEIT,
			E_ZEIT,
			SAI_ID,
			PRG_ID
	from	MP2000_ARRANGEMENT;
END;

create or replace PROCEDURE tdb_READALL_MP2000_DIENSTLEISTUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			BEZ_ID,
			VON,
			NACH,
			ZEIT_TYP,
			A_ZEIT,
			E_ZEIT,
			SAI_ID,
			H_DL_ID,
			DLA_ID,
			DLT_ID,
			TYP_ID,
			A_DZEIT,
			E_DZEIT,
			CODE
	from	MP2000_DIENSTLEISTUNG;
END;

create or replace PROCEDURE tdb_READALL_MP2000_KUNDEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			NAME,
			ADR1,
			PLZ,
			ORT,
			LAND,
			SPRACHE,
			CODE,
			WAEHRUNG,
			VERSAND,
			TEXT,
			TEXTID,
			S_ID,
			TEL,
			FAX,
			EMAIL,
			WEB,
			KONTO,
			TYP
	from	MP2000_KUNDEN;
END;

create or replace PROCEDURE tdb_READALL_MP2000_PREIS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LWCHG_ID,
			DLA_RED_ID,
			DLA_RED,
			DLG_RED_ID,
			DLG_RED,
			KONT_RED_ID,
			KONT_RED,
			RED_PRICE,
			KUN_RED_ID,
			KUN_RED,
			KOL_RED_ID,
			KOL_RED,
			BID_RED_ID,
			BID_RED,
			WHR_EXCL,
			VAT_ID,
			VAT_LAND_ID,
			VAT,
			WHR_INKL,
			BID,
			PERS_ID,
			RKR_ID,
			TEIL,
			DLG_ID,
			DL_ID,
			R_STA,
			KAT_ID,
			KONT_ID,
			KID,
			ZEITTYP,
			A_ZEIT,
			E_ZEIT,
			DLA_ID,
			PREIS_ID,
			LOCAL_WHR_ID,
			LOCAL_PREIS,
			LOCAL_COST,
			WHR_LAND_ID,
			WHR_ID,
			WHR_PREIS,
			WHR_COST
	from	MP2000_PREIS;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8C
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			KID,
			DESTNAME,
			DESTFAX,
			SAISON,
			PRICE,
			TEIL,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			EMAIL,
			CONFIRMATIONTO,
			PERS_ID,
			CODE,
			NOTICEID,
			NOTICE,
			CI_DATE,
			CO_DATE,
			DCOMP,
			DFAX,
			DATTN,
			ANGEBOT,
			ANGEBOTTYP,
			ANGEBOTTYP_ID,
			VONORT_ID,
			VONORT,
			NACHORT_ID,
			NACHORT
	from	MP2000_REPORT8C;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8D
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HOTELORT,
			HOTELTEL,
			HOTELFAX,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			COMPANY,
			TEAMREF,
			PERS_ID,
			CODE,
			NOTICEID,
			NOTICE,
			CI_DATE,
			CO_DATE,
			R_STA,
			ANGEBOT,
			ANGEBOTTYP,
			ANGEBOTTYP_ID,
			VONORT_ID,
			VONORT,
			NACHORT_ID,
			FULLCODE,
			NACHORT,
			BUCHUNG,
			BID,
			KID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ
	from	MP2000_REPORT8D;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8E
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			CI_DATE,
			CO_DATE,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			PERS_ID,
			COMPANY,
			TEAMREF,
			NOTICEID,
			NOTICE,
			CODE,
			GRCODE
	from	MP2000_REPORT8E;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8F
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			KID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			COMPANY,
			TEAMREF,
			PERS_ID,
			CODE,
			FULLCODE,
			NOTICEID,
			NOTICE,
			CI_DATE,
			CO_DATE,
			ANGEBOT,
			ANGEBOTTYP,
			ANGEBOTTYP_ID,
			VONORT_ID,
			VONORT,
			NACHORT_ID,
			NACHORT
	from	MP2000_REPORT8F;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8G
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			COMPANY,
			TEAMREF,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			CI_DATE,
			CO_DATE,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			PERS_ID,
			CODE,
			NOTICEID,
			NOTICE,
			BID
	from	MP2000_REPORT8G;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8H
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			CI_DATE,
			CO_DATE,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			PERS_ID,
			CODE,
			R_STA,
			STATUS
	from	MP2000_REPORT8H;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8I
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DESTNAME,
			DESTADR,
			DESTPLZ,
			DESTORT,
			DESTTEL,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			PERS_ID,
			NAME,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			DCOMP,
			DFAX,
			DATTN,
			NOTICEID,
			NOTICE,
			CODE,
			FULLCODE,
			DIENSTLEISTUNG,
			CI_DATE,
			CO_DATE,
			KATEGORY,
			ANGEBOT,
			ANGT,
			ANGEBOTTYP,
			ANGEBOTTYP_ID,
			VONORT_ID,
			VONORT,
			NACHORT_ID,
			NACHORT,
			PRICE,
			PRICETAXED,
			TAX,
			WHR,
			WHR_ID,
			WHR_LAND_ID,
			VAT_LAND_ID,
			BUCHUNG,
			BID,
			KID
	from	MP2000_REPORT8I;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8J
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			KID,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			NAME,
			KATEGORY,
			PERS_ID,
			CODE,
			CI_DATE,
			CO_DATE,
			DIENSTLEISTUNG,
			R_STA,
			KONTINGENT,
			STATUS
	from	MP2000_REPORT8J;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT8K
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			KID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			HOTELTEL,
			HOTELFAX,
			NAME,
			KATEGORY,
			CCTYPE,
			CCNUMBER,
			CCVALID,
			SHAREWITH,
			COMPANY,
			TEAMREF,
			PERS_ID,
			CODE,
			NOTICEID,
			NOTICE,
			CI_DATE,
			CO_DATE,
			R_STA,
			ANGEBOT,
			ANGEBOTTYP,
			ANGEBOTTYP_ID,
			VONORT_ID,
			VONORT,
			NACHORT_ID,
			FULLCODE,
			NACHORT
	from	MP2000_REPORT8K;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT9A
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BUCHUNG,
			BID,
			HOTELID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			KONT_ID,
			KATEGORY,
			KONTINGENT,
			HOSTKONTINGENT,
			HOSTKONT_ID,
			KAT_ID,
			KONT_ANZ,
			KONT_BUSY,
			HOST_ANZ,
			HOST_BUSY,
			NAME,
			PERS_ID,
			CODE,
			CI_DATE,
			CO_DATE
	from	MP2000_REPORT9A;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT9D
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			HOSTKONT_ID,
			BUCHUNG,
			BID,
			KONTINGENT,
			HOSTKONTINGENT,
			KATEGORY,
			HOTELID,
			DESTNAME,
			DESTFAX,
			SAISON,
			HOTELNAME,
			HOTELADR,
			HOTELPLZ,
			HOTELORT,
			KAT_ID,
			NAME,
			PERS_ID,
			CODE,
			HOTELCODE,
			CI_DATE,
			CO_DATE
	from	MP2000_REPORT9D;
END;

create or replace PROCEDURE tdb_READALL_MP2000_REPORT9E
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	FAKT_ZEIT,
			STA_ID,
			BEZ,
			NACHSALDO,
			WHR_EXCL,
			WHR_INKL,
			VAT_ID,
			VAT,
			VATBEZ,
			RST_GEWINN,
			WHR_ID,
			WHRK,
			WHR,
			DEB_ID,
			BID
	from	MP2000_REPORT9E;
END;

create or replace PROCEDURE tdb_READALL_MP2000_SAISON
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			BEZ_ID,
			BEZ,
			CODE,
			VON,
			BIS,
			TEXT,
			S_ID
	from	MP2000_SAISON;
END;

create or replace PROCEDURE tdb_READALL_MPCC_PREFERENCES
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	MPID,
			FULLNAME,
			RESELLER,
			CONTINGENT,
			CORP_CURRENCY,
			EX_COUNTRY,
			DATA_LANG,
			STATUS_IGL,
			LANGUAGES_IGL,
			COUNTRIES_IGL,
			CURRENCIES_IGL,
			TRAVELERTYPE_IGL,
			OVERBOOK_IGL,
			FREECARRIER_IGL
	from	MPCC_PREFERENCES;
END;

create or replace PROCEDURE tdb_READALL_MPV_AKT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ID,
			BEZ,
			UBEZ,
			ORD,
			SPR
	from	MPV_AKT;
END;

create or replace PROCEDURE tdb_READALL_MPV_AKT_DETAIL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			Z_FLAG,
			AKT_ID,
			ORD,
			A_FLAG,
			M_FLAG,
			A_TYP_ID,
			PROZ
	from	MPV_AKT_DETAIL;
END;

create or replace PROCEDURE tdb_READALL_MPV_ANGEBOT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ART_ID,
			BEZ,
			S_ID,
			TEXTID
	from	MPV_ANGEBOT;
END;

create or replace PROCEDURE tdb_READALL_MPV_ARR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			BEZ,
			S_ID,
			A_DAT,
			PRG_ID,
			TEXTID,
			SAI_ID
	from	MPV_ARR;
END;

create or replace PROCEDURE tdb_READALL_MPV_ARR_DL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			A_DAT,
			DLG_ID,
			BEZ,
			A_ZEIT,
			TEIL,
			PRIO,
			AKT_ID,
			S_ID
	from	MPV_ARR_DL;
END;

create or replace PROCEDURE tdb_READALL_MPV_ARR_DLG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			TEIL,
			PRIO,
			DLG_ID,
			DL_ID,
			ORD,
			A_ZEIT,
			RES_F,
			BEZ,
			BEZ1,
			S_ID,
			DTG_ZEIT
	from	MPV_ARR_DLG;
END;

create or replace PROCEDURE tdb_READALL_MPV_BUCHUNG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	D_BID,
			BID,
			REF,
			ARR_ID,
			KID,
			SACH,
			BCHST,
			ANW,
			B_DAT,
			M_DAT,
			MAPO_DAT,
			MAPO_OPT_BST,
			OPT_BST,
			MAPO_OPT_KID,
			OPT_KID,
			STA,
			AST,
			SAI_ID,
			K_ID,
			HISTORY,
			TEXTID
	from	MPV_BUCHUNG;
END;

create or replace PROCEDURE tdb_READALL_MPV_DL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			BEZ,
			S_ID,
			TEXTID,
			SAI_ID,
			A_ZEIT,
			AKT_ID
	from	MPV_DL;
END;

create or replace PROCEDURE tdb_READALL_MPV_DLA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLA_ID,
			H_DLA_ID,
			ORD,
			DLT_ID,
			BEZ,
			S_ID,
			AKT_ID,
			ORT,
			ART_ID,
			DAU,
			TEXTID,
			VON,
			NACH
	from	MPV_DLA;
END;

create or replace PROCEDURE tdb_READALL_MPV_DLN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLN_ID,
			NAME,
			VOR,
			ORT,
			S_ID,
			STA_ID,
			TEXTID,
			RKR_ID,
			SEX,
			EXT_TXT,
			LAND_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2
	from	MPV_DLN;
END;

create or replace PROCEDURE tdb_READALL_MPV_DLNADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ANS,
			NAME,
			VOR,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			LAND_ID,
			STA_ID
	from	MPV_DLNADR;
END;

create or replace PROCEDURE tdb_READALL_MPV_DLT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLT_ID,
			BEZ,
			S_ID,
			KAT_ID,
			H_DLT_ID,
			HOST_ID,
			TYP_ID,
			TEXTID,
			STUFE
	from	MPV_DLT;
END;

create or replace PROCEDURE tdb_READALL_MPV_DL_TDL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			START_ZEIT,
			DL_ID,
			BEZ,
			A_ZEIT,
			E_ZEIT,
			ORD,
			RES_F,
			S_ID
	from	MPV_DL_TDL;
END;

create or replace PROCEDURE tdb_READALL_MPV_GRA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRA_ID,
			BEZ,
			DLT_ID,
			DLTBEZ,
			TEXTID,
			S_ID
	from	MPV_GRA;
END;

create or replace PROCEDURE tdb_READALL_MPV_KAPA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ,
			KAT_S_ID,
			TDL_ID,
			TDLBEZ,
			TDL_S_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR
	from	MPV_KAPA;
END;

create or replace PROCEDURE tdb_READALL_MPV_KAPADET
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			KATBEZ,
			KAT_S_ID,
			TDL_ID,
			TDLBEZ,
			A_ZEIT,
			E_ZEIT,
			TDL_S_ID,
			PRE_ID,
			ANZ,
			BUSY,
			VPR
	from	MPV_KAPADET;
END;

create or replace PROCEDURE tdb_READALL_MPV_KAR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAR_ID,
			BEZ,
			S_ID,
			TEXTID
	from	MPV_KAR;
END;

create or replace PROCEDURE tdb_READALL_MPV_KAT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KAT_ID,
			BEZ,
			S_ID,
			H_KAT_ID,
			TYP_ID,
			GA,
			TEXTID
	from	MPV_KAT;
END;

create or replace PROCEDURE tdb_READALL_MPV_KON
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			BEZ,
			S_ID,
			HOSTKONT_ID,
			KUNDEN_ID,
			OPT_DAT,
			REF,
			SAI_ID,
			TEXTID
	from	MPV_KON;
END;

create or replace PROCEDURE tdb_READALL_MPV_KONCHECK
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	HOSTKONT_ID,
			KONT_ID,
			KAT_ID,
			DLT_ID,
			ANZ,
			BUSY
	from	MPV_KONCHECK;
END;

create or replace PROCEDURE tdb_READALL_MPV_KONTINGENT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KONT_ID,
			HOSTKONT_ID,
			KONTINGENT,
			HOSTKONTINGENT,
			KAT_ID,
			KATEGORY,
			KONT_ANZ,
			KONT_BUSY,
			HOST_ANZ,
			HOST_BUSY
	from	MPV_KONTINGENT;
END;

create or replace PROCEDURE tdb_READALL_MPV_KUNADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ANS,
			NAME,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			STA_ID,
			K_TYP_ID,
			TEL,
			FAX
	from	MPV_KUNADR;
END;

create or replace PROCEDURE tdb_READALL_MPV_KUNDEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	KUN_ID,
			NAME,
			ORT,
			S_ID,
			STA_ID,
			TEXTID,
			KANT,
			TEL,
			FAX,
			TLX,
			KONTO,
			LEITER,
			ATTR1,
			ATTR2,
			K_TYP_ID,
			LAND_ID,
			WHR_ID
	from	MPV_KUNDEN;
END;

create or replace PROCEDURE tdb_READALL_MPV_LAND
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ,
			S_ID,
			KRZL,
			HAUPT_ORT,
			HAUPT_SPR,
			HAUPT_WHR,
			TEXTID,
			VAT
	from	MPV_LAND;
END;

create or replace PROCEDURE tdb_READALL_MPV_LW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			LANDBEZ,
			LANDBEZS_ID,
			WHR_ID,
			WHRBEZ,
			WHRBEZS_ID,
			KURS_TYP,
			A_KURS,
			V_KURS
	from	MPV_LW;
END;

create or replace PROCEDURE tdb_READALL_MPV_ORT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ,
			S_ID,
			KRZL,
			LANDBEZ,
			LANDBEZS_ID,
			TEXTID,
			ZEITVER,
			KOORD1,
			KOORD2
	from	MPV_ORT;
END;

create or replace PROCEDURE tdb_READALL_MPV_PRG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			BEZ,
			S_ID,
			TEXTID,
			SAI_ID
	from	MPV_PRG;
END;

create or replace PROCEDURE tdb_READALL_MPV_REISENDER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			VOR,
			NAME,
			COMPLETE_NAME,
			RKR_ID,
			SEX,
			EXT_TXT,
			LAND_ID,
			AGE,
			PASSNR,
			ATTR1,
			ATTR2,
			PERS_TYP,
			ORT,
			S_ID,
			STA_ID,
			TEXTID
	from	MPV_REISENDER;
END;

create or replace PROCEDURE tdb_READALL_MPV_RESDL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			TEIL,
			DL_ID,
			DL_BEZ,
			DL_SID,
			TDL_ID,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			TYP_ID,
			DLT_ID,
			KONT_ID,
			R_STA
	from	MPV_RESDL;
END;

create or replace PROCEDURE tdb_READALL_MPV_RESDLN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			NAME,
			TEIL,
			DL_ID,
			TDL_ID,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			TYP_ID,
			DLT_ID,
			KONT_ID,
			R_STA
	from	MPV_RESDLN;
END;

create or replace PROCEDURE tdb_READALL_MPV_RESERVATION
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			DLG_ID,
			DL_ID,
			TEIL,
			DLT_ID,
			TYP_ID,
			BID,
			KONT_ID,
			KAT_ID,
			K_KON,
			B_KON,
			R_STA,
			SAI_ID,
			MAPO_AZEIT,
			A_ZEIT,
			MAPO_EZEIT,
			E_ZEIT,
			TEXTID
	from	MPV_RESERVATION;
END;

create or replace PROCEDURE tdb_READALL_MPV_RES_DL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			NAME,
			DL_ID,
			DLAZEIT,
			TDL_ID,
			TDLAZEIT,
			TDLEZEIT,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			KATBEZ,
			TYP_ID,
			DLT_ID,
			DLTBEZ,
			KONT_ID,
			R_STA,
			S_ID
	from	MPV_RES_DL;
END;

create or replace PROCEDURE tdb_READALL_MPV_RKR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	RKR_ID,
			BEZ,
			S_ID,
			TEXTID,
			DLNCODE,
			VONALTER,
			BISALTER
	from	MPV_RKR;
END;

create or replace PROCEDURE tdb_READALL_MPV_ROUTEN
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			BEZ,
			S_ID,
			VON,
			NACH
	from	MPV_ROUTEN;
END;

create or replace PROCEDURE tdb_READALL_MPV_SAIDET
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			SAIBEZ,
			PRG_ID,
			PRGBEZ,
			ARR_ID,
			ARRBEZ,
			A_DAT,
			TEIL,
			PRIO,
			DL_ID,
			DLBEZ,
			A_ZEIT,
			S_ID
	from	MPV_SAIDET;
END;

create or replace PROCEDURE tdb_READALL_MPV_SAISON
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			BEZ,
			S_ID,
			VON,
			BIS,
			TEXTID
	from	MPV_SAISON;
END;

create or replace PROCEDURE tdb_READALL_MPV_SPRACHE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ,
			BEZSPRID,
			DIALOG,
			SYSBEZ
	from	MPV_SPRACHE;
END;

create or replace PROCEDURE tdb_READALL_MPV_STATUS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			ABK,
			STA,
			BEZ,
			S_ID,
			KOND,
			TYP
	from	MPV_STATUS;
END;

create or replace PROCEDURE tdb_READALL_MPV_TDL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DL_ID,
			H_DL_ID,
			DLA_ID,
			BEZ,
			S_ID,
			ORD,
			A_ZEIT,
			E_ZEIT,
			RES_F,
			KID,
			KONTO,
			TEXTID,
			SAI_ID
	from	MPV_TDL;
END;

create or replace PROCEDURE tdb_READALL_MPV_TRAEGER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SPR,
			TYP,
			ID,
			BEZ,
			HID,
			HBEZ,
			HOST
	from	MPV_TRAEGER;
END;

create or replace PROCEDURE tdb_READALL_MPV_TTYP
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SPR,
			ID,
			BEZ,
			HID,
			HBEZ
	from	MPV_TTYP;
END;

create or replace PROCEDURE tdb_READALL_MPV_USERS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SPRSID,
			SPRBEZ,
			SECLEVEL,
			RESELLER,
			CONTINGENT,
			CORP_CURRENCY,
			EX_COUNTRY,
			DATA_LANG,
			STATUS_IGL,
			LANGUAGES_IGL,
			COUNTRIES_IGL,
			CURRENCIES_IGL,
			TRAVELERTYPE_IGL,
			OVERBOOK_IGL,
			FREECARRIER_IGL,
			MPID,
			FULLNAME,
			MPUSER,
			BCHST,
			NAME,
			LAND_ID,
			MPSID,
			LANDBEZ,
			LANDSID
	from	MPV_USERS;
END;

create or replace PROCEDURE tdb_READALL_MPV_WHR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	WHR_ID,
			BEZ,
			S_ID,
			KRZL,
			STATUS,
			TEXTID
	from	MPV_WHR;
END;

create or replace PROCEDURE tdb_READALL_RESDLN_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			NAME,
			TEIL,
			DL_ID,
			TDL_ID,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			TYP_ID,
			DLT_ID,
			KONT_ID,
			R_STA
	from	RESDLN_VIEW;
END;

create or replace PROCEDURE tdb_READALL_RESDL_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			TEIL,
			DL_ID,
			DL_BEZ,
			DL_SID,
			TDL_ID,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			TYP_ID,
			DLT_ID,
			KONT_ID,
			R_STA
	from	RESDL_VIEW;
END;

create or replace PROCEDURE tdb_READALL_RES_DL_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	BID,
			PERS_ID,
			NAME,
			DL_ID,
			DLAZEIT,
			TDL_ID,
			TDLAZEIT,
			TDLEZEIT,
			RESAZEIT,
			RESEZEIT,
			KAT_ID,
			KATBEZ,
			TYP_ID,
			DLT_ID,
			DLTBEZ,
			KONT_ID,
			R_STA,
			S_ID
	from	RES_DL_VIEW;
END;

create or replace PROCEDURE tdb_READALL_RKR_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	RKR_ID,
			BEZ,
			S_ID,
			TEXTID,
			DLNCODE,
			VONALTER,
			BISALTER
	from	RKR_VIEW;
END;

create or replace PROCEDURE tdb_READALL_ROUTEN_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	DLG_ID,
			BEZ,
			S_ID,
			VON,
			NACH
	from	ROUTEN_VIEW;
END;

create or replace PROCEDURE tdb_READALL_SAI_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			BEZ,
			S_ID,
			VON,
			BIS,
			TEXTID
	from	SAI_VIEW;
END;

create or replace PROCEDURE tdb_READALL_SPR_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ,
			BEZSPRID,
			DIALOG,
			SYSBEZ
	from	SPR_VIEW;
END;

create or replace PROCEDURE tdb_READALL_STA_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			ABK,
			STA,
			BEZ,
			S_ID,
			KOND,
			TYP
	from	STA_VIEW;
END;

create or replace PROCEDURE tdb_READALL_TDBV_ACTT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ACTTYPE_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			TEXTID
	from	TDBV_ACTT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_ACTTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ACTTYPE_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_ACTTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_ADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ANS,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			LAND,
			LANDSID,
			ADRTYP,
			ADRTYPID,
			ADRSTA,
			ADRSTAID,
			MAINFLAG,
			INVOICEFLAG,
			MAILFLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	TDBV_ADR;
END;

create or replace PROCEDURE tdb_READALL_TDBV_ARR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			TEXTID,
			ADAT,
			PRG_ID,
			PRG,
			SAI_ID,
			SAI
	from	TDBV_ARR;
END;

create or replace PROCEDURE tdb_READALL_TDBV_ARRSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ARR_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_ARRSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CITY
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			KRZL,
			LANDID,
			LANDBEZ,
			TEXTID,
			ZEITVER,
			KOORD1,
			KOORD2,
			TYPE
	from	TDBV_CITY;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CITYSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	ORT_ID,
			BEZ,
			KRZL,
			S_ID
	from	TDBV_CITYSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_COUNTRY
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			KRZL,
			HAUPT_ORT,
			HAUPT_SPR,
			HAUPT_WHR,
			TEXTID,
			VAT,
			DATEFORMAT
	from	TDBV_COUNTRY;
END;

create or replace PROCEDURE tdb_READALL_TDBV_COUNTRYD
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			KRZL,
			CAPITALID,
			CAPITAL,
			LANGID,
			LANG,
			CURID,
			CURRENCY,
			TEXTID,
			VAT,
			DATEFORMAT
	from	TDBV_COUNTRYD;
END;

create or replace PROCEDURE tdb_READALL_TDBV_COUNTRYLANG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			LANDBEZ,
			CCODE,
			DATEFORMAT,
			S_ID,
			SBEZ,
			SCODE
	from	TDBV_COUNTRYLANG;
END;

create or replace PROCEDURE tdb_READALL_TDBV_COUNTRYSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			BEZ,
			KRZL,
			S_ID
	from	TDBV_COUNTRYSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	WHR_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			KRZL,
			STATUS,
			TEXTID
	from	TDBV_CUR;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CURSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	WHR_ID,
			BEZ,
			KRZL,
			S_ID
	from	TDBV_CURSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUST
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			NAME,
			S_ID,
			STA_ID,
			TEXTID,
			CUSTTYPEID,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB,
			ACCOUNT,
			MANAGER,
			ATTR1,
			ATTR2,
			CURID
	from	TDBV_CUST;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUSTADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	FAX,
			TLX,
			EMAIL,
			WEB,
			CURID,
			CUR,
			PERS_ID,
			ANS,
			NAME,
			LANG,
			S_ID,
			PERSSTA,
			PERSSTAID,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			LAND,
			TEXTID,
			CUSTTYPE,
			CUSTTYPEID,
			CTEL,
			CHANDY,
			CFAX,
			CTLX,
			CEMAIL,
			CWEB,
			ACCOUNT,
			MANAGER,
			ATTR1,
			ATTR2,
			ADRTYP,
			ADRTYPID,
			ADRSTA,
			ADRSTAID,
			MAINFLAG,
			INVOICEFLAG,
			MAILFLAG,
			TEL,
			HANDY
	from	TDBV_CUSTADR;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUSTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			NAME
	from	TDBV_CUSTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUTT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	CUSTTYPE_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			TEXTID
	from	TDBV_CUTT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_CUTTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	CUSTTYPE_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_CUTTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_DLTT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TYP_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			H_TYP_ID,
			HOST_TYP,
			TEXTID
	from	TDBV_DLTT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_DLTTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TYP_ID,
			BEZ,
			S_ID
	from	TDBV_DLTTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_DLTTTREE
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	TYP_ID,
			BEZ_ID,
			BEZ,
			H_TYP_ID,
			HBEZ,
			HOST_TYP,
			HOSTBEZ,
			S_ID
	from	TDBV_DLTTTREE;
END;

create or replace PROCEDURE tdb_READALL_TDBV_GRPT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRPTYPE_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			TEXTID
	from	TDBV_GRPT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_GRPTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	GRPTYPE_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_GRPTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_LANG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ_ID,
			BEZ,
			SYSBEZ,
			DIALOG,
			OUTPUT,
			GUI,
			BEZSPRID
	from	TDBV_LANG;
END;

create or replace PROCEDURE tdb_READALL_TDBV_LANGSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	S_ID,
			BEZ,
			SYSBEZ,
			BEZSPRID
	from	TDBV_LANGSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_OT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	OT_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			TEXTID
	from	TDBV_OT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_OTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	OT_ID,
			BEZ,
			S_ID
	from	TDBV_OTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PERS
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			FIRSTNAME,
			LASTNAME,
			S_ID,
			STA_ID,
			TEXTID,
			PERSTYPEID,
			SEX,
			MUTTERSID,
			AGE,
			PASSPORT,
			ATTR1,
			ATTR2,
			RTEXTID
	from	TDBV_PERS;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PERSADR
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			ANS,
			FIRSTNAME,
			LASTNAME,
			LANG,
			S_ID,
			PERSSTA,
			PERSSTAID,
			ADR1,
			ADR2,
			ADR3,
			PLZ,
			ORT,
			KANT,
			LAND_ID,
			LAND,
			TEXTID,
			PERSTYPE,
			PERSTYPEID,
			SEX,
			MUTTERSID,
			AGE,
			PASSPORT,
			ATTR1,
			ATTR2,
			RTEXTID,
			ADRTYP,
			ADRTYPID,
			ADRSTA,
			ADRSTAID,
			MAINFLAG,
			INVOICEFLAG,
			MAILFLAG,
			TEL,
			HANDY,
			FAX,
			TLX,
			EMAIL,
			WEB
	from	TDBV_PERSADR;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PERSSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERS_ID,
			FIRSTNAME,
			LASTNAME,
			SEX
	from	TDBV_PERSSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PERST
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERSTYPE_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			VONALTER,
			BISALTER,
			TEXTID
	from	TDBV_PERST;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PERSTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PERSTYPE_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_PERSTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PRG
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			CODE,
			TEXTID,
			SAI_ID,
			SAI
	from	TDBV_PRG;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PRGSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRG_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_PRGSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PRT
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRT_ID,
			BEZ_ID,
			BEZ,
			S_ID,
			TEXTID
	from	TDBV_PRT;
END;

create or replace PROCEDURE tdb_READALL_TDBV_PRTSEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	PRT_ID,
			BEZ,
			S_ID
	from	TDBV_PRTSEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_RATESEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	LAND_ID,
			LANDBEZ,
			WHR_ID,
			WHRBEZ,
			S_ID,
			KURS_TYP,
			A_KURS,
			V_KURS,
			FROMDAT
	from	TDBV_RATESEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_SAI
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			BEZ_ID,
			BEZ,
			CODE,
			VON,
			BIS,
			S_ID,
			TEXTID
	from	TDBV_SAI;
END;

create or replace PROCEDURE tdb_READALL_TDBV_SAISEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SAI_ID,
			BEZ,
			CODE,
			S_ID
	from	TDBV_SAISEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_STA
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			BEZ_ID,
			ABK,
			STA,
			BEZ,
			S_ID,
			KOND,
			TYP
	from	TDBV_STA;
END;

create or replace PROCEDURE tdb_READALL_TDBV_STASEL
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	STA_ID,
			BEZ,
			CODE,
			S_ID,
			TYP
	from	TDBV_STASEL;
END;

create or replace PROCEDURE tdb_READALL_TDBV_USER
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	MPID,
			TDBUSER,
			BCHST,
			BCHSTID,
			SECLEVEL,
			LANG,
			S_ID,
			COUNTRY,
			LAND_ID,
			SUPTYPE,
			DLTT_ID,
			DLT,
			DLT_ID,
			KAT,
			KAT_ID,
			DLAT,
			DLAT_ID,
			DLNT,
			DLNT_ID,
			SEASON,
			SAI_ID,
			PRG,
			PRG_ID,
			STARTTIME,
			ENDTIME,
			RANGE
	from	TDBV_USER;
END;

create or replace PROCEDURE tdb_READALL_TRAEGER_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SPR,
			TYP,
			ID,
			BEZ,
			HID,
			HBEZ,
			HOST
	from	TRAEGER_VIEW;
END;

create or replace PROCEDURE tdb_READALL_TTYP_VIEW
(
	p_cur	OUT	Types.cursor_type
)
AS
BEGIN
	open p_cur for
	select	SPR,
			ID,
			BEZ,
			HID,
			HBEZ
	from	TTYP_VIEW;
END;

